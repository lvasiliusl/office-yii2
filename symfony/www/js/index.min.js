/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, jQuery) {'use strict';

	__webpack_require__(4);

	__webpack_require__(5);

	__webpack_require__(6);

	__webpack_require__(7);

	__webpack_require__(8);

	__webpack_require__(9);

	__webpack_require__(10);

	__webpack_require__(11);

	__webpack_require__(12);

	__webpack_require__(13);

	__webpack_require__(16);

	__webpack_require__(17);

	__webpack_require__(18);

	var _sortable = __webpack_require__(19);

	__webpack_require__(20);

	__webpack_require__(21);

	__webpack_require__(22);

	__webpack_require__(23);

	__webpack_require__(24);

	__webpack_require__(25);

	__webpack_require__(26);

	__webpack_require__(27);

	__webpack_require__(28);

	__webpack_require__(29);

	__webpack_require__(30);

	__webpack_require__(31);

	__webpack_require__(32);

	__webpack_require__(33);

	__webpack_require__(34);

	// if dev
	if (process.env.NODE_ENV === 'dev') {
	    console.log(process.env.NODE_ENV);
	}

	jQuery(function ($) {
	    // If safari set input's console.log();border-width 2px
	    var isSafari = !!navigator.userAgent.match(/Version\/[\d\.]+.*Safari/);
	    if (isSafari) {
	        $('body').addClass('safari');
	    }

	    function initPlugins() {
	        $('.day-exercise tbody').each(function () {
	            var sortable = window.Sortable.create(this, {
	                onSort: function onSort(evt) {
	                    $(evt.srcElement).trigger('exercise.sort');
	                }
	            });
	        });

	        $('.accordion').each(function () {
	            new Foundation.Accordion($(this), {
	                allowAllClosed: true,
	                multiExpand: true
	            });
	        });

	        $('.accordion').on("down.zf.accordion", function (e, $panel) {
	            accordionButtonToggleView();
	        }).on("up.zf.accordion", function (e, $panel) {
	            accordionButtonToggleView();
	        });
	        $('.reveal').on("open.zf.reveal", function () {
	            // fix scrollTop
	            $('.reveal-overlay').scrollTop(0);
	        });
	        function accordionButtonToggleView() {
	            $('.accordion .accordion-item').each(function (i, item) {
	                if ($(item).hasClass('is-active') && $(item).find('.accordion-title').find('.button').length > 0) {
	                    $(item).find('.accordion-title').find('.button').css({ visibility: 'hidden', opacity: 0 });
	                } else {
	                    $(item).find('.accordion-title').find('.button').css({ visibility: 'visible', opacity: 1 });
	                }
	            });
	        }
	        $('.accordion-title .button.log').click(function (e) {
	            e.preventDefault();
	            return false;
	        });

	        $('.search-btn').click(function (e) {
	            $('body').addClass('search-visible');
	            if ($('.search-area').hasClass('show-search')) {
	                $('.search-area').submit();
	            } else {
	                $('.search-area').addClass('show-search');
	                $('.search-input').focus();
	            }
	            e.preventDefault();
	        });
	        $('.accordion-title').click(function (e) {
	            e.preventDefault();
	        });
	        $('a.info').click(function (e) {
	            e.preventDefault();
	        });

	        $('.datepicker-input').fdatepicker({
	            format: 'dd M yyyy',
	            disableDblClickSelection: true,
	            leftArrow: '<',
	            rightArrow: '>',
	            closeIcon: 'X',
	            closeButton: true
	        });

	        $('.custom_select').select2({
	            placeholder: 'Select Metrics',
	            minimumResultsForSearch: -1,
	            width: '200px'
	        });

	        $('td input[type="checkbox"]').on('change', function (e) {
	            $('td input[type="checkbox"]').each(function (index, item) {
	                if ($(item).prop('checked')) {
	                    $('.delete_table_row').addClass('visible');
	                    return false;
	                } else {
	                    $('.delete_table_row').removeClass('visible');
	                }
	            });
	        });

	        $('select[data-href]').on('change', function () {
	            var url = $(this).data('href');
	            var parameter = $(this).data('parameter');
	            var pjax_container = $(this).data('pjax-container');

	            url = url.replace(parameter, $(this).val());
	            window.whr.jQuery().pjax({ url: url, container: pjax_container });
	        });

	        var modals = [];

	        $('[data-open]').each(function (e) {

	            var id = $(this).data('open');

	            if (modals.indexOf(id) === -1) {
	                modals.push(id);
	                new Foundation.Reveal($('#' + id));
	            }
	        });

	        $('.strength-category-select').each(function () {
	            var category_dropdown = $(this);
	            var plan_dropdown = $('.strength-plan-select');
	            var plans = $(this).data('plans');

	            category_dropdown.on('change', function () {
	                var category_plans = plans[$(this).val()];
	                plan_dropdown.empty();

	                var options = $([]);

	                $.each(category_plans, function (id, plan_name) {
	                    var option = $('<option/>').attr({ value: id }).text(plan_name);
	                    options = options.add(option);
	                });

	                plan_dropdown.append(options);
	            });
	        });

	        $('.js-submit-form').on('click', function (e) {
	            var form = $($(this).data('submit'));
	            form.submit();
	        });
	    }

	    initPlugins();

	    window.whr.context().on('whr-pjax:end', function () {
	        $('.reveal-overlay').remove();
	        initPlugins();
	    });

	    $('.close_notification').on('click', function (e) {
	        e.preventDefault();
	        var notificationHeigth = $(".client_notification").outerHeight();
	        $(".client_notification").animate({
	            marginTop: -notificationHeigth + 'px',
	            opacity: 0
	        }, 300, function () {
	            $(".client_notification").remove();
	        });
	    });

	    $('.show_all_btn').click(function (e) {
	        $('.gallery').addClass('show-all');
	        $('.gallery li').animate({
	            opacity: 1
	        }, 500);
	        $('.show_all_btn_container').remove();
	    });

	    // gallery upload

	    $('.gallery_upload_btn').click(function (e) {
	        $('.input_gallery_upload').focus().trigger('click');
	        e.preventDefault();
	    });

	    $('.input_gallery_upload').on('change', function () {
	        $('#gallery-photo').submit();
	    });

	    $('.show_more').click(function (e) {
	        $(this).siblings('.exercise_description').addClass('slideDown');
	        $(this).remove();
	        e.preventDefault();
	        return false;
	    });

	    function setButtonPosition(buttonClassName) {
	        var windowHeight = $(window).height();
	        var contentHeight = $('.row.expanded').outerHeight();
	        if ($(window).width() < 768 && $(window).width() > 640) {
	            if (windowHeight > contentHeight) {
	                var buttonHeight = $(buttonClassName).height();
	                var calcMargin = windowHeight - buttonHeight - contentHeight + 93;
	                console.log(buttonHeight);
	                $(buttonClassName).css({
	                    'margin-top': calcMargin
	                });
	            }
	        } else if ($(window).width() < 641) {
	            if (windowHeight > contentHeight) {
	                var _buttonHeight = $(buttonClassName).height();
	                var _calcMargin = windowHeight - _buttonHeight - contentHeight + 39;
	                console.log(_buttonHeight);
	                $(buttonClassName).css({
	                    'margin-top': _calcMargin
	                });
	            }
	        }
	    }

	    setButtonPosition('.add-new');
	    setButtonPosition('.add-new-plan');
	    setButtonPosition('.add-section');
	    setButtonPosition('.btn-contact');
	    setButtonPosition('.nutrient-balance');

	    var ajaxTables = function ajaxTables() {};
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(3)))

/***/ }),
/* 2 */
/***/ (function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;

	process.listeners = function (name) { return [] }

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery JavaScript Library v3.2.1
	 * https://jquery.com/
	 *
	 * Includes Sizzle.js
	 * https://sizzlejs.com/
	 *
	 * Copyright JS Foundation and other contributors
	 * Released under the MIT license
	 * https://jquery.org/license
	 *
	 * Date: 2017-03-20T18:59Z
	 */
	( function( global, factory ) {

		"use strict";

		if ( typeof module === "object" && typeof module.exports === "object" ) {

			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}

	// Pass this if window is not defined yet
	} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

	// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
	// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
	// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
	// enough that all such attempts are guarded in a try block.
	"use strict";

	var arr = [];

	var document = window.document;

	var getProto = Object.getPrototypeOf;

	var slice = arr.slice;

	var concat = arr.concat;

	var push = arr.push;

	var indexOf = arr.indexOf;

	var class2type = {};

	var toString = class2type.toString;

	var hasOwn = class2type.hasOwnProperty;

	var fnToString = hasOwn.toString;

	var ObjectFunctionString = fnToString.call( Object );

	var support = {};



		function DOMEval( code, doc ) {
			doc = doc || document;

			var script = doc.createElement( "script" );

			script.text = code;
			doc.head.appendChild( script ).parentNode.removeChild( script );
		}
	/* global Symbol */
	// Defining this global in .eslintrc.json would create a danger of using the global
	// unguarded in another place, it seems safer to define global only for this module



	var
		version = "3.2.1",

		// Define a local copy of jQuery
		jQuery = function( selector, context ) {

			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},

		// Support: Android <=4.0 only
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		rdashAlpha = /-([a-z])/g,

		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function( all, letter ) {
			return letter.toUpperCase();
		};

	jQuery.fn = jQuery.prototype = {

		// The current version of jQuery being used
		jquery: version,

		constructor: jQuery,

		// The default length of a jQuery object is 0
		length: 0,

		toArray: function() {
			return slice.call( this );
		},

		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {

			// Return all the elements in a clean array
			if ( num == null ) {
				return slice.call( this );
			}

			// Return just the one element from the set
			return num < 0 ? this[ num + this.length ] : this[ num ];
		},

		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {

			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );

			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;

			// Return the newly-formed element set
			return ret;
		},

		// Execute a callback for every element in the matched set.
		each: function( callback ) {
			return jQuery.each( this, callback );
		},

		map: function( callback ) {
			return this.pushStack( jQuery.map( this, function( elem, i ) {
				return callback.call( elem, i, elem );
			} ) );
		},

		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},

		first: function() {
			return this.eq( 0 );
		},

		last: function() {
			return this.eq( -1 );
		},

		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
		},

		end: function() {
			return this.prevObject || this.constructor();
		},

		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};

	jQuery.extend = jQuery.fn.extend = function() {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[ 0 ] || {},
			i = 1,
			length = arguments.length,
			deep = false;

		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;

			// Skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}

		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
			target = {};
		}

		// Extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}

		for ( ; i < length; i++ ) {

			// Only deal with non-null/undefined values
			if ( ( options = arguments[ i ] ) != null ) {

				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];

					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}

					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
						( copyIsArray = Array.isArray( copy ) ) ) ) {

						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && Array.isArray( src ) ? src : [];

						} else {
							clone = src && jQuery.isPlainObject( src ) ? src : {};
						}

						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );

					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}

		// Return the modified object
		return target;
	};

	jQuery.extend( {

		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

		// Assume jQuery is ready without the ready module
		isReady: true,

		error: function( msg ) {
			throw new Error( msg );
		},

		noop: function() {},

		isFunction: function( obj ) {
			return jQuery.type( obj ) === "function";
		},

		isWindow: function( obj ) {
			return obj != null && obj === obj.window;
		},

		isNumeric: function( obj ) {

			// As of jQuery 3.0, isNumeric is limited to
			// strings and numbers (primitives or objects)
			// that can be coerced to finite numbers (gh-2662)
			var type = jQuery.type( obj );
			return ( type === "number" || type === "string" ) &&

				// parseFloat NaNs numeric-cast false positives ("")
				// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
				// subtraction forces infinities to NaN
				!isNaN( obj - parseFloat( obj ) );
		},

		isPlainObject: function( obj ) {
			var proto, Ctor;

			// Detect obvious negatives
			// Use toString instead of jQuery.type to catch host objects
			if ( !obj || toString.call( obj ) !== "[object Object]" ) {
				return false;
			}

			proto = getProto( obj );

			// Objects with no prototype (e.g., `Object.create( null )`) are plain
			if ( !proto ) {
				return true;
			}

			// Objects with prototype are plain iff they were constructed by a global Object function
			Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
			return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
		},

		isEmptyObject: function( obj ) {

			/* eslint-disable no-unused-vars */
			// See https://github.com/eslint/eslint/issues/6125
			var name;

			for ( name in obj ) {
				return false;
			}
			return true;
		},

		type: function( obj ) {
			if ( obj == null ) {
				return obj + "";
			}

			// Support: Android <=2.3 only (functionish RegExp)
			return typeof obj === "object" || typeof obj === "function" ?
				class2type[ toString.call( obj ) ] || "object" :
				typeof obj;
		},

		// Evaluates a script in a global context
		globalEval: function( code ) {
			DOMEval( code );
		},

		// Convert dashed to camelCase; used by the css and data modules
		// Support: IE <=9 - 11, Edge 12 - 13
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function( string ) {
			return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
		},

		each: function( obj, callback ) {
			var length, i = 0;

			if ( isArrayLike( obj ) ) {
				length = obj.length;
				for ( ; i < length; i++ ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			}

			return obj;
		},

		// Support: Android <=4.0 only
		trim: function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];

			if ( arr != null ) {
				if ( isArrayLike( Object( arr ) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}

			return ret;
		},

		inArray: function( elem, arr, i ) {
			return arr == null ? -1 : indexOf.call( arr, elem, i );
		},

		// Support: Android <=4.0 only, PhantomJS 1 only
		// push.apply(_, arraylike) throws on ancient WebKit
		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;

			for ( ; j < len; j++ ) {
				first[ i++ ] = second[ j ];
			}

			first.length = i;

			return first;
		},

		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;

			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}

			return matches;
		},

		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var length, value,
				i = 0,
				ret = [];

			// Go through the array, translating each of the items to their new values
			if ( isArrayLike( elems ) ) {
				length = elems.length;
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}

			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}
			}

			// Flatten any nested arrays
			return concat.apply( [], ret );
		},

		// A global GUID counter for objects
		guid: 1,

		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function( fn, context ) {
			var tmp, args, proxy;

			if ( typeof context === "string" ) {
				tmp = fn[ context ];
				context = fn;
				fn = tmp;
			}

			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if ( !jQuery.isFunction( fn ) ) {
				return undefined;
			}

			// Simulated bind
			args = slice.call( arguments, 2 );
			proxy = function() {
				return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
			};

			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;

			return proxy;
		},

		now: Date.now,

		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	} );

	if ( typeof Symbol === "function" ) {
		jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
	}

	// Populate the class2type map
	jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );

	function isArrayLike( obj ) {

		// Support: real iOS 8.2 only (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
			type = jQuery.type( obj );

		if ( type === "function" || jQuery.isWindow( obj ) ) {
			return false;
		}

		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.3.3
	 * https://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-08-08
	 */
	(function( window ) {

	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,

		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,

		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},

		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf as it's faster than native
		// https://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[i] === elem ) {
					return i;
				}
			}
			return -1;
		},

		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

		// Regular expressions

		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",

		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
			"*\\]",

		pseudos = ":(" + identifier + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" +
			")\\)|)",

		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),

		matchExpr = {
			"ID": new RegExp( "^#(" + identifier + ")" ),
			"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
			"TAG": new RegExp( "^(" + identifier + "|[*])" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},

		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,

		rnative = /^[^{]+\{\s*\[native \w/,

		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

		rsibling = /[+~]/,

		// CSS escapes
		// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
					// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
					// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},

		// CSS string/identifier serialization
		// https://drafts.csswg.org/cssom/#common-serializing-idioms
		rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
		fcssescape = function( ch, asCodePoint ) {
			if ( asCodePoint ) {

				// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
				if ( ch === "\0" ) {
					return "\uFFFD";
				}

				// Control characters and (dependent upon position) numbers get escaped as code points
				return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
			}

			// Other potentially-special ASCII characters get backslash-escaped
			return "\\" + ch;
		},

		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		},

		disabledAncestor = addCombinator(
			function( elem ) {
				return elem.disabled === true && ("form" in elem || "label" in elem);
			},
			{ dir: "parentNode", next: "legend" }
		);

	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?

			// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :

			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}

	function Sizzle( selector, context, results, seed ) {
		var m, i, elem, nid, match, groups, newSelector,
			newContext = context && context.ownerDocument,

			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;

		results = results || [];

		// Return early from calls with invalid selector or context
		if ( typeof selector !== "string" || !selector ||
			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

			return results;
		}

		// Try to shortcut find operations (as opposed to filters) in HTML documents
		if ( !seed ) {

			if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
				setDocument( context );
			}
			context = context || document;

			if ( documentIsHTML ) {

				// If the selector is sufficiently simple, try using a "get*By*" DOM method
				// (excepting DocumentFragment context, where the methods don't exist)
				if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

					// ID selector
					if ( (m = match[1]) ) {

						// Document context
						if ( nodeType === 9 ) {
							if ( (elem = context.getElementById( m )) ) {

								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if ( elem.id === m ) {
									results.push( elem );
									return results;
								}
							} else {
								return results;
							}

						// Element context
						} else {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( newContext && (elem = newContext.getElementById( m )) &&
								contains( context, elem ) &&
								elem.id === m ) {

								results.push( elem );
								return results;
							}
						}

					// Type selector
					} else if ( match[2] ) {
						push.apply( results, context.getElementsByTagName( selector ) );
						return results;

					// Class selector
					} else if ( (m = match[3]) && support.getElementsByClassName &&
						context.getElementsByClassName ) {

						push.apply( results, context.getElementsByClassName( m ) );
						return results;
					}
				}

				// Take advantage of querySelectorAll
				if ( support.qsa &&
					!compilerCache[ selector + " " ] &&
					(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

					if ( nodeType !== 1 ) {
						newContext = context;
						newSelector = selector;

					// qSA looks outside Element context, which is not what we want
					// Thanks to Andrew Dupont for this workaround technique
					// Support: IE <=8
					// Exclude object elements
					} else if ( context.nodeName.toLowerCase() !== "object" ) {

						// Capture the context ID, setting it first if necessary
						if ( (nid = context.getAttribute( "id" )) ) {
							nid = nid.replace( rcssescape, fcssescape );
						} else {
							context.setAttribute( "id", (nid = expando) );
						}

						// Prefix every selector in the list
						groups = tokenize( selector );
						i = groups.length;
						while ( i-- ) {
							groups[i] = "#" + nid + " " + toSelector( groups[i] );
						}
						newSelector = groups.join( "," );

						// Expand context for sibling selectors
						newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
							context;
					}

					if ( newSelector ) {
						try {
							push.apply( results,
								newContext.querySelectorAll( newSelector )
							);
							return results;
						} catch ( qsaError ) {
						} finally {
							if ( nid === expando ) {
								context.removeAttribute( "id" );
							}
						}
					}
				}
			}
		}

		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}

	/**
	 * Create key-value caches of limited size
	 * @returns {function(string, object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];

		function cache( key, value ) {
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}

	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}

	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created element and returns a boolean result
	 */
	function assert( fn ) {
		var el = document.createElement("fieldset");

		try {
			return !!fn( el );
		} catch (e) {
			return false;
		} finally {
			// Remove from its parent by default
			if ( el.parentNode ) {
				el.parentNode.removeChild( el );
			}
			// release memory in IE
			el = null;
		}
	}

	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = arr.length;

		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}

	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				a.sourceIndex - b.sourceIndex;

		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}

		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}

		return a ? 1 : -1;
	}

	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for :enabled/:disabled
	 * @param {Boolean} disabled true for :disabled; false for :enabled
	 */
	function createDisabledPseudo( disabled ) {

		// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
		return function( elem ) {

			// Only certain elements can match :enabled or :disabled
			// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
			// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
			if ( "form" in elem ) {

				// Check for inherited disabledness on relevant non-disabled elements:
				// * listed form-associated elements in a disabled fieldset
				//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
				//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
				// * option elements in a disabled optgroup
				//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
				// All such elements have a "form" property.
				if ( elem.parentNode && elem.disabled === false ) {

					// Option elements defer to a parent optgroup if present
					if ( "label" in elem ) {
						if ( "label" in elem.parentNode ) {
							return elem.parentNode.disabled === disabled;
						} else {
							return elem.disabled === disabled;
						}
					}

					// Support: IE 6 - 11
					// Use the isDisabled shortcut property to check for disabled fieldset ancestors
					return elem.isDisabled === disabled ||

						// Where there is no isDisabled, check manually
						/* jshint -W018 */
						elem.isDisabled !== !disabled &&
							disabledAncestor( elem ) === disabled;
				}

				return elem.disabled === disabled;

			// Try to winnow out elements that can't be disabled before trusting the disabled property.
			// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
			// even exist on them, let alone have a boolean value.
			} else if ( "label" in elem ) {
				return elem.disabled === disabled;
			}

			// Remaining elements are neither :enabled nor :disabled
			return false;
		};
	}

	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;

				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}

	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}

	// Expose support vars for convenience
	support = Sizzle.support = {};

	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};

	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, subWindow,
			doc = node ? node.ownerDocument || node : preferredDoc;

		// Return early if doc is invalid or already selected
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}

		// Update global variables
		document = doc;
		docElem = document.documentElement;
		documentIsHTML = !isXML( document );

		// Support: IE 9-11, Edge
		// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
		if ( preferredDoc !== document &&
			(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

			// Support: IE 11, Edge
			if ( subWindow.addEventListener ) {
				subWindow.addEventListener( "unload", unloadHandler, false );

			// Support: IE 9 - 10 only
			} else if ( subWindow.attachEvent ) {
				subWindow.attachEvent( "onunload", unloadHandler );
			}
		}

		/* Attributes
		---------------------------------------------------------------------- */

		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert(function( el ) {
			el.className = "i";
			return !el.getAttribute("className");
		});

		/* getElement(s)By*
		---------------------------------------------------------------------- */

		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( el ) {
			el.appendChild( document.createComment("") );
			return !el.getElementsByTagName("*").length;
		});

		// Support: IE<9
		support.getElementsByClassName = rnative.test( document.getElementsByClassName );

		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programmatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( el ) {
			docElem.appendChild( el ).id = expando;
			return !document.getElementsByName || !document.getElementsByName( expando ).length;
		});

		// ID filter and find
		if ( support.getById ) {
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var elem = context.getElementById( id );
					return elem ? [ elem ] : [];
				}
			};
		} else {
			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" &&
						elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};

			// Support: IE 6 - 7 only
			// getElementById is not reliable as a find shortcut
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var node, i, elems,
						elem = context.getElementById( id );

					if ( elem ) {

						// Verify the id attribute
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}

						// Fall back on getElementsByName
						elems = context.getElementsByName( id );
						i = 0;
						while ( (elem = elems[i++]) ) {
							node = elem.getAttributeNode("id");
							if ( node && node.value === id ) {
								return [ elem ];
							}
						}
					}

					return [];
				}
			};
		}

		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );

				// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :

			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );

				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}

					return tmp;
				}
				return results;
			};

		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};

		/* QSA/matchesSelector
		---------------------------------------------------------------------- */

		// QSA and matchesSelector support

		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];

		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See https://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];

		if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( el ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// https://bugs.jquery.com/ticket/12359
				docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
					"<select id='" + expando + "-\r\\' msallowcapture=''>" +
					"<option selected=''></option></select>";

				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( el.querySelectorAll("[msallowcapture^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}

				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !el.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}

				// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
				if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push("~=");
				}

				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !el.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}

				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibling-combinator selector` fails
				if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push(".#.+[+~]");
				}
			});

			assert(function( el ) {
				el.innerHTML = "<a href='' disabled='disabled'></a>" +
					"<select disabled='disabled'><option/></select>";

				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = document.createElement("input");
				input.setAttribute( "type", "hidden" );
				el.appendChild( input ).setAttribute( "name", "D" );

				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( el.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}

				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( el.querySelectorAll(":enabled").length !== 2 ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}

				// Support: IE9-11+
				// IE's :disabled selector does not pick up the children of disabled fieldsets
				docElem.appendChild( el ).disabled = true;
				if ( el.querySelectorAll(":disabled").length !== 2 ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}

				// Opera 10-11 does not throw on post-comma invalid pseudos
				el.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}

		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector) )) ) {

			assert(function( el ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( el, "*" );

				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( el, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}

		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );

		// Element contains another
		// Purposefully self-exclusive
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};

		/* Sorting
		---------------------------------------------------------------------- */

		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {

			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}

			// Calculate position if both inputs belong to the same document
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :

				// Otherwise we know they are disconnected
				1;

			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

				// Choose the first element that is related to our preferred document
				if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
					return 1;
				}

				// Maintain original order
				return sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
			}

			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];

			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
				return a === document ? -1 :
					b === document ? 1 :
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;

			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}

			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( (cur = cur.parentNode) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( (cur = cur.parentNode) ) {
				bp.unshift( cur );
			}

			// Walk down the tree looking for a discrepancy
			while ( ap[i] === bp[i] ) {
				i++;
			}

			return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[i], bp[i] ) :

				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 :
				bp[i] === preferredDoc ? 1 :
				0;
		};

		return document;
	};

	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};

	Sizzle.matchesSelector = function( elem, expr ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		// Make sure that attribute selectors are quoted
		expr = expr.replace( rattributeQuotes, "='$1']" );

		if ( support.matchesSelector && documentIsHTML &&
			!compilerCache[ expr + " " ] &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

			try {
				var ret = matches.call( elem, expr );

				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch (e) {}
		}

		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};

	Sizzle.contains = function( context, elem ) {
		// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};

	Sizzle.attr = function( elem, name ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;

		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};

	Sizzle.escape = function( sel ) {
		return (sel + "").replace( rcssescape, fcssescape );
	};

	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};

	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;

		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );

		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}

		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;

		return results;
	};

	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;

		if ( !nodeType ) {
			// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes

		return ret;
	};

	Expr = Sizzle.selectors = {

		// Can be adjusted by the user
		cacheLength: 50,

		createPseudo: markFunction,

		match: matchExpr,

		attrHandle: {},

		find: {},

		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},

		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );

				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}

				return match.slice( 0, 4 );
			},

			"CHILD": function( match ) {
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[1] = match[1].toLowerCase();

				if ( match[1].slice( 0, 3 ) === "nth" ) {
					// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}

					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

				// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}

				return match;
			},

			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[6] && match[2];

				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}

				// Accept quoted arguments as-is
				if ( match[3] ) {
					match[2] = match[4] || match[5] || "";

				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}

				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},

		filter: {

			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},

			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];

				return pattern ||
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
					classCache( className, function( elem ) {
						return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
					});
			},

			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );

					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}

					result += "";

					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
				};
			},

			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";

				return first === 1 && last === 0 ?

					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :

					function( elem, context, xml ) {
						var cache, uniqueCache, outerCache, node, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType,
							diff = false;

						if ( parent ) {

							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) {

											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}

							start = [ forward ? parent.firstChild : parent.lastChild ];

							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {

								// Seek `elem` from a previously-cached index

								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex && cache[ 2 ];
								node = nodeIndex && parent.childNodes[ nodeIndex ];

								while ( (node = ++nodeIndex && node && node[ dir ] ||

									// Fallback to seeking `elem` from the start
									(diff = nodeIndex = 0) || start.pop()) ) {

									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}

							} else {
								// Use previously-cached element index if available
								if ( useCache ) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[ expando ] || (node[ expando ] = {});

									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[ node.uniqueID ] ||
										(outerCache[ node.uniqueID ] = {});

									cache = uniqueCache[ type ] || [];
									nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
									diff = nodeIndex;
								}

								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if ( diff === false ) {
									// Use the same loop as above to seek `elem` from the start
									while ( (node = ++nodeIndex && node && node[ dir ] ||
										(diff = nodeIndex = 0) || start.pop()) ) {

										if ( ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) &&
											++diff ) {

											// Cache the index of each encountered element
											if ( useCache ) {
												outerCache = node[ expando ] || (node[ expando ] = {});

												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[ node.uniqueID ] ||
													(outerCache[ node.uniqueID ] = {});

												uniqueCache[ type ] = [ dirruns, diff ];
											}

											if ( node === elem ) {
												break;
											}
										}
									}
								}
							}

							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},

			"PSEUDO": function( pseudo, argument ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );

				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}

				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}

				return fn;
			}
		},

		pseudos: {
			// Potentially complex pseudos
			"not": markFunction(function( selector ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );

				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;

						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
			}),

			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),

			"contains": markFunction(function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),

			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
				// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),

			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},

			"root": function( elem ) {
				return elem === docElem;
			},

			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},

			// Boolean properties
			"enabled": createDisabledPseudo( false ),
			"disabled": createDisabledPseudo( true ),

			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},

			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}

				return elem.selected === true;
			},

			// Contents
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},

			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},

			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},

			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},

			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},

			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&

					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},

			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),

			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),

			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),

			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};

	Expr.pseudos["nth"] = Expr.pseudos["eq"];

	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}

	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();

	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];

		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}

		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;

		while ( soFar ) {

			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}

			matched = false;

			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}

			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}

			if ( !matched ) {
				break;
			}
		}

		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};

	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}

	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			skip = combinator.next,
			key = skip || dir,
			checkNonElements = base && key === "parentNode",
			doneName = done++;

		return combinator.first ?
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
				return false;
			} :

			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, uniqueCache, outerCache,
					newCache = [ dirruns, doneName ];

				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

							if ( skip && skip === elem.nodeName.toLowerCase() ) {
								elem = elem[ dir ] || elem;
							} else if ( (oldCache = uniqueCache[ key ]) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[ key ] = newCache;

								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
				return false;
			};
	}

	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}

	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}

	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;

		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}

		return newUnmatched;
	}

	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,

				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,

				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

						// ...intermediate processing is necessary
						[] :

						// ...otherwise use results directly
						results :
					matcherIn;

			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}

			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );

				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}

			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
								// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}

					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
							(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

							seed[temp] = !(results[temp] = elem);
						}
					}
				}

			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}

	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,

			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];

		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}

		return elementMatcher( matchers );
	}

	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;

				if ( outermost ) {
					outermostContext = context === document || context || outermost;
				}

				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						if ( !context && elem.ownerDocument !== document ) {
							setDocument( elem );
							xml = !documentIsHTML;
						}
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context || document, xml) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}

					// Track unmatched elements for set filters
					if ( bySet ) {
						// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}

						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}

				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;

				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}

					if ( seed ) {
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}

						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}

					// Add matches to results
					push.apply( results, setMatched );

					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {

						Sizzle.uniqueSort( results );
					}
				}

				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}

				return unmatched;
			};

		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}

	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];

		if ( !cached ) {
			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}

			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};

	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( (selector = compiled.selector || selector) );

		results = results || [];

		// Try to minimize operations if there is only one selector in the list and no seed
		// (the latter of which guarantees us context)
		if ( match.length === 1 ) {

			// Reduce context if the leading compound selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;

				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}

				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}

						break;
					}
				}
			}
		}

		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};

	// One-time assignments

	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;

	// Initialize against the default document
	setDocument();

	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( el ) {
		// Should return 1, but returns 4 (following)
		return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
	});

	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( el ) {
		el.innerHTML = "<a href='#'></a>";
		return el.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}

	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( el ) {
		el.innerHTML = "<input/>";
		el.firstChild.setAttribute( "value", "" );
		return el.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}

	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( el ) {
		return el.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
						(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
					null;
			}
		});
	}

	return Sizzle;

	})( window );



	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;

	// Deprecated
	jQuery.expr[ ":" ] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;
	jQuery.escapeSelector = Sizzle.escape;




	var dir = function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	};


	var siblings = function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	};


	var rneedsContext = jQuery.expr.match.needsContext;



	function nodeName( elem, name ) {

	  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

	};
	var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



	var risSimple = /^.[^:#\[\.,]*$/;

	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( jQuery.isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				return !!qualifier.call( elem, i, elem ) !== not;
			} );
		}

		// Single element
		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			} );
		}

		// Arraylike of elements (jQuery, arguments, Array)
		if ( typeof qualifier !== "string" ) {
			return jQuery.grep( elements, function( elem ) {
				return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
			} );
		}

		// Simple selector that can be filtered directly, removing non-Elements
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		// Complex selector, compare the two sets, removing non-Elements
		qualifier = jQuery.filter( qualifier, elements );
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not && elem.nodeType === 1;
		} );
	}

	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];

		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		if ( elems.length === 1 && elem.nodeType === 1 ) {
			return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
		}

		return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		} ) );
	};

	jQuery.fn.extend( {
		find: function( selector ) {
			var i, ret,
				len = this.length,
				self = this;

			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter( function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				} ) );
			}

			ret = this.pushStack( [] );

			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}

			return len > 1 ? jQuery.uniqueSort( ret ) : ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow( this, selector || [], false ) );
		},
		not: function( selector ) {
			return this.pushStack( winnow( this, selector || [], true ) );
		},
		is: function( selector ) {
			return !!winnow(
				this,

				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	} );


	// Initialize a jQuery object


	// A central reference to the root jQuery(document)
	var rootjQuery,

		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		// Shortcut simple #id case for speed
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

		init = jQuery.fn.init = function( selector, context, root ) {
			var match, elem;

			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}

			// Method init() accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;

			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector[ 0 ] === "<" &&
					selector[ selector.length - 1 ] === ">" &&
					selector.length >= 3 ) {

					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];

				} else {
					match = rquickExpr.exec( selector );
				}

				// Match html or make sure no context is specified for #id
				if ( match && ( match[ 1 ] || !context ) ) {

					// HANDLE: $(html) -> $(array)
					if ( match[ 1 ] ) {
						context = context instanceof jQuery ? context[ 0 ] : context;

						// Option to run scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[ 1 ],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );

						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {

								// Properties of context are called as methods if possible
								if ( jQuery.isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );

								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}

						return this;

					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[ 2 ] );

						if ( elem ) {

							// Inject the element directly into the jQuery object
							this[ 0 ] = elem;
							this.length = 1;
						}
						return this;
					}

				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || root ).find( selector );

				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}

			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this[ 0 ] = selector;
				this.length = 1;
				return this;

			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( jQuery.isFunction( selector ) ) {
				return root.ready !== undefined ?
					root.ready( selector ) :

					// Execute immediately if ready is not present
					selector( jQuery );
			}

			return jQuery.makeArray( selector, this );
		};

	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;

	// Initialize central reference
	rootjQuery = jQuery( document );


	var rparentsprev = /^(?:parents|prev(?:Until|All))/,

		// Methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};

	jQuery.fn.extend( {
		has: function( target ) {
			var targets = jQuery( target, this ),
				l = targets.length;

			return this.filter( function() {
				var i = 0;
				for ( ; i < l; i++ ) {
					if ( jQuery.contains( this, targets[ i ] ) ) {
						return true;
					}
				}
			} );
		},

		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				targets = typeof selectors !== "string" && jQuery( selectors );

			// Positional selectors never match, since there's no _selection_ context
			if ( !rneedsContext.test( selectors ) ) {
				for ( ; i < l; i++ ) {
					for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

						// Always skip document fragments
						if ( cur.nodeType < 11 && ( targets ?
							targets.index( cur ) > -1 :

							// Don't pass non-elements to Sizzle
							cur.nodeType === 1 &&
								jQuery.find.matchesSelector( cur, selectors ) ) ) {

							matched.push( cur );
							break;
						}
					}
				}
			}

			return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
		},

		// Determine the position of an element within the set
		index: function( elem ) {

			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}

			// Index in selector
			if ( typeof elem === "string" ) {
				return indexOf.call( jQuery( elem ), this[ 0 ] );
			}

			// Locate the position of the desired element
			return indexOf.call( this,

				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem
			);
		},

		add: function( selector, context ) {
			return this.pushStack(
				jQuery.uniqueSort(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},

		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		}
	} );

	function sibling( cur, dir ) {
		while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
		return cur;
	}

	jQuery.each( {
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return siblings( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return siblings( elem.firstChild );
		},
		contents: function( elem ) {
	        if ( nodeName( elem, "iframe" ) ) {
	            return elem.contentDocument;
	        }

	        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
	        // Treat the template element as a regular one in browsers that
	        // don't support it.
	        if ( nodeName( elem, "template" ) ) {
	            elem = elem.content || elem;
	        }

	        return jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var matched = jQuery.map( this, fn, until );

			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}

			if ( selector && typeof selector === "string" ) {
				matched = jQuery.filter( selector, matched );
			}

			if ( this.length > 1 ) {

				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					jQuery.uniqueSort( matched );
				}

				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					matched.reverse();
				}
			}

			return this.pushStack( matched );
		};
	} );
	var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



	// Convert String-formatted options into Object-formatted ones
	function createOptions( options ) {
		var object = {};
		jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		} );
		return object;
	}

	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {

		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			createOptions( options ) :
			jQuery.extend( {}, options );

		var // Flag to know if list is currently firing
			firing,

			// Last fire value for non-forgettable lists
			memory,

			// Flag to know if list was already fired
			fired,

			// Flag to prevent firing
			locked,

			// Actual callback list
			list = [],

			// Queue of execution data for repeatable lists
			queue = [],

			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,

			// Fire callbacks
			fire = function() {

				// Enforce single-firing
				locked = locked || options.once;

				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				fired = firing = true;
				for ( ; queue.length; firingIndex = -1 ) {
					memory = queue.shift();
					while ( ++firingIndex < list.length ) {

						// Run callback and check for early termination
						if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
							options.stopOnFalse ) {

							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
						}
					}
				}

				// Forget the data if we're done with it
				if ( !options.memory ) {
					memory = false;
				}

				firing = false;

				// Clean up if we're done firing for good
				if ( locked ) {

					// Keep an empty list if we have data for future add calls
					if ( memory ) {
						list = [];

					// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},

			// Actual Callbacks object
			self = {

				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {

						// If we have memory from a past run, we should fire after adding
						if ( memory && !firing ) {
							firingIndex = list.length - 1;
							queue.push( memory );
						}

						( function add( args ) {
							jQuery.each( args, function( _, arg ) {
								if ( jQuery.isFunction( arg ) ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

									// Inspect recursively
									add( arg );
								}
							} );
						} )( arguments );

						if ( memory && !firing ) {
							fire();
						}
					}
					return this;
				},

				// Remove a callback from the list
				remove: function() {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );

							// Handle firing indexes
							if ( index <= firingIndex ) {
								firingIndex--;
							}
						}
					} );
					return this;
				},

				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ?
						jQuery.inArray( fn, list ) > -1 :
						list.length > 0;
				},

				// Remove all callbacks from the list
				empty: function() {
					if ( list ) {
						list = [];
					}
					return this;
				},

				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function() {
					locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function() {
					return !list;
				},

				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function() {
					locked = queue = [];
					if ( !memory && !firing ) {
						list = memory = "";
					}
					return this;
				},
				locked: function() {
					return !!locked;
				},

				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( !locked ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						queue.push( args );
						if ( !firing ) {
							fire();
						}
					}
					return this;
				},

				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},

				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};

		return self;
	};


	function Identity( v ) {
		return v;
	}
	function Thrower( ex ) {
		throw ex;
	}

	function adoptValue( value, resolve, reject, noValue ) {
		var method;

		try {

			// Check for promise aspect first to privilege synchronous behavior
			if ( value && jQuery.isFunction( ( method = value.promise ) ) ) {
				method.call( value ).done( resolve ).fail( reject );

			// Other thenables
			} else if ( value && jQuery.isFunction( ( method = value.then ) ) ) {
				method.call( value, resolve, reject );

			// Other non-thenables
			} else {

				// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
				// * false: [ value ].slice( 0 ) => resolve( value )
				// * true: [ value ].slice( 1 ) => resolve()
				resolve.apply( undefined, [ value ].slice( noValue ) );
			}

		// For Promises/A+, convert exceptions into rejections
		// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
		// Deferred#then to conditionally suppress rejection.
		} catch ( value ) {

			// Support: Android 4.0 only
			// Strict mode functions invoked without .call/.apply get global-object context
			reject.apply( undefined, [ value ] );
		}
	}

	jQuery.extend( {

		Deferred: function( func ) {
			var tuples = [

					// action, add listener, callbacks,
					// ... .then handlers, argument index, [final state]
					[ "notify", "progress", jQuery.Callbacks( "memory" ),
						jQuery.Callbacks( "memory" ), 2 ],
					[ "resolve", "done", jQuery.Callbacks( "once memory" ),
						jQuery.Callbacks( "once memory" ), 0, "resolved" ],
					[ "reject", "fail", jQuery.Callbacks( "once memory" ),
						jQuery.Callbacks( "once memory" ), 1, "rejected" ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					"catch": function( fn ) {
						return promise.then( null, fn );
					},

					// Keep pipe for back-compat
					pipe: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;

						return jQuery.Deferred( function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {

								// Map tuples (progress, done, fail) to arguments (done, fail, progress)
								var fn = jQuery.isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

								// deferred.progress(function() { bind to newDefer or newDefer.notify })
								// deferred.done(function() { bind to newDefer or newDefer.resolve })
								// deferred.fail(function() { bind to newDefer or newDefer.reject })
								deferred[ tuple[ 1 ] ]( function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise()
											.progress( newDefer.notify )
											.done( newDefer.resolve )
											.fail( newDefer.reject );
									} else {
										newDefer[ tuple[ 0 ] + "With" ](
											this,
											fn ? [ returned ] : arguments
										);
									}
								} );
							} );
							fns = null;
						} ).promise();
					},
					then: function( onFulfilled, onRejected, onProgress ) {
						var maxDepth = 0;
						function resolve( depth, deferred, handler, special ) {
							return function() {
								var that = this,
									args = arguments,
									mightThrow = function() {
										var returned, then;

										// Support: Promises/A+ section 2.3.3.3.3
										// https://promisesaplus.com/#point-59
										// Ignore double-resolution attempts
										if ( depth < maxDepth ) {
											return;
										}

										returned = handler.apply( that, args );

										// Support: Promises/A+ section 2.3.1
										// https://promisesaplus.com/#point-48
										if ( returned === deferred.promise() ) {
											throw new TypeError( "Thenable self-resolution" );
										}

										// Support: Promises/A+ sections 2.3.3.1, 3.5
										// https://promisesaplus.com/#point-54
										// https://promisesaplus.com/#point-75
										// Retrieve `then` only once
										then = returned &&

											// Support: Promises/A+ section 2.3.4
											// https://promisesaplus.com/#point-64
											// Only check objects and functions for thenability
											( typeof returned === "object" ||
												typeof returned === "function" ) &&
											returned.then;

										// Handle a returned thenable
										if ( jQuery.isFunction( then ) ) {

											// Special processors (notify) just wait for resolution
											if ( special ) {
												then.call(
													returned,
													resolve( maxDepth, deferred, Identity, special ),
													resolve( maxDepth, deferred, Thrower, special )
												);

											// Normal processors (resolve) also hook into progress
											} else {

												// ...and disregard older resolution values
												maxDepth++;

												then.call(
													returned,
													resolve( maxDepth, deferred, Identity, special ),
													resolve( maxDepth, deferred, Thrower, special ),
													resolve( maxDepth, deferred, Identity,
														deferred.notifyWith )
												);
											}

										// Handle all other returned values
										} else {

											// Only substitute handlers pass on context
											// and multiple values (non-spec behavior)
											if ( handler !== Identity ) {
												that = undefined;
												args = [ returned ];
											}

											// Process the value(s)
											// Default process is resolve
											( special || deferred.resolveWith )( that, args );
										}
									},

									// Only normal processors (resolve) catch and reject exceptions
									process = special ?
										mightThrow :
										function() {
											try {
												mightThrow();
											} catch ( e ) {

												if ( jQuery.Deferred.exceptionHook ) {
													jQuery.Deferred.exceptionHook( e,
														process.stackTrace );
												}

												// Support: Promises/A+ section 2.3.3.3.4.1
												// https://promisesaplus.com/#point-61
												// Ignore post-resolution exceptions
												if ( depth + 1 >= maxDepth ) {

													// Only substitute handlers pass on context
													// and multiple values (non-spec behavior)
													if ( handler !== Thrower ) {
														that = undefined;
														args = [ e ];
													}

													deferred.rejectWith( that, args );
												}
											}
										};

								// Support: Promises/A+ section 2.3.3.3.1
								// https://promisesaplus.com/#point-57
								// Re-resolve promises immediately to dodge false rejection from
								// subsequent errors
								if ( depth ) {
									process();
								} else {

									// Call an optional hook to record the stack, in case of exception
									// since it's otherwise lost when execution goes async
									if ( jQuery.Deferred.getStackHook ) {
										process.stackTrace = jQuery.Deferred.getStackHook();
									}
									window.setTimeout( process );
								}
							};
						}

						return jQuery.Deferred( function( newDefer ) {

							// progress_handlers.add( ... )
							tuples[ 0 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									jQuery.isFunction( onProgress ) ?
										onProgress :
										Identity,
									newDefer.notifyWith
								)
							);

							// fulfilled_handlers.add( ... )
							tuples[ 1 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									jQuery.isFunction( onFulfilled ) ?
										onFulfilled :
										Identity
								)
							);

							// rejected_handlers.add( ... )
							tuples[ 2 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									jQuery.isFunction( onRejected ) ?
										onRejected :
										Thrower
								)
							);
						} ).promise();
					},

					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};

			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 5 ];

				// promise.progress = list.add
				// promise.done = list.add
				// promise.fail = list.add
				promise[ tuple[ 1 ] ] = list.add;

				// Handle state
				if ( stateString ) {
					list.add(
						function() {

							// state = "resolved" (i.e., fulfilled)
							// state = "rejected"
							state = stateString;
						},

						// rejected_callbacks.disable
						// fulfilled_callbacks.disable
						tuples[ 3 - i ][ 2 ].disable,

						// progress_callbacks.lock
						tuples[ 0 ][ 2 ].lock
					);
				}

				// progress_handlers.fire
				// fulfilled_handlers.fire
				// rejected_handlers.fire
				list.add( tuple[ 3 ].fire );

				// deferred.notify = function() { deferred.notifyWith(...) }
				// deferred.resolve = function() { deferred.resolveWith(...) }
				// deferred.reject = function() { deferred.rejectWith(...) }
				deferred[ tuple[ 0 ] ] = function() {
					deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
					return this;
				};

				// deferred.notifyWith = list.fireWith
				// deferred.resolveWith = list.fireWith
				// deferred.rejectWith = list.fireWith
				deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
			} );

			// Make the deferred a promise
			promise.promise( deferred );

			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}

			// All done!
			return deferred;
		},

		// Deferred helper
		when: function( singleValue ) {
			var

				// count of uncompleted subordinates
				remaining = arguments.length,

				// count of unprocessed arguments
				i = remaining,

				// subordinate fulfillment data
				resolveContexts = Array( i ),
				resolveValues = slice.call( arguments ),

				// the master Deferred
				master = jQuery.Deferred(),

				// subordinate callback factory
				updateFunc = function( i ) {
					return function( value ) {
						resolveContexts[ i ] = this;
						resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( !( --remaining ) ) {
							master.resolveWith( resolveContexts, resolveValues );
						}
					};
				};

			// Single- and empty arguments are adopted like Promise.resolve
			if ( remaining <= 1 ) {
				adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
					!remaining );

				// Use .then() to unwrap secondary thenables (cf. gh-3000)
				if ( master.state() === "pending" ||
					jQuery.isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

					return master.then();
				}
			}

			// Multiple arguments are aggregated like Promise.all array elements
			while ( i-- ) {
				adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
			}

			return master.promise();
		}
	} );


	// These usually indicate a programmer mistake during development,
	// warn about them ASAP rather than swallowing them by default.
	var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

	jQuery.Deferred.exceptionHook = function( error, stack ) {

		// Support: IE 8 - 9 only
		// Console exists when dev tools are open, which can happen at any time
		if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
			window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
		}
	};




	jQuery.readyException = function( error ) {
		window.setTimeout( function() {
			throw error;
		} );
	};




	// The deferred used on DOM ready
	var readyList = jQuery.Deferred();

	jQuery.fn.ready = function( fn ) {

		readyList
			.then( fn )

			// Wrap jQuery.readyException in a function so that the lookup
			// happens at the time of error handling instead of callback
			// registration.
			.catch( function( error ) {
				jQuery.readyException( error );
			} );

		return this;
	};

	jQuery.extend( {

		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,

		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,

		// Handle when the DOM is ready
		ready: function( wait ) {

			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}

			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );
		}
	} );

	jQuery.ready.then = readyList.then;

	// The ready event handler and self cleanup method
	function completed() {
		document.removeEventListener( "DOMContentLoaded", completed );
		window.removeEventListener( "load", completed );
		jQuery.ready();
	}

	// Catch cases where $(document).ready() is called
	// after the browser event has already occurred.
	// Support: IE <=9 - 10 only
	// Older IE sometimes signals "interactive" too soon
	if ( document.readyState === "complete" ||
		( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

		// Handle it asynchronously to allow scripts the opportunity to delay ready
		window.setTimeout( jQuery.ready );

	} else {

		// Use the handy event callback
		document.addEventListener( "DOMContentLoaded", completed );

		// A fallback to window.onload, that will always work
		window.addEventListener( "load", completed );
	}




	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			len = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				access( elems, fn, i, key[ i ], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {

				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < len; i++ ) {
					fn(
						elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
					);
				}
			}
		}

		if ( chainable ) {
			return elems;
		}

		// Gets
		if ( bulk ) {
			return fn.call( elems );
		}

		return len ? fn( elems[ 0 ], key ) : emptyGet;
	};
	var acceptData = function( owner ) {

		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
	};




	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}

	Data.uid = 1;

	Data.prototype = {

		cache: function( owner ) {

			// Check if the owner object already has a cache
			var value = owner[ this.expando ];

			// If not, create one
			if ( !value ) {
				value = {};

				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if ( acceptData( owner ) ) {

					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if ( owner.nodeType ) {
						owner[ this.expando ] = value;

					// Otherwise secure it in a non-enumerable property
					// configurable must be true to allow the property to be
					// deleted when data is removed
					} else {
						Object.defineProperty( owner, this.expando, {
							value: value,
							configurable: true
						} );
					}
				}
			}

			return value;
		},
		set: function( owner, data, value ) {
			var prop,
				cache = this.cache( owner );

			// Handle: [ owner, key, value ] args
			// Always use camelCase key (gh-2257)
			if ( typeof data === "string" ) {
				cache[ jQuery.camelCase( data ) ] = value;

			// Handle: [ owner, { properties } ] args
			} else {

				// Copy the properties one-by-one to the cache object
				for ( prop in data ) {
					cache[ jQuery.camelCase( prop ) ] = data[ prop ];
				}
			}
			return cache;
		},
		get: function( owner, key ) {
			return key === undefined ?
				this.cache( owner ) :

				// Always use camelCase key (gh-2257)
				owner[ this.expando ] && owner[ this.expando ][ jQuery.camelCase( key ) ];
		},
		access: function( owner, key, value ) {

			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if ( key === undefined ||
					( ( key && typeof key === "string" ) && value === undefined ) ) {

				return this.get( owner, key );
			}

			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set( owner, key, value );

			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function( owner, key ) {
			var i,
				cache = owner[ this.expando ];

			if ( cache === undefined ) {
				return;
			}

			if ( key !== undefined ) {

				// Support array or space separated string of keys
				if ( Array.isArray( key ) ) {

					// If key is an array of keys...
					// We always set camelCase keys, so remove that.
					key = key.map( jQuery.camelCase );
				} else {
					key = jQuery.camelCase( key );

					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					key = key in cache ?
						[ key ] :
						( key.match( rnothtmlwhite ) || [] );
				}

				i = key.length;

				while ( i-- ) {
					delete cache[ key[ i ] ];
				}
			}

			// Remove the expando if there's no more data
			if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

				// Support: Chrome <=35 - 45
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
				if ( owner.nodeType ) {
					owner[ this.expando ] = undefined;
				} else {
					delete owner[ this.expando ];
				}
			}
		},
		hasData: function( owner ) {
			var cache = owner[ this.expando ];
			return cache !== undefined && !jQuery.isEmptyObject( cache );
		}
	};
	var dataPriv = new Data();

	var dataUser = new Data();



	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /[A-Z]/g;

	function getData( data ) {
		if ( data === "true" ) {
			return true;
		}

		if ( data === "false" ) {
			return false;
		}

		if ( data === "null" ) {
			return null;
		}

		// Only convert to a number if it doesn't change the string
		if ( data === +data + "" ) {
			return +data;
		}

		if ( rbrace.test( data ) ) {
			return JSON.parse( data );
		}

		return data;
	}

	function dataAttr( elem, key, data ) {
		var name;

		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {
			name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
			data = elem.getAttribute( name );

			if ( typeof data === "string" ) {
				try {
					data = getData( data );
				} catch ( e ) {}

				// Make sure we set the data so it isn't changed later
				dataUser.set( elem, key, data );
			} else {
				data = undefined;
			}
		}
		return data;
	}

	jQuery.extend( {
		hasData: function( elem ) {
			return dataUser.hasData( elem ) || dataPriv.hasData( elem );
		},

		data: function( elem, name, data ) {
			return dataUser.access( elem, name, data );
		},

		removeData: function( elem, name ) {
			dataUser.remove( elem, name );
		},

		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function( elem, name, data ) {
			return dataPriv.access( elem, name, data );
		},

		_removeData: function( elem, name ) {
			dataPriv.remove( elem, name );
		}
	} );

	jQuery.fn.extend( {
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;

			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = dataUser.get( elem );

					if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {

							// Support: IE 11 only
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = jQuery.camelCase( name.slice( 5 ) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						dataPriv.set( elem, "hasDataAttrs", true );
					}
				}

				return data;
			}

			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each( function() {
					dataUser.set( this, key );
				} );
			}

			return access( this, function( value ) {
				var data;

				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if ( elem && value === undefined ) {

					// Attempt to get data from the cache
					// The key will always be camelCased in Data
					data = dataUser.get( elem, key );
					if ( data !== undefined ) {
						return data;
					}

					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr( elem, key );
					if ( data !== undefined ) {
						return data;
					}

					// We tried really hard, but the data doesn't exist.
					return;
				}

				// Set the data...
				this.each( function() {

					// We always store the camelCased key
					dataUser.set( this, key, value );
				} );
			}, null, value, arguments.length > 1, null, true );
		},

		removeData: function( key ) {
			return this.each( function() {
				dataUser.remove( this, key );
			} );
		}
	} );


	jQuery.extend( {
		queue: function( elem, type, data ) {
			var queue;

			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = dataPriv.get( elem, type );

				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || Array.isArray( data ) ) {
						queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},

		dequeue: function( elem, type ) {
			type = type || "fx";

			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};

			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}

			if ( fn ) {

				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}

				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}

			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},

		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
				empty: jQuery.Callbacks( "once memory" ).add( function() {
					dataPriv.remove( elem, [ type + "queue", key ] );
				} )
			} );
		}
	} );

	jQuery.fn.extend( {
		queue: function( type, data ) {
			var setter = 2;

			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}

			if ( arguments.length < setter ) {
				return jQuery.queue( this[ 0 ], type );
			}

			return data === undefined ?
				this :
				this.each( function() {
					var queue = jQuery.queue( this, type, data );

					// Ensure a hooks for this queue
					jQuery._queueHooks( this, type );

					if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				} );
		},
		dequeue: function( type ) {
			return this.each( function() {
				jQuery.dequeue( this, type );
			} );
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},

		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};

			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";

			while ( i-- ) {
				tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	} );
	var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

	var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

	var isHiddenWithinTree = function( elem, el ) {

			// isHiddenWithinTree might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;

			// Inline style trumps all
			return elem.style.display === "none" ||
				elem.style.display === "" &&

				// Otherwise, check computed style
				// Support: Firefox <=43 - 45
				// Disconnected elements can have computed display: none, so first confirm that elem is
				// in the document.
				jQuery.contains( elem.ownerDocument, elem ) &&

				jQuery.css( elem, "display" ) === "none";
		};

	var swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	};




	function adjustCSS( elem, prop, valueParts, tween ) {
		var adjusted,
			scale = 1,
			maxIterations = 20,
			currentValue = tween ?
				function() {
					return tween.cur();
				} :
				function() {
					return jQuery.css( elem, prop, "" );
				},
			initial = currentValue(),
			unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

			// Starting value computation is required for potential unit mismatches
			initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
				rcssNum.exec( jQuery.css( elem, prop ) );

		if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[ 3 ];

			// Make sure we update the tween properties later on
			valueParts = valueParts || [];

			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;

			do {

				// If previous iteration zeroed out, double until we get *something*.
				// Use string for doubling so we don't accidentally see scale as unchanged below
				scale = scale || ".5";

				// Adjust and apply
				initialInUnit = initialInUnit / scale;
				jQuery.style( elem, prop, initialInUnit + unit );

			// Update scale, tolerating zero or NaN from tween.cur()
			// Break the loop if scale is unchanged or perfect, or if we've just had enough.
			} while (
				scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
			);
		}

		if ( valueParts ) {
			initialInUnit = +initialInUnit || +initial || 0;

			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[ 1 ] ?
				initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
				+valueParts[ 2 ];
			if ( tween ) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}


	var defaultDisplayMap = {};

	function getDefaultDisplay( elem ) {
		var temp,
			doc = elem.ownerDocument,
			nodeName = elem.nodeName,
			display = defaultDisplayMap[ nodeName ];

		if ( display ) {
			return display;
		}

		temp = doc.body.appendChild( doc.createElement( nodeName ) );
		display = jQuery.css( temp, "display" );

		temp.parentNode.removeChild( temp );

		if ( display === "none" ) {
			display = "block";
		}
		defaultDisplayMap[ nodeName ] = display;

		return display;
	}

	function showHide( elements, show ) {
		var display, elem,
			values = [],
			index = 0,
			length = elements.length;

		// Determine new display value for elements that need to change
		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}

			display = elem.style.display;
			if ( show ) {

				// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
				// check is required in this first loop unless we have a nonempty display value (either
				// inline or about-to-be-restored)
				if ( display === "none" ) {
					values[ index ] = dataPriv.get( elem, "display" ) || null;
					if ( !values[ index ] ) {
						elem.style.display = "";
					}
				}
				if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
					values[ index ] = getDefaultDisplay( elem );
				}
			} else {
				if ( display !== "none" ) {
					values[ index ] = "none";

					// Remember what we're overwriting
					dataPriv.set( elem, "display", display );
				}
			}
		}

		// Set the display of the elements in a second loop to avoid constant reflow
		for ( index = 0; index < length; index++ ) {
			if ( values[ index ] != null ) {
				elements[ index ].style.display = values[ index ];
			}
		}

		return elements;
	}

	jQuery.fn.extend( {
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}

			return this.each( function() {
				if ( isHiddenWithinTree( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			} );
		}
	} );
	var rcheckableType = ( /^(?:checkbox|radio)$/i );

	var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );

	var rscriptType = ( /^$|\/(?:java|ecma)script/i );



	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {

		// Support: IE <=9 only
		option: [ 1, "<select multiple='multiple'>", "</select>" ],

		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		_default: [ 0, "", "" ]
	};

	// Support: IE <=9 only
	wrapMap.optgroup = wrapMap.option;

	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;


	function getAll( context, tag ) {

		// Support: IE <=9 - 11 only
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret;

		if ( typeof context.getElementsByTagName !== "undefined" ) {
			ret = context.getElementsByTagName( tag || "*" );

		} else if ( typeof context.querySelectorAll !== "undefined" ) {
			ret = context.querySelectorAll( tag || "*" );

		} else {
			ret = [];
		}

		if ( tag === undefined || tag && nodeName( context, tag ) ) {
			return jQuery.merge( [ context ], ret );
		}

		return ret;
	}


	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			dataPriv.set(
				elems[ i ],
				"globalEval",
				!refElements || dataPriv.get( refElements[ i ], "globalEval" )
			);
		}
	}


	var rhtml = /<|&#?\w+;/;

	function buildFragment( elems, context, scripts, selection, ignored ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {

					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while ( ( elem = nodes[ i++ ] ) ) {

			// Skip elements already in the context collection (trac-4087)
			if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
				if ( ignored ) {
					ignored.push( elem );
				}
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( ( elem = tmp[ j++ ] ) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		return fragment;
	}


	( function() {
		var fragment = document.createDocumentFragment(),
			div = fragment.appendChild( document.createElement( "div" ) ),
			input = document.createElement( "input" );

		// Support: Android 4.0 - 4.3 only
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute( "type", "radio" );
		input.setAttribute( "checked", "checked" );
		input.setAttribute( "name", "t" );

		div.appendChild( input );

		// Support: Android <=4.1 only
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

		// Support: IE <=11 only
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
	} )();
	var documentElement = document.documentElement;



	var
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

	function returnTrue() {
		return true;
	}

	function returnFalse() {
		return false;
	}

	// Support: IE <=9 only
	// See #13393 for more info
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}

	function on( elem, types, selector, data, fn, one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {

			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {

				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				on( elem, type, selector, data, types[ type ], one );
			}
			return elem;
		}

		if ( data == null && fn == null ) {

			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {

				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {

				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return elem;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {

				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};

			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return elem.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		} );
	}

	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {

		global: {},

		add: function( elem, types, handler, data, selector ) {

			var handleObjIn, eventHandle, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.get( elem );

			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}

			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}

			// Ensure that invalid selectors throw exceptions at attach time
			// Evaluate against documentElement in case elem is a non-element node (e.g., document)
			if ( selector ) {
				jQuery.find.matchesSelector( documentElement, selector );
			}

			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}

			// Init the element's event structure and main handler, if this is the first
			if ( !( events = elemData.events ) ) {
				events = elemData.events = {};
			}
			if ( !( eventHandle = elemData.handle ) ) {
				eventHandle = elemData.handle = function( e ) {

					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
						jQuery.event.dispatch.apply( elem, arguments ) : undefined;
				};
			}

			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}

				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};

				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;

				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};

				// handleObj is passed to all event handlers
				handleObj = jQuery.extend( {
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join( "." )
				}, handleObjIn );

				// Init the event handler queue if we're the first
				if ( !( handlers = events[ type ] ) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;

					// Only use addEventListener if the special events handler returns false
					if ( !special.setup ||
						special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle );
						}
					}
				}

				if ( special.add ) {
					special.add.call( elem, handleObj );

					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}

				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}

				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}

		},

		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {

			var j, origCount, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

			if ( !elemData || !( events = elemData.events ) ) {
				return;
			}

			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}

				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[ 2 ] &&
					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];

					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector ||
							selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );

						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}

				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown ||
						special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

						jQuery.removeEvent( elem, type, elemData.handle );
					}

					delete events[ type ];
				}
			}

			// Remove data and the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				dataPriv.remove( elem, "handle events" );
			}
		},

		dispatch: function( nativeEvent ) {

			// Make a writable jQuery.Event from the native event object
			var event = jQuery.event.fix( nativeEvent );

			var i, j, ret, matched, handleObj, handlerQueue,
				args = new Array( arguments.length ),
				handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};

			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[ 0 ] = event;

			for ( i = 1; i < arguments.length; i++ ) {
				args[ i ] = arguments[ i ];
			}

			event.delegateTarget = this;

			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}

			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );

			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;

				j = 0;
				while ( ( handleObj = matched.handlers[ j++ ] ) &&
					!event.isImmediatePropagationStopped() ) {

					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

						event.handleObj = handleObj;
						event.data = handleObj.data;

						ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
							handleObj.handler ).apply( matched.elem, args );

						if ( ret !== undefined ) {
							if ( ( event.result = ret ) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}

			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}

			return event.result;
		},

		handlers: function( event, handlers ) {
			var i, handleObj, sel, matchedHandlers, matchedSelectors,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;

			// Find delegate handlers
			if ( delegateCount &&

				// Support: IE <=9
				// Black-hole SVG <use> instance trees (trac-13180)
				cur.nodeType &&

				// Support: Firefox <=42
				// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
				// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
				// Support: IE 11 only
				// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
				!( event.type === "click" && event.button >= 1 ) ) {

				for ( ; cur !== this; cur = cur.parentNode || this ) {

					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
						matchedHandlers = [];
						matchedSelectors = {};
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];

							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";

							if ( matchedSelectors[ sel ] === undefined ) {
								matchedSelectors[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) > -1 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matchedSelectors[ sel ] ) {
								matchedHandlers.push( handleObj );
							}
						}
						if ( matchedHandlers.length ) {
							handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
						}
					}
				}
			}

			// Add the remaining (directly-bound) handlers
			cur = this;
			if ( delegateCount < handlers.length ) {
				handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
			}

			return handlerQueue;
		},

		addProp: function( name, hook ) {
			Object.defineProperty( jQuery.Event.prototype, name, {
				enumerable: true,
				configurable: true,

				get: jQuery.isFunction( hook ) ?
					function() {
						if ( this.originalEvent ) {
								return hook( this.originalEvent );
						}
					} :
					function() {
						if ( this.originalEvent ) {
								return this.originalEvent[ name ];
						}
					},

				set: function( value ) {
					Object.defineProperty( this, name, {
						enumerable: true,
						configurable: true,
						writable: true,
						value: value
					} );
				}
			} );
		},

		fix: function( originalEvent ) {
			return originalEvent[ jQuery.expando ] ?
				originalEvent :
				new jQuery.Event( originalEvent );
		},

		special: {
			load: {

				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {

				// Fire native event if possible so blur/focus sequence is correct
				trigger: function() {
					if ( this !== safeActiveElement() && this.focus ) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function() {
					if ( this === safeActiveElement() && this.blur ) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {

				// For checkbox, fire native event so checked state will be right
				trigger: function() {
					if ( this.type === "checkbox" && this.click && nodeName( this, "input" ) ) {
						this.click();
						return false;
					}
				},

				// For cross-browser consistency, don't fire native .click() on links
				_default: function( event ) {
					return nodeName( event.target, "a" );
				}
			},

			beforeunload: {
				postDispatch: function( event ) {

					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};

	jQuery.removeEvent = function( elem, type, handle ) {

		// This "if" is needed for plain objects
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle );
		}
	};

	jQuery.Event = function( src, props ) {

		// Allow instantiation without the 'new' keyword
		if ( !( this instanceof jQuery.Event ) ) {
			return new jQuery.Event( src, props );
		}

		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;

			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&

					// Support: Android <=2.3 only
					src.returnValue === false ?
				returnTrue :
				returnFalse;

			// Create target properties
			// Support: Safari <=6 - 7 only
			// Target should not be a text node (#504, #13143)
			this.target = ( src.target && src.target.nodeType === 3 ) ?
				src.target.parentNode :
				src.target;

			this.currentTarget = src.currentTarget;
			this.relatedTarget = src.relatedTarget;

		// Event type
		} else {
			this.type = src;
		}

		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}

		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();

		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};

	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,
		isSimulated: false,

		preventDefault: function() {
			var e = this.originalEvent;

			this.isDefaultPrevented = returnTrue;

			if ( e && !this.isSimulated ) {
				e.preventDefault();
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;

			this.isPropagationStopped = returnTrue;

			if ( e && !this.isSimulated ) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;

			this.isImmediatePropagationStopped = returnTrue;

			if ( e && !this.isSimulated ) {
				e.stopImmediatePropagation();
			}

			this.stopPropagation();
		}
	};

	// Includes all common event props including KeyEvent and MouseEvent specific props
	jQuery.each( {
		altKey: true,
		bubbles: true,
		cancelable: true,
		changedTouches: true,
		ctrlKey: true,
		detail: true,
		eventPhase: true,
		metaKey: true,
		pageX: true,
		pageY: true,
		shiftKey: true,
		view: true,
		"char": true,
		charCode: true,
		key: true,
		keyCode: true,
		button: true,
		buttons: true,
		clientX: true,
		clientY: true,
		offsetX: true,
		offsetY: true,
		pointerId: true,
		pointerType: true,
		screenX: true,
		screenY: true,
		targetTouches: true,
		toElement: true,
		touches: true,

		which: function( event ) {
			var button = event.button;

			// Add which for key events
			if ( event.which == null && rkeyEvent.test( event.type ) ) {
				return event.charCode != null ? event.charCode : event.keyCode;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
				if ( button & 1 ) {
					return 1;
				}

				if ( button & 2 ) {
					return 3;
				}

				if ( button & 4 ) {
					return 2;
				}

				return 0;
			}

			return event.which;
		}
	}, jQuery.event.addProp );

	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each( {
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,

			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;

				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	} );

	jQuery.fn.extend( {

		on: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn );
		},
		one: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {

				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ?
						handleObj.origType + "." + handleObj.namespace :
						handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {

				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {

				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each( function() {
				jQuery.event.remove( this, types, fn, selector );
			} );
		}
	} );


	var

		/* eslint-disable max-len */

		// See https://github.com/eslint/eslint/issues/3229
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

		/* eslint-enable */

		// Support: IE <=10 - 11, Edge 12 - 13
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,

		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rscriptTypeMasked = /^true\/(.*)/,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

	// Prefer a tbody over its parent table for containing new rows
	function manipulationTarget( elem, content ) {
		if ( nodeName( elem, "table" ) &&
			nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

			return jQuery( ">tbody", elem )[ 0 ] || elem;
		}

		return elem;
	}

	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		var match = rscriptTypeMasked.exec( elem.type );

		if ( match ) {
			elem.type = match[ 1 ];
		} else {
			elem.removeAttribute( "type" );
		}

		return elem;
	}

	function cloneCopyEvent( src, dest ) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

		if ( dest.nodeType !== 1 ) {
			return;
		}

		// 1. Copy private data: events, handlers, etc.
		if ( dataPriv.hasData( src ) ) {
			pdataOld = dataPriv.access( src );
			pdataCur = dataPriv.set( dest, pdataOld );
			events = pdataOld.events;

			if ( events ) {
				delete pdataCur.handle;
				pdataCur.events = {};

				for ( type in events ) {
					for ( i = 0, l = events[ type ].length; i < l; i++ ) {
						jQuery.event.add( dest, type, events[ type ][ i ] );
					}
				}
			}
		}

		// 2. Copy user data
		if ( dataUser.hasData( src ) ) {
			udataOld = dataUser.access( src );
			udataCur = jQuery.extend( {}, udataOld );

			dataUser.set( dest, udataCur );
		}
	}

	// Fix IE bugs, see support tests
	function fixInput( src, dest ) {
		var nodeName = dest.nodeName.toLowerCase();

		// Fails to persist the checked state of a cloned checkbox or radio button.
		if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
			dest.checked = src.checked;

		// Fails to return the selected option to the default selected state when cloning options
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}

	function domManip( collection, args, callback, ignored ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = collection.length,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return collection.each( function( index ) {
				var self = collection.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				domManip( self, args, callback, ignored );
			} );
		}

		if ( l ) {
			fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			// Require either new content or an interest in ignored elements to invoke the callback
			if ( first || ignored ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {

							// Support: Android <=4.0 only, PhantomJS 1 only
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( collection[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!dataPriv.access( node, "globalEval" ) &&
							jQuery.contains( doc, node ) ) {

							if ( node.src ) {

								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								DOMEval( node.textContent.replace( rcleanScript, "" ), doc );
							}
						}
					}
				}
			}
		}

		return collection;
	}

	function remove( elem, selector, keepData ) {
		var node,
			nodes = selector ? jQuery.filter( selector, elem ) : elem,
			i = 0;

		for ( ; ( node = nodes[ i ] ) != null; i++ ) {
			if ( !keepData && node.nodeType === 1 ) {
				jQuery.cleanData( getAll( node ) );
			}

			if ( node.parentNode ) {
				if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
					setGlobalEval( getAll( node, "script" ) );
				}
				node.parentNode.removeChild( node );
			}
		}

		return elem;
	}

	jQuery.extend( {
		htmlPrefilter: function( html ) {
			return html.replace( rxhtmlTag, "<$1></$2>" );
		},

		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var i, l, srcElements, destElements,
				clone = elem.cloneNode( true ),
				inPage = jQuery.contains( elem.ownerDocument, elem );

			// Fix IE cloning issues
			if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
					!jQuery.isXMLDoc( elem ) ) {

				// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					fixInput( srcElements[ i ], destElements[ i ] );
				}
			}

			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );

					for ( i = 0, l = srcElements.length; i < l; i++ ) {
						cloneCopyEvent( srcElements[ i ], destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}

			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}

			// Return the cloned set
			return clone;
		},

		cleanData: function( elems ) {
			var data, elem, type,
				special = jQuery.event.special,
				i = 0;

			for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
				if ( acceptData( elem ) ) {
					if ( ( data = elem[ dataPriv.expando ] ) ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );

								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}

						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataPriv.expando ] = undefined;
					}
					if ( elem[ dataUser.expando ] ) {

						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataUser.expando ] = undefined;
					}
				}
			}
		}
	} );

	jQuery.fn.extend( {
		detach: function( selector ) {
			return remove( this, selector, true );
		},

		remove: function( selector ) {
			return remove( this, selector );
		},

		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().each( function() {
						if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
							this.textContent = value;
						}
					} );
			}, null, value, arguments.length );
		},

		append: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			} );
		},

		prepend: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			} );
		},

		before: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			} );
		},

		after: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			} );
		},

		empty: function() {
			var elem,
				i = 0;

			for ( ; ( elem = this[ i ] ) != null; i++ ) {
				if ( elem.nodeType === 1 ) {

					// Prevent memory leaks
					jQuery.cleanData( getAll( elem, false ) );

					// Remove any remaining nodes
					elem.textContent = "";
				}
			}

			return this;
		},

		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

			return this.map( function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			} );
		},

		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;

				if ( value === undefined && elem.nodeType === 1 ) {
					return elem.innerHTML;
				}

				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

					value = jQuery.htmlPrefilter( value );

					try {
						for ( ; i < l; i++ ) {
							elem = this[ i ] || {};

							// Remove element nodes and prevent memory leaks
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}

						elem = 0;

					// If using innerHTML throws an exception, use the fallback method
					} catch ( e ) {}
				}

				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},

		replaceWith: function() {
			var ignored = [];

			// Make the changes, replacing each non-ignored context element with the new content
			return domManip( this, arguments, function( elem ) {
				var parent = this.parentNode;

				if ( jQuery.inArray( this, ignored ) < 0 ) {
					jQuery.cleanData( getAll( this ) );
					if ( parent ) {
						parent.replaceChild( elem, this );
					}
				}

			// Force callback invocation
			}, ignored );
		}
	} );

	jQuery.each( {
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1,
				i = 0;

			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );

				// Support: Android <=4.0 only, PhantomJS 1 only
				// .get() because push.apply(_, arraylike) throws on ancient WebKit
				push.apply( ret, elems.get() );
			}

			return this.pushStack( ret );
		};
	} );
	var rmargin = ( /^margin/ );

	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

	var getStyles = function( elem ) {

			// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			var view = elem.ownerDocument.defaultView;

			if ( !view || !view.opener ) {
				view = window;
			}

			return view.getComputedStyle( elem );
		};



	( function() {

		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {

			// This is a singleton, we need to execute it only once
			if ( !div ) {
				return;
			}

			div.style.cssText =
				"box-sizing:border-box;" +
				"position:relative;display:block;" +
				"margin:auto;border:1px;padding:1px;" +
				"top:1%;width:50%";
			div.innerHTML = "";
			documentElement.appendChild( container );

			var divStyle = window.getComputedStyle( div );
			pixelPositionVal = divStyle.top !== "1%";

			// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
			reliableMarginLeftVal = divStyle.marginLeft === "2px";
			boxSizingReliableVal = divStyle.width === "4px";

			// Support: Android 4.0 - 4.3 only
			// Some styles come back with percentage values, even though they shouldn't
			div.style.marginRight = "50%";
			pixelMarginRightVal = divStyle.marginRight === "4px";

			documentElement.removeChild( container );

			// Nullify the div so it wouldn't be stored in the memory and
			// it will also be a sign that checks already performed
			div = null;
		}

		var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );

		// Finish early in limited (non-browser) environments
		if ( !div.style ) {
			return;
		}

		// Support: IE <=9 - 11 only
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";

		container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
			"padding:0;margin-top:1px;position:absolute";
		container.appendChild( div );

		jQuery.extend( support, {
			pixelPosition: function() {
				computeStyleTests();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				computeStyleTests();
				return boxSizingReliableVal;
			},
			pixelMarginRight: function() {
				computeStyleTests();
				return pixelMarginRightVal;
			},
			reliableMarginLeft: function() {
				computeStyleTests();
				return reliableMarginLeftVal;
			}
		} );
	} )();


	function curCSS( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,

			// Support: Firefox 51+
			// Retrieving style before computed somehow
			// fixes an issue with getting wrong values
			// on detached elements
			style = elem.style;

		computed = computed || getStyles( elem );

		// getPropertyValue is needed for:
		//   .css('filter') (IE 9 only, #12537)
		//   .css('--customProperty) (#3144)
		if ( computed ) {
			ret = computed.getPropertyValue( name ) || computed[ name ];

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// https://drafts.csswg.org/cssom/#resolved-values
			if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret !== undefined ?

			// Support: IE <=9 - 11 only
			// IE returns zIndex value as an integer.
			ret + "" :
			ret;
	}


	function addGetHookIf( conditionFn, hookFn ) {

		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {

					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}

				// Hook needed; redefine it so that the support test is not executed again.
				return ( this.get = hookFn ).apply( this, arguments );
			}
		};
	}


	var

		// Swappable if display is none or starts with table
		// except "table", "table-cell", or "table-caption"
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
		rcustomProp = /^--/,
		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},

		cssPrefixes = [ "Webkit", "Moz", "ms" ],
		emptyStyle = document.createElement( "div" ).style;

	// Return a css property mapped to a potentially vendor prefixed property
	function vendorPropName( name ) {

		// Shortcut for names that are not vendor prefixed
		if ( name in emptyStyle ) {
			return name;
		}

		// Check for vendor prefixed names
		var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
			i = cssPrefixes.length;

		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in emptyStyle ) {
				return name;
			}
		}
	}

	// Return a property mapped along what jQuery.cssProps suggests or to
	// a vendor prefixed property.
	function finalPropName( name ) {
		var ret = jQuery.cssProps[ name ];
		if ( !ret ) {
			ret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;
		}
		return ret;
	}

	function setPositiveNumber( elem, value, subtract ) {

		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec( value );
		return matches ?

			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
			value;
	}

	function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
		var i,
			val = 0;

		// If we already have the right measurement, avoid augmentation
		if ( extra === ( isBorderBox ? "border" : "content" ) ) {
			i = 4;

		// Otherwise initialize for horizontal or vertical properties
		} else {
			i = name === "width" ? 1 : 0;
		}

		for ( ; i < 4; i += 2 ) {

			// Both box models exclude margin, so add it if we want it
			if ( extra === "margin" ) {
				val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
			}

			if ( isBorderBox ) {

				// border-box includes padding, so remove it if we want content
				if ( extra === "content" ) {
					val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}

				// At this point, extra isn't border nor margin, so remove border
				if ( extra !== "margin" ) {
					val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			} else {

				// At this point, extra isn't content, so add padding
				val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

				// At this point, extra isn't content nor padding, so add border
				if ( extra !== "padding" ) {
					val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}

		return val;
	}

	function getWidthOrHeight( elem, name, extra ) {

		// Start with computed style
		var valueIsBorderBox,
			styles = getStyles( elem ),
			val = curCSS( elem, name, styles ),
			isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test( val ) ) {
			return val;
		}

		// Check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Fall back to offsetWidth/Height when value is "auto"
		// This happens for inline elements with no explicit setting (gh-3571)
		if ( val === "auto" ) {
			val = elem[ "offset" + name[ 0 ].toUpperCase() + name.slice( 1 ) ];
		}

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;

		// Use the active box-sizing model to add/subtract irrelevant styles
		return ( val +
			augmentWidthOrHeight(
				elem,
				name,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles
			)
		) + "px";
	}

	jQuery.extend( {

		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {

						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},

		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},

		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			"float": "cssFloat"
		},

		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {

			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}

			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = jQuery.camelCase( name ),
				isCustomProp = rcustomProp.test( name ),
				style = elem.style;

			// Make sure that we're working with the right name. We don't
			// want to query the value if it is a CSS custom property
			// since they are user-defined.
			if ( !isCustomProp ) {
				name = finalPropName( origName );
			}

			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;

				// Convert "+=" or "-=" to relative numbers (#7345)
				if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
					value = adjustCSS( elem, name, ret );

					// Fixes bug #9237
					type = "number";
				}

				// Make sure that null and NaN values aren't set (#7116)
				if ( value == null || value !== value ) {
					return;
				}

				// If a number was passed in, add the unit (except for certain CSS properties)
				if ( type === "number" ) {
					value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
				}

				// background-* props affect original clone's values
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}

				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !( "set" in hooks ) ||
					( value = hooks.set( elem, value, extra ) ) !== undefined ) {

					if ( isCustomProp ) {
						style.setProperty( name, value );
					} else {
						style[ name ] = value;
					}
				}

			} else {

				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks &&
					( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

					return ret;
				}

				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},

		css: function( elem, name, extra, styles ) {
			var val, num, hooks,
				origName = jQuery.camelCase( name ),
				isCustomProp = rcustomProp.test( name );

			// Make sure that we're working with the right name. We don't
			// want to modify the value if it is a CSS custom property
			// since they are user-defined.
			if ( !isCustomProp ) {
				name = finalPropName( origName );
			}

			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}

			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}

			// Convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}

			// Make numeric if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || isFinite( num ) ? num || 0 : val;
			}

			return val;
		}
	} );

	jQuery.each( [ "height", "width" ], function( i, name ) {
		jQuery.cssHooks[ name ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {

					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

						// Support: Safari 8+
						// Table columns in Safari have non-zero offsetWidth & zero
						// getBoundingClientRect().width unless display is changed.
						// Support: IE <=11 only
						// Running getBoundingClientRect on a disconnected node
						// in IE throws an error.
						( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
							swap( elem, cssShow, function() {
								return getWidthOrHeight( elem, name, extra );
							} ) :
							getWidthOrHeight( elem, name, extra );
				}
			},

			set: function( elem, value, extra ) {
				var matches,
					styles = extra && getStyles( elem ),
					subtract = extra && augmentWidthOrHeight(
						elem,
						name,
						extra,
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
						styles
					);

				// Convert to pixels if value adjustment is needed
				if ( subtract && ( matches = rcssNum.exec( value ) ) &&
					( matches[ 3 ] || "px" ) !== "px" ) {

					elem.style[ name ] = value;
					value = jQuery.css( elem, name );
				}

				return setPositiveNumber( elem, value, subtract );
			}
		};
	} );

	jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
		function( elem, computed ) {
			if ( computed ) {
				return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
					elem.getBoundingClientRect().left -
						swap( elem, { marginLeft: 0 }, function() {
							return elem.getBoundingClientRect().left;
						} )
					) + "px";
			}
		}
	);

	// These hooks are used by animate to expand properties
	jQuery.each( {
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},

					// Assumes a single number if not a string
					parts = typeof value === "string" ? value.split( " " ) : [ value ];

				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}

				return expanded;
			}
		};

		if ( !rmargin.test( prefix ) ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	} );

	jQuery.fn.extend( {
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;

				if ( Array.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;

					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}

					return map;
				}

				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		}
	} );


	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];

			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];

			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;

			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}

			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;

				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if ( tween.elem.nodeType !== 1 ||
					tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
					return tween.elem[ tween.prop ];
				}

				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css( tween.elem, tween.prop, "" );

				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {

				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.nodeType === 1 &&
					( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
						jQuery.cssHooks[ tween.prop ] ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};

	// Support: IE <=9 only
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};

	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		},
		_default: "swing"
	};

	jQuery.fx = Tween.prototype.init;

	// Back compat <1.8 extension point
	jQuery.fx.step = {};




	var
		fxNow, inProgress,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rrun = /queueHooks$/;

	function schedule() {
		if ( inProgress ) {
			if ( document.hidden === false && window.requestAnimationFrame ) {
				window.requestAnimationFrame( schedule );
			} else {
				window.setTimeout( schedule, jQuery.fx.interval );
			}

			jQuery.fx.tick();
		}
	}

	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout( function() {
			fxNow = undefined;
		} );
		return ( fxNow = jQuery.now() );
	}

	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			i = 0,
			attrs = { height: type };

		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}

		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}

		return attrs;
	}

	function createTween( value, prop, animation ) {
		var tween,
			collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

				// We're done with this property
				return tween;
			}
		}
	}

	function defaultPrefilter( elem, props, opts ) {
		var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
			isBox = "width" in props || "height" in props,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHiddenWithinTree( elem ),
			dataShow = dataPriv.get( elem, "fxshow" );

		// Queue-skipping animations hijack the fx hooks
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;

			anim.always( function() {

				// Ensure the complete handler is called before this completes
				anim.always( function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				} );
			} );
		}

		// Detect show/hide animations
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.test( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {

					// Pretend to be hidden if this is a "show" and
					// there is still data from a stopped show/hide
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;

					// Ignore all other no-op show/hide data
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
			}
		}

		// Bail out if this is a no-op like .hide().hide()
		propTween = !jQuery.isEmptyObject( props );
		if ( !propTween && jQuery.isEmptyObject( orig ) ) {
			return;
		}

		// Restrict "overflow" and "display" styles during box animations
		if ( isBox && elem.nodeType === 1 ) {

			// Support: IE <=9 - 11, Edge 12 - 13
			// Record all 3 overflow attributes because IE does not infer the shorthand
			// from identically-valued overflowX and overflowY
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

			// Identify a display type, preferring old show/hide data over the CSS cascade
			restoreDisplay = dataShow && dataShow.display;
			if ( restoreDisplay == null ) {
				restoreDisplay = dataPriv.get( elem, "display" );
			}
			display = jQuery.css( elem, "display" );
			if ( display === "none" ) {
				if ( restoreDisplay ) {
					display = restoreDisplay;
				} else {

					// Get nonempty value(s) by temporarily forcing visibility
					showHide( [ elem ], true );
					restoreDisplay = elem.style.display || restoreDisplay;
					display = jQuery.css( elem, "display" );
					showHide( [ elem ] );
				}
			}

			// Animate inline elements as inline-block
			if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
				if ( jQuery.css( elem, "float" ) === "none" ) {

					// Restore the original display value at the end of pure show/hide animations
					if ( !propTween ) {
						anim.done( function() {
							style.display = restoreDisplay;
						} );
						if ( restoreDisplay == null ) {
							display = style.display;
							restoreDisplay = display === "none" ? "" : display;
						}
					}
					style.display = "inline-block";
				}
			}
		}

		if ( opts.overflow ) {
			style.overflow = "hidden";
			anim.always( function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			} );
		}

		// Implement show/hide animations
		propTween = false;
		for ( prop in orig ) {

			// General show/hide setup for this element animation
			if ( !propTween ) {
				if ( dataShow ) {
					if ( "hidden" in dataShow ) {
						hidden = dataShow.hidden;
					}
				} else {
					dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
				}

				// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
				if ( toggle ) {
					dataShow.hidden = !hidden;
				}

				// Show elements before animating them
				if ( hidden ) {
					showHide( [ elem ], true );
				}

				/* eslint-disable no-loop-func */

				anim.done( function() {

				/* eslint-enable no-loop-func */

					// The final step of a "hide" animation is actually hiding the element
					if ( !hidden ) {
						showHide( [ elem ] );
					}
					dataPriv.remove( elem, "fxshow" );
					for ( prop in orig ) {
						jQuery.style( elem, prop, orig[ prop ] );
					}
				} );
			}

			// Per-property setup
			propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = propTween.start;
				if ( hidden ) {
					propTween.end = propTween.start;
					propTween.start = 0;
				}
			}
		}
	}

	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;

		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = jQuery.camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( Array.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}

			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}

			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];

				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}

	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = Animation.prefilters.length,
			deferred = jQuery.Deferred().always( function() {

				// Don't match elem in the :animated selector
				delete tick.elem;
			} ),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

					// Support: Android 2.3 only
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;

				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( percent );
				}

				deferred.notifyWith( elem, [ animation, percent, remaining ] );

				// If there's more to do, yield
				if ( percent < 1 && length ) {
					return remaining;
				}

				// If this was an empty animation, synthesize a final progress notification
				if ( !length ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
				}

				// Resolve the animation and report its conclusion
				deferred.resolveWith( elem, [ animation ] );
				return false;
			},
			animation = deferred.promise( {
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,

						// If we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length; index++ ) {
						animation.tweens[ index ].run( 1 );
					}

					// Resolve when we played the last frame; otherwise, reject
					if ( gotoEnd ) {
						deferred.notifyWith( elem, [ animation, 1, 0 ] );
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			} ),
			props = animation.props;

		propFilter( props, animation.opts.specialEasing );

		for ( ; index < length; index++ ) {
			result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				if ( jQuery.isFunction( result.stop ) ) {
					jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
						jQuery.proxy( result.stop, result );
				}
				return result;
			}
		}

		jQuery.map( props, createTween, animation );

		if ( jQuery.isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}

		// Attach callbacks from options
		animation
			.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );

		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			} )
		);

		return animation;
	}

	jQuery.Animation = jQuery.extend( Animation, {

		tweeners: {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value );
				adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
				return tween;
			} ]
		},

		tweener: function( props, callback ) {
			if ( jQuery.isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.match( rnothtmlwhite );
			}

			var prop,
				index = 0,
				length = props.length;

			for ( ; index < length; index++ ) {
				prop = props[ index ];
				Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
				Animation.tweeners[ prop ].unshift( callback );
			}
		},

		prefilters: [ defaultPrefilter ],

		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				Animation.prefilters.unshift( callback );
			} else {
				Animation.prefilters.push( callback );
			}
		}
	} );

	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};

		// Go to the end state if fx are off
		if ( jQuery.fx.off ) {
			opt.duration = 0;

		} else {
			if ( typeof opt.duration !== "number" ) {
				if ( opt.duration in jQuery.fx.speeds ) {
					opt.duration = jQuery.fx.speeds[ opt.duration ];

				} else {
					opt.duration = jQuery.fx.speeds._default;
				}
			}
		}

		// Normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function() {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}

			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};

		return opt;
	};

	jQuery.fn.extend( {
		fadeTo: function( speed, to, easing, callback ) {

			// Show any hidden elements after setting opacity to 0
			return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

				// Animate to the value specified
				.end().animate( { opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {

					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );

					// Empty animations, or finishing resolves immediately
					if ( empty || dataPriv.get( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;

			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};

			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}

			return this.each( function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = dataPriv.get( this );

				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}

				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this &&
						( type == null || timers[ index ].queue === type ) ) {

						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}

				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			} );
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each( function() {
				var index,
					data = dataPriv.get( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;

				// Enable finishing flag on private data
				data.finish = true;

				// Empty the queue first
				jQuery.queue( this, type, [] );

				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}

				// Look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}

				// Look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}

				// Turn off finishing flag
				delete data.finish;
			} );
		}
	} );

	jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	} );

	// Generate shortcuts for custom animations
	jQuery.each( {
		slideDown: genFx( "show" ),
		slideUp: genFx( "hide" ),
		slideToggle: genFx( "toggle" ),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	} );

	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			i = 0,
			timers = jQuery.timers;

		fxNow = jQuery.now();

		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];

			// Run the timer and safely remove it when done (allowing for external removal)
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}

		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};

	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		jQuery.fx.start();
	};

	jQuery.fx.interval = 13;
	jQuery.fx.start = function() {
		if ( inProgress ) {
			return;
		}

		inProgress = true;
		schedule();
	};

	jQuery.fx.stop = function() {
		inProgress = null;
	};

	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,

		// Default speed
		_default: 400
	};


	// Based off of the plugin by Clint Helfers, with permission.
	// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = window.setTimeout( next, time );
			hooks.stop = function() {
				window.clearTimeout( timeout );
			};
		} );
	};


	( function() {
		var input = document.createElement( "input" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );

		input.type = "checkbox";

		// Support: Android <=4.3 only
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";

		// Support: IE <=11 only
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;

		// Support: IE <=11 only
		// An input loses its value after becoming a radio
		input = document.createElement( "input" );
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	} )();


	var boolHook,
		attrHandle = jQuery.expr.attrHandle;

	jQuery.fn.extend( {
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},

		removeAttr: function( name ) {
			return this.each( function() {
				jQuery.removeAttr( this, name );
			} );
		}
	} );

	jQuery.extend( {
		attr: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set attributes on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === "undefined" ) {
				return jQuery.prop( elem, name, value );
			}

			// Attribute hooks are determined by the lowercase version
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
			}

			if ( value !== undefined ) {
				if ( value === null ) {
					jQuery.removeAttr( elem, name );
					return;
				}

				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				elem.setAttribute( name, value + "" );
				return value;
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},

		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						nodeName( elem, "input" ) ) {
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},

		removeAttr: function( elem, value ) {
			var name,
				i = 0,

				// Attribute names can contain non-HTML whitespace characters
				// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
				attrNames = value && value.match( rnothtmlwhite );

			if ( attrNames && elem.nodeType === 1 ) {
				while ( ( name = attrNames[ i++ ] ) ) {
					elem.removeAttribute( name );
				}
			}
		}
	} );

	// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {

				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else {
				elem.setAttribute( name, name );
			}
			return name;
		}
	};

	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;

		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle,
				lowercaseName = name.toLowerCase();

			if ( !isXML ) {

				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ lowercaseName ];
				attrHandle[ lowercaseName ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					lowercaseName :
					null;
				attrHandle[ lowercaseName ] = handle;
			}
			return ret;
		};
	} );




	var rfocusable = /^(?:input|select|textarea|button)$/i,
		rclickable = /^(?:a|area)$/i;

	jQuery.fn.extend( {
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},

		removeProp: function( name ) {
			return this.each( function() {
				delete this[ jQuery.propFix[ name ] || name ];
			} );
		}
	} );

	jQuery.extend( {
		prop: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set properties on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}

			if ( value !== undefined ) {
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				return ( elem[ name ] = value );
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			return elem[ name ];
		},

		propHooks: {
			tabIndex: {
				get: function( elem ) {

					// Support: IE <=9 - 11 only
					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr( elem, "tabindex" );

					if ( tabindex ) {
						return parseInt( tabindex, 10 );
					}

					if (
						rfocusable.test( elem.nodeName ) ||
						rclickable.test( elem.nodeName ) &&
						elem.href
					) {
						return 0;
					}

					return -1;
				}
			}
		},

		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	} );

	// Support: IE <=11 only
	// Accessing the selectedIndex property
	// forces the browser to respect setting selected
	// on the option
	// The getter ensures a default option is selected
	// when in an optgroup
	// eslint rule "no-unused-expressions" is disabled for this code
	// since it considers such accessions noop
	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {

				/* eslint no-unused-expressions: "off" */

				var parent = elem.parentNode;
				if ( parent && parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
				return null;
			},
			set: function( elem ) {

				/* eslint no-unused-expressions: "off" */

				var parent = elem.parentNode;
				if ( parent ) {
					parent.selectedIndex;

					if ( parent.parentNode ) {
						parent.parentNode.selectedIndex;
					}
				}
			}
		};
	}

	jQuery.each( [
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	} );




		// Strip and collapse whitespace according to HTML spec
		// https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace
		function stripAndCollapse( value ) {
			var tokens = value.match( rnothtmlwhite ) || [];
			return tokens.join( " " );
		}


	function getClass( elem ) {
		return elem.getAttribute && elem.getAttribute( "class" ) || "";
	}

	jQuery.fn.extend( {
		addClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			if ( typeof value === "string" && value ) {
				classes = value.match( rnothtmlwhite ) || [];

				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
					cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		removeClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			if ( !arguments.length ) {
				return this.attr( "class", "" );
			}

			if ( typeof value === "string" && value ) {
				classes = value.match( rnothtmlwhite ) || [];

				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );

					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {

							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		toggleClass: function( value, stateVal ) {
			var type = typeof value;

			if ( typeof stateVal === "boolean" && type === "string" ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( i ) {
					jQuery( this ).toggleClass(
						value.call( this, i, getClass( this ), stateVal ),
						stateVal
					);
				} );
			}

			return this.each( function() {
				var className, i, self, classNames;

				if ( type === "string" ) {

					// Toggle individual class names
					i = 0;
					self = jQuery( this );
					classNames = value.match( rnothtmlwhite ) || [];

					while ( ( className = classNames[ i++ ] ) ) {

						// Check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}

				// Toggle whole class name
				} else if ( value === undefined || type === "boolean" ) {
					className = getClass( this );
					if ( className ) {

						// Store className if set
						dataPriv.set( this, "__className__", className );
					}

					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if ( this.setAttribute ) {
						this.setAttribute( "class",
							className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
						);
					}
				}
			} );
		},

		hasClass: function( selector ) {
			var className, elem,
				i = 0;

			className = " " + selector + " ";
			while ( ( elem = this[ i++ ] ) ) {
				if ( elem.nodeType === 1 &&
					( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
						return true;
				}
			}

			return false;
		}
	} );




	var rreturn = /\r/g;

	jQuery.fn.extend( {
		val: function( value ) {
			var hooks, ret, isFunction,
				elem = this[ 0 ];

			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] ||
						jQuery.valHooks[ elem.nodeName.toLowerCase() ];

					if ( hooks &&
						"get" in hooks &&
						( ret = hooks.get( elem, "value" ) ) !== undefined
					) {
						return ret;
					}

					ret = elem.value;

					// Handle most common string cases
					if ( typeof ret === "string" ) {
						return ret.replace( rreturn, "" );
					}

					// Handle cases where value is null/undef or number
					return ret == null ? "" : ret;
				}

				return;
			}

			isFunction = jQuery.isFunction( value );

			return this.each( function( i ) {
				var val;

				if ( this.nodeType !== 1 ) {
					return;
				}

				if ( isFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}

				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";

				} else if ( typeof val === "number" ) {
					val += "";

				} else if ( Array.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					} );
				}

				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

				// If set returns undefined, fall back to normal setting
				if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			} );
		}
	} );

	jQuery.extend( {
		valHooks: {
			option: {
				get: function( elem ) {

					var val = jQuery.find.attr( elem, "value" );
					return val != null ?
						val :

						// Support: IE <=10 - 11 only
						// option.text throws exceptions (#14686, #14858)
						// Strip and collapse whitespace
						// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
						stripAndCollapse( jQuery.text( elem ) );
				}
			},
			select: {
				get: function( elem ) {
					var value, option, i,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one",
						values = one ? null : [],
						max = one ? index + 1 : options.length;

					if ( index < 0 ) {
						i = max;

					} else {
						i = one ? index : 0;
					}

					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];

						// Support: IE <=9 only
						// IE8-9 doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&

								// Don't return options that are disabled or in a disabled optgroup
								!option.disabled &&
								( !option.parentNode.disabled ||
									!nodeName( option.parentNode, "optgroup" ) ) ) {

							// Get the specific value for the option
							value = jQuery( option ).val();

							// We don't need an array for one selects
							if ( one ) {
								return value;
							}

							// Multi-Selects return an array
							values.push( value );
						}
					}

					return values;
				},

				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;

					while ( i-- ) {
						option = options[ i ];

						/* eslint-disable no-cond-assign */

						if ( option.selected =
							jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
						) {
							optionSet = true;
						}

						/* eslint-enable no-cond-assign */
					}

					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	} );

	// Radios and checkboxes getter/setter
	jQuery.each( [ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( Array.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				return elem.getAttribute( "value" ) === null ? "on" : elem.value;
			};
		}
	} );




	// Return jQuery for attributes-only inclusion


	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

	jQuery.extend( jQuery.event, {

		trigger: function( event, data, elem, onlyHandlers ) {

			var i, cur, tmp, bubbleType, ontype, handle, special,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

			cur = tmp = elem = elem || document;

			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}

			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}

			if ( type.indexOf( "." ) > -1 ) {

				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split( "." );
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf( ":" ) < 0 && "on" + type;

			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );

			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join( "." );
			event.rnamespace = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
				null;

			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}

			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );

			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}

			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}

				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === ( elem.ownerDocument || document ) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}

			// Fire handlers on the event path
			i = 0;
			while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;

				// jQuery handler
				handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
					dataPriv.get( cur, "handle" );
				if ( handle ) {
					handle.apply( cur, data );
				}

				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;

			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {

				if ( ( !special._default ||
					special._default.apply( eventPath.pop(), data ) === false ) &&
					acceptData( elem ) ) {

					// Call a native DOM method on the target with the same name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];

						if ( tmp ) {
							elem[ ontype ] = null;
						}

						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						elem[ type ]();
						jQuery.event.triggered = undefined;

						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}

			return event.result;
		},

		// Piggyback on a donor event to simulate a different one
		// Used only for `focus(in | out)` events
		simulate: function( type, elem, event ) {
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true
				}
			);

			jQuery.event.trigger( e, null, elem );
		}

	} );

	jQuery.fn.extend( {

		trigger: function( type, data ) {
			return this.each( function() {
				jQuery.event.trigger( type, data, this );
			} );
		},
		triggerHandler: function( type, data ) {
			var elem = this[ 0 ];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	} );


	jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup contextmenu" ).split( " " ),
		function( i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );

	jQuery.fn.extend( {
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		}
	} );




	support.focusin = "onfocusin" in window;


	// Support: Firefox <=44
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
	if ( !support.focusin ) {
		jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
			};

			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix );

					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix ) - 1;

					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						dataPriv.remove( doc, fix );

					} else {
						dataPriv.access( doc, fix, attaches );
					}
				}
			};
		} );
	}
	var location = window.location;

	var nonce = jQuery.now();

	var rquery = ( /\?/ );



	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml;
		if ( !data || typeof data !== "string" ) {
			return null;
		}

		// Support: IE 9 - 11 only
		// IE throws on parseFromString with invalid input.
		try {
			xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
		} catch ( e ) {
			xml = undefined;
		}

		if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};


	var
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;

	function buildParams( prefix, obj, traditional, add ) {
		var name;

		if ( Array.isArray( obj ) ) {

			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {

					// Treat each array item as a scalar.
					add( prefix, v );

				} else {

					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(
						prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
						v,
						traditional,
						add
					);
				}
			} );

		} else if ( !traditional && jQuery.type( obj ) === "object" ) {

			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}

		} else {

			// Serialize scalar item.
			add( prefix, obj );
		}
	}

	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, valueOrFunction ) {

				// If value is a function, invoke it and use its return value
				var value = jQuery.isFunction( valueOrFunction ) ?
					valueOrFunction() :
					valueOrFunction;

				s[ s.length ] = encodeURIComponent( key ) + "=" +
					encodeURIComponent( value == null ? "" : value );
			};

		// If an array was passed in, assume that it is an array of form elements.
		if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			} );

		} else {

			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}

		// Return the resulting serialization
		return s.join( "&" );
	};

	jQuery.fn.extend( {
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map( function() {

				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			} )
			.filter( function() {
				var type = this.type;

				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			} )
			.map( function( i, elem ) {
				var val = jQuery( this ).val();

				if ( val == null ) {
					return null;
				}

				if ( Array.isArray( val ) ) {
					return jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					} );
				}

				return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			} ).get();
		}
	} );


	var
		r20 = /%20/g,
		rhash = /#.*$/,
		rantiCache = /([?&])_=[^&]*/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,

		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},

		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},

		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat( "*" ),

		// Anchor tag for parsing the document origin
		originAnchor = document.createElement( "a" );
		originAnchor.href = location.href;

	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {

		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {

			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}

			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

			if ( jQuery.isFunction( func ) ) {

				// For each dataType in the dataTypeExpression
				while ( ( dataType = dataTypes[ i++ ] ) ) {

					// Prepend if requested
					if ( dataType[ 0 ] === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

					// Otherwise append
					} else {
						( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
					}
				}
			}
		};
	}

	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

		var inspected = {},
			seekingTransport = ( structure === transports );

		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" &&
					!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			} );
			return selected;
		}

		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}

	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var key, deep,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};

		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}

		return target;
	}

	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {

		var ct, type, finalDataType, firstDataType,
			contents = s.contents,
			dataTypes = s.dataTypes;

		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
			}
		}

		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}

		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {

			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}

			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}

		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}

	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},

			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();

		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}

		current = dataTypes.shift();

		// Convert to each sequential dataType
		while ( current ) {

			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}

			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}

			prev = current;
			current = dataTypes.shift();

			if ( current ) {

				// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {

					current = prev;

				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {

					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];

					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {

							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {

								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {

									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];

									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}

					// Apply converter (if not an equivalence)
					if ( conv !== true ) {

						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s.throws ) {
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}

		return { state: "success", data: response };
	}

	jQuery.extend( {

		// Counter for holding the number of active queries
		active: 0,

		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},

		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test( location.protocol ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",

			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/

			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},

			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},

			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},

			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {

				// Convert anything to text
				"* text": String,

				// Text to html (true = no transformation)
				"text html": true,

				// Evaluate text as a json expression
				"text json": JSON.parse,

				// Parse text as xml
				"text xml": jQuery.parseXML
			},

			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},

		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?

				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},

		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),

		// Main method
		ajax: function( url, options ) {

			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}

			// Force options to be an object
			options = options || {};

			var transport,

				// URL without anti-cache param
				cacheURL,

				// Response headers
				responseHeadersString,
				responseHeaders,

				// timeout handle
				timeoutTimer,

				// Url cleanup var
				urlAnchor,

				// Request state (becomes false upon send and true upon completion)
				completed,

				// To know if global events are to be dispatched
				fireGlobals,

				// Loop variable
				i,

				// uncached part of the url
				uncached,

				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),

				// Callbacks context
				callbackContext = s.context || s,

				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context &&
					( callbackContext.nodeType || callbackContext.jquery ) ?
						jQuery( callbackContext ) :
						jQuery.event,

				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks( "once memory" ),

				// Status-dependent callbacks
				statusCode = s.statusCode || {},

				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},

				// Default abort message
				strAbort = "canceled",

				// Fake xhr
				jqXHR = {
					readyState: 0,

					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( completed ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
									responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
								}
							}
							match = responseHeaders[ key.toLowerCase() ];
						}
						return match == null ? null : match;
					},

					// Raw string
					getAllResponseHeaders: function() {
						return completed ? responseHeadersString : null;
					},

					// Caches the header
					setRequestHeader: function( name, value ) {
						if ( completed == null ) {
							name = requestHeadersNames[ name.toLowerCase() ] =
								requestHeadersNames[ name.toLowerCase() ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},

					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( completed == null ) {
							s.mimeType = type;
						}
						return this;
					},

					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( completed ) {

								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							} else {

								// Lazy-add the new callbacks in a way that preserves old ones
								for ( code in map ) {
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							}
						}
						return this;
					},

					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};

			// Attach deferreds
			deferred.promise( jqXHR );

			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || location.href ) + "" )
				.replace( rprotocol, location.protocol + "//" );

			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;

			// Extract dataTypes list
			s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

			// A cross-domain request is in order when the origin doesn't match the current origin.
			if ( s.crossDomain == null ) {
				urlAnchor = document.createElement( "a" );

				// Support: IE <=8 - 11, Edge 12 - 13
				// IE throws exception on accessing the href property if url is malformed,
				// e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;

					// Support: IE <=8 - 11 only
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
						urlAnchor.protocol + "//" + urlAnchor.host;
				} catch ( e ) {

					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}

			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}

			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

			// If request was aborted inside a prefilter, stop there
			if ( completed ) {
				return jqXHR;
			}

			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;

			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger( "ajaxStart" );
			}

			// Uppercase the type
			s.type = s.type.toUpperCase();

			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );

			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			// Remove hash to simplify url manipulation
			cacheURL = s.url.replace( rhash, "" );

			// More options handling for requests with no content
			if ( !s.hasContent ) {

				// Remember the hash so we can put it back
				uncached = s.url.slice( cacheURL.length );

				// If data is available, append data to url
				if ( s.data ) {
					cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}

				// Add or update anti-cache param if needed
				if ( s.cache === false ) {
					cacheURL = cacheURL.replace( rantiCache, "$1" );
					uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
				}

				// Put hash and anti-cache on the URL that will be requested (gh-1732)
				s.url = cacheURL + uncached;

			// Change '%20' to '+' if this is encoded form body content (gh-2658)
			} else if ( s.data && s.processData &&
				( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
				s.data = s.data.replace( r20, "+" );
			}

			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}

			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}

			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
					s.accepts[ s.dataTypes[ 0 ] ] +
						( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);

			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}

			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend &&
				( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

				// Abort if not done already and return
				return jqXHR.abort();
			}

			// Aborting is no longer a cancellation
			strAbort = "abort";

			// Install callbacks on deferreds
			completeDeferred.add( s.complete );
			jqXHR.done( s.success );
			jqXHR.fail( s.error );

			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;

				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}

				// If request was aborted inside ajaxSend, stop there
				if ( completed ) {
					return jqXHR;
				}

				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = window.setTimeout( function() {
						jqXHR.abort( "timeout" );
					}, s.timeout );
				}

				try {
					completed = false;
					transport.send( requestHeaders, done );
				} catch ( e ) {

					// Rethrow post-completion exceptions
					if ( completed ) {
						throw e;
					}

					// Propagate others as results
					done( -1, e );
				}
			}

			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;

				// Ignore repeat invocations
				if ( completed ) {
					return;
				}

				completed = true;

				// Clear timeout if it exists
				if ( timeoutTimer ) {
					window.clearTimeout( timeoutTimer );
				}

				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;

				// Cache response headers
				responseHeadersString = headers || "";

				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;

				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;

				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}

				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );

				// If successful, handle type chaining
				if ( isSuccess ) {

					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader( "Last-Modified" );
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader( "etag" );
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}

					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";

					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";

					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {

					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}

				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";

				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}

				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;

				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}

				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger( "ajaxStop" );
					}
				}
			}

			return jqXHR;
		},

		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},

		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	} );

	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {

			// Shift arguments if data argument was omitted
			if ( jQuery.isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}

			// The url can be an options object (which then must have .url)
			return jQuery.ajax( jQuery.extend( {
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject( url ) && url ) );
		};
	} );


	jQuery._evalUrl = function( url ) {
		return jQuery.ajax( {
			url: url,

			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			cache: true,
			async: false,
			global: false,
			"throws": true
		} );
	};


	jQuery.fn.extend( {
		wrapAll: function( html ) {
			var wrap;

			if ( this[ 0 ] ) {
				if ( jQuery.isFunction( html ) ) {
					html = html.call( this[ 0 ] );
				}

				// The elements to wrap the target around
				wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}

				wrap.map( function() {
					var elem = this;

					while ( elem.firstElementChild ) {
						elem = elem.firstElementChild;
					}

					return elem;
				} ).append( this );
			}

			return this;
		},

		wrapInner: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapInner( html.call( this, i ) );
				} );
			}

			return this.each( function() {
				var self = jQuery( this ),
					contents = self.contents();

				if ( contents.length ) {
					contents.wrapAll( html );

				} else {
					self.append( html );
				}
			} );
		},

		wrap: function( html ) {
			var isFunction = jQuery.isFunction( html );

			return this.each( function( i ) {
				jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
			} );
		},

		unwrap: function( selector ) {
			this.parent( selector ).not( "body" ).each( function() {
				jQuery( this ).replaceWith( this.childNodes );
			} );
			return this;
		}
	} );


	jQuery.expr.pseudos.hidden = function( elem ) {
		return !jQuery.expr.pseudos.visible( elem );
	};
	jQuery.expr.pseudos.visible = function( elem ) {
		return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
	};




	jQuery.ajaxSettings.xhr = function() {
		try {
			return new window.XMLHttpRequest();
		} catch ( e ) {}
	};

	var xhrSuccessStatus = {

			// File protocol always yields status code 0, assume 200
			0: 200,

			// Support: IE <=9 only
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		xhrSupported = jQuery.ajaxSettings.xhr();

	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	support.ajax = xhrSupported = !!xhrSupported;

	jQuery.ajaxTransport( function( options ) {
		var callback, errorCallback;

		// Cross domain only allowed if supported through XMLHttpRequest
		if ( support.cors || xhrSupported && !options.crossDomain ) {
			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr();

					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);

					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}

					// Set headers
					for ( i in headers ) {
						xhr.setRequestHeader( i, headers[ i ] );
					}

					// Callback
					callback = function( type ) {
						return function() {
							if ( callback ) {
								callback = errorCallback = xhr.onload =
									xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

								if ( type === "abort" ) {
									xhr.abort();
								} else if ( type === "error" ) {

									// Support: IE <=9 only
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if ( typeof xhr.status !== "number" ) {
										complete( 0, "error" );
									} else {
										complete(

											// File: protocol always yields status 0; see #8605, #14207
											xhr.status,
											xhr.statusText
										);
									}
								} else {
									complete(
										xhrSuccessStatus[ xhr.status ] || xhr.status,
										xhr.statusText,

										// Support: IE <=9 only
										// IE9 has no XHR2 but throws on binary (trac-11426)
										// For XHR2 non-text, let the caller handle it (gh-2498)
										( xhr.responseType || "text" ) !== "text"  ||
										typeof xhr.responseText !== "string" ?
											{ binary: xhr.response } :
											{ text: xhr.responseText },
										xhr.getAllResponseHeaders()
									);
								}
							}
						};
					};

					// Listen to events
					xhr.onload = callback();
					errorCallback = xhr.onerror = callback( "error" );

					// Support: IE 9 only
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if ( xhr.onabort !== undefined ) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function() {

							// Check readyState before timeout as it changes
							if ( xhr.readyState === 4 ) {

								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout( function() {
									if ( callback ) {
										errorCallback();
									}
								} );
							}
						};
					}

					// Create the abort callback
					callback = callback( "abort" );

					try {

						// Do send the request (this may raise an exception)
						xhr.send( options.hasContent && options.data || null );
					} catch ( e ) {

						// #14683: Only rethrow if this hasn't been notified as an error yet
						if ( callback ) {
							throw e;
						}
					}
				},

				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




	// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
	jQuery.ajaxPrefilter( function( s ) {
		if ( s.crossDomain ) {
			s.contents.script = false;
		}
	} );

	// Install script dataType
	jQuery.ajaxSetup( {
		accepts: {
			script: "text/javascript, application/javascript, " +
				"application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	} );

	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
		}
	} );

	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {

		// This transport only deals with cross domain requests
		if ( s.crossDomain ) {
			var script, callback;
			return {
				send: function( _, complete ) {
					script = jQuery( "<script>" ).prop( {
						charset: s.scriptCharset,
						src: s.url
					} ).on(
						"load error",
						callback = function( evt ) {
							script.remove();
							callback = null;
							if ( evt ) {
								complete( evt.type === "error" ? 404 : 200, evt.type );
							}
						}
					);

					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild( script[ 0 ] );
				},
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;

	// Default jsonp settings
	jQuery.ajaxSetup( {
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	} );

	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" &&
					( s.contentType || "" )
						.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
					rjsonp.test( s.data ) && "data"
			);

		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;

			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}

			// Use data converter to retrieve json after script execution
			s.converters[ "script json" ] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};

			// Force json dataType
			s.dataTypes[ 0 ] = "json";

			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};

			// Clean-up function (fires after converters)
			jqXHR.always( function() {

				// If previous value didn't exist - remove it
				if ( overwritten === undefined ) {
					jQuery( window ).removeProp( callbackName );

				// Otherwise restore preexisting value
				} else {
					window[ callbackName ] = overwritten;
				}

				// Save back as free
				if ( s[ callbackName ] ) {

					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;

					// Save the callback name for future use
					oldCallbacks.push( callbackName );
				}

				// Call if it was a function and we have a response
				if ( responseContainer && jQuery.isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}

				responseContainer = overwritten = undefined;
			} );

			// Delegate to script
			return "script";
		}
	} );




	// Support: Safari 8 only
	// In Safari 8 documents created via document.implementation.createHTMLDocument
	// collapse sibling forms: the second one becomes a child of the first one.
	// Because of that, this security measure has to be disabled in Safari 8.
	// https://bugs.webkit.org/show_bug.cgi?id=137337
	support.createHTMLDocument = ( function() {
		var body = document.implementation.createHTMLDocument( "" ).body;
		body.innerHTML = "<form></form><form></form>";
		return body.childNodes.length === 2;
	} )();


	// Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( typeof data !== "string" ) {
			return [];
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}

		var base, parsed, scripts;

		if ( !context ) {

			// Stop scripts or inline event handlers from being executed immediately
			// by using document.implementation
			if ( support.createHTMLDocument ) {
				context = document.implementation.createHTMLDocument( "" );

				// Set the base href for the created document
				// so any parsed elements with URLs
				// are based on the document's URL (gh-2965)
				base = context.createElement( "base" );
				base.href = document.location.href;
				context.head.appendChild( base );
			} else {
				context = document;
			}
		}

		parsed = rsingleTag.exec( data );
		scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[ 1 ] ) ];
		}

		parsed = buildFragment( [ data ], context, scripts );

		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}

		return jQuery.merge( [], parsed.childNodes );
	};


	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		var selector, type, response,
			self = this,
			off = url.indexOf( " " );

		if ( off > -1 ) {
			selector = stripAndCollapse( url.slice( off ) );
			url = url.slice( 0, off );
		}

		// If it's a function
		if ( jQuery.isFunction( params ) ) {

			// We assume that it's the callback
			callback = params;
			params = undefined;

		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}

		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax( {
				url: url,

				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			} ).done( function( responseText ) {

				// Save response for use in complete callback
				response = arguments;

				self.html( selector ?

					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

					// Otherwise use the full result
					responseText );

			// If the request succeeds, this function gets "data", "status", "jqXHR"
			// but they are ignored because response was set above.
			// If it fails, this function gets "jqXHR", "status", "error"
			} ).always( callback && function( jqXHR, status ) {
				self.each( function() {
					callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
				} );
			} );
		}

		return this;
	};




	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [
		"ajaxStart",
		"ajaxStop",
		"ajaxComplete",
		"ajaxError",
		"ajaxSuccess",
		"ajaxSend"
	], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	} );




	jQuery.expr.pseudos.animated = function( elem ) {
		return jQuery.grep( jQuery.timers, function( fn ) {
			return elem === fn.elem;
		} ).length;
	};




	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};

			// Set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}

			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;

			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}

			if ( jQuery.isFunction( options ) ) {

				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
			}

			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}

			if ( "using" in options ) {
				options.using.call( elem, props );

			} else {
				curElem.css( props );
			}
		}
	};

	jQuery.fn.extend( {
		offset: function( options ) {

			// Preserve chaining for setter
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each( function( i ) {
						jQuery.offset.setOffset( this, options, i );
					} );
			}

			var doc, docElem, rect, win,
				elem = this[ 0 ];

			if ( !elem ) {
				return;
			}

			// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
			// Support: IE <=11 only
			// Running getBoundingClientRect on a
			// disconnected node in IE throws an error
			if ( !elem.getClientRects().length ) {
				return { top: 0, left: 0 };
			}

			rect = elem.getBoundingClientRect();

			doc = elem.ownerDocument;
			docElem = doc.documentElement;
			win = doc.defaultView;

			return {
				top: rect.top + win.pageYOffset - docElem.clientTop,
				left: rect.left + win.pageXOffset - docElem.clientLeft
			};
		},

		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}

			var offsetParent, offset,
				elem = this[ 0 ],
				parentOffset = { top: 0, left: 0 };

			// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
			// because it is its only offset parent
			if ( jQuery.css( elem, "position" ) === "fixed" ) {

				// Assume getBoundingClientRect is there when computed position is fixed
				offset = elem.getBoundingClientRect();

			} else {

				// Get *real* offsetParent
				offsetParent = this.offsetParent();

				// Get correct offsets
				offset = this.offset();
				if ( !nodeName( offsetParent[ 0 ], "html" ) ) {
					parentOffset = offsetParent.offset();
				}

				// Add offsetParent borders
				parentOffset = {
					top: parentOffset.top + jQuery.css( offsetParent[ 0 ], "borderTopWidth", true ),
					left: parentOffset.left + jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true )
				};
			}

			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},

		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function() {
			return this.map( function() {
				var offsetParent = this.offsetParent;

				while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
					offsetParent = offsetParent.offsetParent;
				}

				return offsetParent || documentElement;
			} );
		}
	} );

	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = "pageYOffset" === prop;

		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {

				// Coalesce documents and windows
				var win;
				if ( jQuery.isWindow( elem ) ) {
					win = elem;
				} else if ( elem.nodeType === 9 ) {
					win = elem.defaultView;
				}

				if ( val === undefined ) {
					return win ? win[ prop ] : elem[ method ];
				}

				if ( win ) {
					win.scrollTo(
						!top ? val : win.pageXOffset,
						top ? val : win.pageYOffset
					);

				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length );
		};
	} );

	// Support: Safari <=7 - 9.1, Chrome <=37 - 49
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );

					// If curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	} );


	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
			function( defaultExtra, funcName ) {

			// Margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

				return access( this, function( elem, type, value ) {
					var doc;

					if ( jQuery.isWindow( elem ) ) {

						// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
						return funcName.indexOf( "outer" ) === 0 ?
							elem[ "inner" + name ] :
							elem.document.documentElement[ "client" + name ];
					}

					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;

						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}

					return value === undefined ?

						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :

						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable );
			};
		} );
	} );


	jQuery.fn.extend( {

		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},

		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {

			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ?
				this.off( selector, "**" ) :
				this.off( types, selector || "**", fn );
		}
	} );

	jQuery.holdReady = function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	};
	jQuery.isArray = Array.isArray;
	jQuery.parseJSON = JSON.parse;
	jQuery.nodeName = nodeName;




	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.

	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}




	var

		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,

		// Map over the $ in case of overwrite
		_$ = window.$;

	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	};

	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( !noGlobal ) {
		window.jQuery = window.$ = jQuery;
	}




	return jQuery;
	} );


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	!function ($) {

	  "use strict";

	  var FOUNDATION_VERSION = '6.3.1';

	  // Global Foundation object
	  // This is attached to the window, or used as a module for AMD/Browserify
	  var Foundation = {
	    version: FOUNDATION_VERSION,

	    /**
	     * Stores initialized plugins.
	     */
	    _plugins: {},

	    /**
	     * Stores generated unique ids for plugin instances
	     */
	    _uuids: [],

	    /**
	     * Returns a boolean for RTL support
	     */
	    rtl: function rtl() {
	      return $('html').attr('dir') === 'rtl';
	    },
	    /**
	     * Defines a Foundation plugin, adding it to the `Foundation` namespace and the list of plugins to initialize when reflowing.
	     * @param {Object} plugin - The constructor of the plugin.
	     */
	    plugin: function plugin(_plugin, name) {
	      // Object key to use when adding to global Foundation object
	      // Examples: Foundation.Reveal, Foundation.OffCanvas
	      var className = name || functionName(_plugin);
	      // Object key to use when storing the plugin, also used to create the identifying data attribute for the plugin
	      // Examples: data-reveal, data-off-canvas
	      var attrName = hyphenate(className);

	      // Add to the Foundation object and the plugins list (for reflowing)
	      this._plugins[attrName] = this[className] = _plugin;
	    },
	    /**
	     * @function
	     * Populates the _uuids array with pointers to each individual plugin instance.
	     * Adds the `zfPlugin` data-attribute to programmatically created plugins to allow use of $(selector).foundation(method) calls.
	     * Also fires the initialization event for each plugin, consolidating repetitive code.
	     * @param {Object} plugin - an instance of a plugin, usually `this` in context.
	     * @param {String} name - the name of the plugin, passed as a camelCased string.
	     * @fires Plugin#init
	     */
	    registerPlugin: function registerPlugin(plugin, name) {
	      var pluginName = name ? hyphenate(name) : functionName(plugin.constructor).toLowerCase();
	      plugin.uuid = this.GetYoDigits(6, pluginName);

	      if (!plugin.$element.attr('data-' + pluginName)) {
	        plugin.$element.attr('data-' + pluginName, plugin.uuid);
	      }
	      if (!plugin.$element.data('zfPlugin')) {
	        plugin.$element.data('zfPlugin', plugin);
	      }
	      /**
	       * Fires when the plugin has initialized.
	       * @event Plugin#init
	       */
	      plugin.$element.trigger('init.zf.' + pluginName);

	      this._uuids.push(plugin.uuid);

	      return;
	    },
	    /**
	     * @function
	     * Removes the plugins uuid from the _uuids array.
	     * Removes the zfPlugin data attribute, as well as the data-plugin-name attribute.
	     * Also fires the destroyed event for the plugin, consolidating repetitive code.
	     * @param {Object} plugin - an instance of a plugin, usually `this` in context.
	     * @fires Plugin#destroyed
	     */
	    unregisterPlugin: function unregisterPlugin(plugin) {
	      var pluginName = hyphenate(functionName(plugin.$element.data('zfPlugin').constructor));

	      this._uuids.splice(this._uuids.indexOf(plugin.uuid), 1);
	      plugin.$element.removeAttr('data-' + pluginName).removeData('zfPlugin')
	      /**
	       * Fires when the plugin has been destroyed.
	       * @event Plugin#destroyed
	       */
	      .trigger('destroyed.zf.' + pluginName);
	      for (var prop in plugin) {
	        plugin[prop] = null; //clean up script to prep for garbage collection.
	      }
	      return;
	    },

	    /**
	     * @function
	     * Causes one or more active plugins to re-initialize, resetting event listeners, recalculating positions, etc.
	     * @param {String} plugins - optional string of an individual plugin key, attained by calling `$(element).data('pluginName')`, or string of a plugin class i.e. `'dropdown'`
	     * @default If no argument is passed, reflow all currently active plugins.
	     */
	    reInit: function reInit(plugins) {
	      var isJQ = plugins instanceof $;
	      try {
	        if (isJQ) {
	          plugins.each(function () {
	            $(this).data('zfPlugin')._init();
	          });
	        } else {
	          var type = typeof plugins === 'undefined' ? 'undefined' : _typeof(plugins),
	              _this = this,
	              fns = {
	            'object': function object(plgs) {
	              plgs.forEach(function (p) {
	                p = hyphenate(p);
	                $('[data-' + p + ']').foundation('_init');
	              });
	            },
	            'string': function string() {
	              plugins = hyphenate(plugins);
	              $('[data-' + plugins + ']').foundation('_init');
	            },
	            'undefined': function undefined() {
	              this['object'](Object.keys(_this._plugins));
	            }
	          };
	          fns[type](plugins);
	        }
	      } catch (err) {
	        console.error(err);
	      } finally {
	        return plugins;
	      }
	    },

	    /**
	     * returns a random base-36 uid with namespacing
	     * @function
	     * @param {Number} length - number of random base-36 digits desired. Increase for more random strings.
	     * @param {String} namespace - name of plugin to be incorporated in uid, optional.
	     * @default {String} '' - if no plugin name is provided, nothing is appended to the uid.
	     * @returns {String} - unique id
	     */
	    GetYoDigits: function GetYoDigits(length, namespace) {
	      length = length || 6;
	      return Math.round(Math.pow(36, length + 1) - Math.random() * Math.pow(36, length)).toString(36).slice(1) + (namespace ? '-' + namespace : '');
	    },
	    /**
	     * Initialize plugins on any elements within `elem` (and `elem` itself) that aren't already initialized.
	     * @param {Object} elem - jQuery object containing the element to check inside. Also checks the element itself, unless it's the `document` object.
	     * @param {String|Array} plugins - A list of plugins to initialize. Leave this out to initialize everything.
	     */
	    reflow: function reflow(elem, plugins) {

	      // If plugins is undefined, just grab everything
	      if (typeof plugins === 'undefined') {
	        plugins = Object.keys(this._plugins);
	      }
	      // If plugins is a string, convert it to an array with one item
	      else if (typeof plugins === 'string') {
	          plugins = [plugins];
	        }

	      var _this = this;

	      // Iterate through each plugin
	      $.each(plugins, function (i, name) {
	        // Get the current plugin
	        var plugin = _this._plugins[name];

	        // Localize the search to all elements inside elem, as well as elem itself, unless elem === document
	        var $elem = $(elem).find('[data-' + name + ']').addBack('[data-' + name + ']');

	        // For each plugin found, initialize it
	        $elem.each(function () {
	          var $el = $(this),
	              opts = {};
	          // Don't double-dip on plugins
	          if ($el.data('zfPlugin')) {
	            console.warn("Tried to initialize " + name + " on an element that already has a Foundation plugin.");
	            return;
	          }

	          if ($el.attr('data-options')) {
	            var thing = $el.attr('data-options').split(';').forEach(function (e, i) {
	              var opt = e.split(':').map(function (el) {
	                return el.trim();
	              });
	              if (opt[0]) opts[opt[0]] = parseValue(opt[1]);
	            });
	          }
	          try {
	            $el.data('zfPlugin', new plugin($(this), opts));
	          } catch (er) {
	            console.error(er);
	          } finally {
	            return;
	          }
	        });
	      });
	    },
	    getFnName: functionName,
	    transitionend: function transitionend($elem) {
	      var transitions = {
	        'transition': 'transitionend',
	        'WebkitTransition': 'webkitTransitionEnd',
	        'MozTransition': 'transitionend',
	        'OTransition': 'otransitionend'
	      };
	      var elem = document.createElement('div'),
	          end;

	      for (var t in transitions) {
	        if (typeof elem.style[t] !== 'undefined') {
	          end = transitions[t];
	        }
	      }
	      if (end) {
	        return end;
	      } else {
	        end = setTimeout(function () {
	          $elem.triggerHandler('transitionend', [$elem]);
	        }, 1);
	        return 'transitionend';
	      }
	    }
	  };

	  Foundation.util = {
	    /**
	     * Function for applying a debounce effect to a function call.
	     * @function
	     * @param {Function} func - Function to be called at end of timeout.
	     * @param {Number} delay - Time in ms to delay the call of `func`.
	     * @returns function
	     */
	    throttle: function throttle(func, delay) {
	      var timer = null;

	      return function () {
	        var context = this,
	            args = arguments;

	        if (timer === null) {
	          timer = setTimeout(function () {
	            func.apply(context, args);
	            timer = null;
	          }, delay);
	        }
	      };
	    }
	  };

	  // TODO: consider not making this a jQuery function
	  // TODO: need way to reflow vs. re-initialize
	  /**
	   * The Foundation jQuery method.
	   * @param {String|Array} method - An action to perform on the current jQuery object.
	   */
	  var foundation = function foundation(method) {
	    var type = typeof method === 'undefined' ? 'undefined' : _typeof(method),
	        $meta = $('meta.foundation-mq'),
	        $noJS = $('.no-js');

	    if (!$meta.length) {
	      $('<meta class="foundation-mq">').appendTo(document.head);
	    }
	    if ($noJS.length) {
	      $noJS.removeClass('no-js');
	    }

	    if (type === 'undefined') {
	      //needs to initialize the Foundation object, or an individual plugin.
	      Foundation.MediaQuery._init();
	      Foundation.reflow(this);
	    } else if (type === 'string') {
	      //an individual method to invoke on a plugin or group of plugins
	      var args = Array.prototype.slice.call(arguments, 1); //collect all the arguments, if necessary
	      var plugClass = this.data('zfPlugin'); //determine the class of plugin

	      if (plugClass !== undefined && plugClass[method] !== undefined) {
	        //make sure both the class and method exist
	        if (this.length === 1) {
	          //if there's only one, call it directly.
	          plugClass[method].apply(plugClass, args);
	        } else {
	          this.each(function (i, el) {
	            //otherwise loop through the jQuery collection and invoke the method on each
	            plugClass[method].apply($(el).data('zfPlugin'), args);
	          });
	        }
	      } else {
	        //error for no class or no method
	        throw new ReferenceError("We're sorry, '" + method + "' is not an available method for " + (plugClass ? functionName(plugClass) : 'this element') + '.');
	      }
	    } else {
	      //error for invalid argument type
	      throw new TypeError('We\'re sorry, ' + type + ' is not a valid parameter. You must use a string representing the method you wish to invoke.');
	    }
	    return this;
	  };

	  window.Foundation = Foundation;
	  $.fn.foundation = foundation;

	  // Polyfill for requestAnimationFrame
	  (function () {
	    if (!Date.now || !window.Date.now) window.Date.now = Date.now = function () {
	      return new Date().getTime();
	    };

	    var vendors = ['webkit', 'moz'];
	    for (var i = 0; i < vendors.length && !window.requestAnimationFrame; ++i) {
	      var vp = vendors[i];
	      window.requestAnimationFrame = window[vp + 'RequestAnimationFrame'];
	      window.cancelAnimationFrame = window[vp + 'CancelAnimationFrame'] || window[vp + 'CancelRequestAnimationFrame'];
	    }
	    if (/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent) || !window.requestAnimationFrame || !window.cancelAnimationFrame) {
	      var lastTime = 0;
	      window.requestAnimationFrame = function (callback) {
	        var now = Date.now();
	        var nextTime = Math.max(lastTime + 16, now);
	        return setTimeout(function () {
	          callback(lastTime = nextTime);
	        }, nextTime - now);
	      };
	      window.cancelAnimationFrame = clearTimeout;
	    }
	    /**
	     * Polyfill for performance.now, required by rAF
	     */
	    if (!window.performance || !window.performance.now) {
	      window.performance = {
	        start: Date.now(),
	        now: function now() {
	          return Date.now() - this.start;
	        }
	      };
	    }
	  })();
	  if (!Function.prototype.bind) {
	    Function.prototype.bind = function (oThis) {
	      if (typeof this !== 'function') {
	        // closest thing possible to the ECMAScript 5
	        // internal IsCallable function
	        throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');
	      }

	      var aArgs = Array.prototype.slice.call(arguments, 1),
	          fToBind = this,
	          fNOP = function fNOP() {},
	          fBound = function fBound() {
	        return fToBind.apply(this instanceof fNOP ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));
	      };

	      if (this.prototype) {
	        // native functions don't have a prototype
	        fNOP.prototype = this.prototype;
	      }
	      fBound.prototype = new fNOP();

	      return fBound;
	    };
	  }
	  // Polyfill to get the name of a function in IE9
	  function functionName(fn) {
	    if (Function.prototype.name === undefined) {
	      var funcNameRegex = /function\s([^(]{1,})\(/;
	      var results = funcNameRegex.exec(fn.toString());
	      return results && results.length > 1 ? results[1].trim() : "";
	    } else if (fn.prototype === undefined) {
	      return fn.constructor.name;
	    } else {
	      return fn.prototype.constructor.name;
	    }
	  }
	  function parseValue(str) {
	    if ('true' === str) return true;else if ('false' === str) return false;else if (!isNaN(str * 1)) return parseFloat(str);
	    return str;
	  }
	  // Convert PascalCase to kebab-case
	  // Thank you: http://stackoverflow.com/a/8955580
	  function hyphenate(str) {
	    return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
	  }
	}(jQuery);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	!function ($) {

	  /**
	   * Accordion module.
	   * @module foundation.accordion
	   * @requires foundation.util.keyboard
	   * @requires foundation.util.motion
	   */

	  var Accordion = function () {
	    /**
	     * Creates a new instance of an accordion.
	     * @class
	     * @fires Accordion#init
	     * @param {jQuery} element - jQuery object to make into an accordion.
	     * @param {Object} options - a plain object with settings to override the default options.
	     */
	    function Accordion(element, options) {
	      _classCallCheck(this, Accordion);

	      this.$element = element;
	      this.options = $.extend({}, Accordion.defaults, this.$element.data(), options);

	      this._init();

	      Foundation.registerPlugin(this, 'Accordion');
	      Foundation.Keyboard.register('Accordion', {
	        'ENTER': 'toggle',
	        'SPACE': 'toggle',
	        'ARROW_DOWN': 'next',
	        'ARROW_UP': 'previous'
	      });
	    }

	    /**
	     * Initializes the accordion by animating the preset active pane(s).
	     * @private
	     */


	    _createClass(Accordion, [{
	      key: '_init',
	      value: function _init() {
	        this.$element.attr('role', 'tablist');
	        this.$tabs = this.$element.children('[data-accordion-item]');

	        this.$tabs.each(function (idx, el) {
	          var $el = $(el),
	              $content = $el.children('[data-tab-content]'),
	              id = $content[0].id || Foundation.GetYoDigits(6, 'accordion'),
	              linkId = el.id || id + '-label';

	          $el.find('a:first').attr({
	            'aria-controls': id,
	            'role': 'tab',
	            'id': linkId,
	            'aria-expanded': false,
	            'aria-selected': false
	          });

	          $content.attr({ 'role': 'tabpanel', 'aria-labelledby': linkId, 'aria-hidden': true, 'id': id });
	        });
	        var $initActive = this.$element.find('.is-active').children('[data-tab-content]');
	        if ($initActive.length) {
	          this.down($initActive, true);
	        }
	        this._events();
	      }

	      /**
	       * Adds event handlers for items within the accordion.
	       * @private
	       */

	    }, {
	      key: '_events',
	      value: function _events() {
	        var _this = this;

	        this.$tabs.each(function () {
	          var $elem = $(this);
	          var $tabContent = $elem.children('[data-tab-content]');
	          if ($tabContent.length) {
	            $elem.children('a').off('click.zf.accordion keydown.zf.accordion').on('click.zf.accordion', function (e) {
	              e.preventDefault();
	              _this.toggle($tabContent);
	            }).on('keydown.zf.accordion', function (e) {
	              Foundation.Keyboard.handleKey(e, 'Accordion', {
	                toggle: function toggle() {
	                  _this.toggle($tabContent);
	                },
	                next: function next() {
	                  var $a = $elem.next().find('a').focus();
	                  if (!_this.options.multiExpand) {
	                    $a.trigger('click.zf.accordion');
	                  }
	                },
	                previous: function previous() {
	                  var $a = $elem.prev().find('a').focus();
	                  if (!_this.options.multiExpand) {
	                    $a.trigger('click.zf.accordion');
	                  }
	                },
	                handled: function handled() {
	                  e.preventDefault();
	                  e.stopPropagation();
	                }
	              });
	            });
	          }
	        });
	      }

	      /**
	       * Toggles the selected content pane's open/close state.
	       * @param {jQuery} $target - jQuery object of the pane to toggle (`.accordion-content`).
	       * @function
	       */

	    }, {
	      key: 'toggle',
	      value: function toggle($target) {
	        if ($target.parent().hasClass('is-active')) {
	          this.up($target);
	        } else {
	          this.down($target);
	        }
	      }

	      /**
	       * Opens the accordion tab defined by `$target`.
	       * @param {jQuery} $target - Accordion pane to open (`.accordion-content`).
	       * @param {Boolean} firstTime - flag to determine if reflow should happen.
	       * @fires Accordion#down
	       * @function
	       */

	    }, {
	      key: 'down',
	      value: function down($target, firstTime) {
	        var _this2 = this;

	        $target.attr('aria-hidden', false).parent('[data-tab-content]').addBack().parent().addClass('is-active');

	        if (!this.options.multiExpand && !firstTime) {
	          var $currentActive = this.$element.children('.is-active').children('[data-tab-content]');
	          if ($currentActive.length) {
	            this.up($currentActive.not($target));
	          }
	        }

	        $target.slideDown(this.options.slideSpeed, function () {
	          /**
	           * Fires when the tab is done opening.
	           * @event Accordion#down
	           */
	          _this2.$element.trigger('down.zf.accordion', [$target]);
	        });

	        $('#' + $target.attr('aria-labelledby')).attr({
	          'aria-expanded': true,
	          'aria-selected': true
	        });
	      }

	      /**
	       * Closes the tab defined by `$target`.
	       * @param {jQuery} $target - Accordion tab to close (`.accordion-content`).
	       * @fires Accordion#up
	       * @function
	       */

	    }, {
	      key: 'up',
	      value: function up($target) {
	        var $aunts = $target.parent().siblings(),
	            _this = this;

	        if (!this.options.allowAllClosed && !$aunts.hasClass('is-active') || !$target.parent().hasClass('is-active')) {
	          return;
	        }

	        // Foundation.Move(this.options.slideSpeed, $target, function(){
	        $target.slideUp(_this.options.slideSpeed, function () {
	          /**
	           * Fires when the tab is done collapsing up.
	           * @event Accordion#up
	           */
	          _this.$element.trigger('up.zf.accordion', [$target]);
	        });
	        // });

	        $target.attr('aria-hidden', true).parent().removeClass('is-active');

	        $('#' + $target.attr('aria-labelledby')).attr({
	          'aria-expanded': false,
	          'aria-selected': false
	        });
	      }

	      /**
	       * Destroys an instance of an accordion.
	       * @fires Accordion#destroyed
	       * @function
	       */

	    }, {
	      key: 'destroy',
	      value: function destroy() {
	        this.$element.find('[data-tab-content]').stop(true).slideUp(0).css('display', '');
	        this.$element.find('a').off('.zf.accordion');

	        Foundation.unregisterPlugin(this);
	      }
	    }]);

	    return Accordion;
	  }();

	  Accordion.defaults = {
	    /**
	     * Amount of time to animate the opening of an accordion pane.
	     * @option
	     * @type {number}
	     * @default 250
	     */
	    slideSpeed: 250,
	    /**
	     * Allow the accordion to have multiple open panes.
	     * @option
	     * @type {boolean}
	     * @default false
	     */
	    multiExpand: false,
	    /**
	     * Allow the accordion to close all panes.
	     * @option
	     * @type {boolean}
	     * @default false
	     */
	    allowAllClosed: false
	  };

	  // Window exports
	  Foundation.plugin(Accordion, 'Accordion');
	}(jQuery);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	!function ($) {

	  /**
	   * Reveal module.
	   * @module foundation.reveal
	   * @requires foundation.util.keyboard
	   * @requires foundation.util.box
	   * @requires foundation.util.triggers
	   * @requires foundation.util.mediaQuery
	   * @requires foundation.util.motion if using animations
	   */

	  var Reveal = function () {
	    /**
	     * Creates a new instance of Reveal.
	     * @class
	     * @param {jQuery} element - jQuery object to use for the modal.
	     * @param {Object} options - optional parameters.
	     */
	    function Reveal(element, options) {
	      _classCallCheck(this, Reveal);

	      this.$element = element;
	      this.options = $.extend({}, Reveal.defaults, this.$element.data(), options);
	      this._init();

	      Foundation.registerPlugin(this, 'Reveal');
	      Foundation.Keyboard.register('Reveal', {
	        'ENTER': 'open',
	        'SPACE': 'open',
	        'ESCAPE': 'close'
	      });
	    }

	    /**
	     * Initializes the modal by adding the overlay and close buttons, (if selected).
	     * @private
	     */


	    _createClass(Reveal, [{
	      key: '_init',
	      value: function _init() {
	        this.id = this.$element.attr('id');
	        this.isActive = false;
	        this.cached = { mq: Foundation.MediaQuery.current };
	        this.isMobile = mobileSniff();

	        this.$anchor = $('[data-open="' + this.id + '"]').length ? $('[data-open="' + this.id + '"]') : $('[data-toggle="' + this.id + '"]');
	        this.$anchor.attr({
	          'aria-controls': this.id,
	          'aria-haspopup': true,
	          'tabindex': 0
	        });

	        if (this.options.fullScreen || this.$element.hasClass('full')) {
	          this.options.fullScreen = true;
	          this.options.overlay = false;
	        }
	        if (this.options.overlay && !this.$overlay) {
	          this.$overlay = this._makeOverlay(this.id);
	        }

	        this.$element.attr({
	          'role': 'dialog',
	          'aria-hidden': true,
	          'data-yeti-box': this.id,
	          'data-resize': this.id
	        });

	        if (this.$overlay) {
	          this.$element.detach().appendTo(this.$overlay);
	        } else {
	          this.$element.detach().appendTo($(this.options.appendTo));
	          this.$element.addClass('without-overlay');
	        }
	        this._events();
	        if (this.options.deepLink && window.location.hash === '#' + this.id) {
	          $(window).one('load.zf.reveal', this.open.bind(this));
	        }
	      }

	      /**
	       * Creates an overlay div to display behind the modal.
	       * @private
	       */

	    }, {
	      key: '_makeOverlay',
	      value: function _makeOverlay() {
	        return $('<div></div>').addClass('reveal-overlay').appendTo(this.options.appendTo);
	      }

	      /**
	       * Updates position of modal
	       * TODO:  Figure out if we actually need to cache these values or if it doesn't matter
	       * @private
	       */

	    }, {
	      key: '_updatePosition',
	      value: function _updatePosition() {
	        var width = this.$element.outerWidth();
	        var outerWidth = $(window).width();
	        var height = this.$element.outerHeight();
	        var outerHeight = $(window).height();
	        var left, top;
	        if (this.options.hOffset === 'auto') {
	          left = parseInt((outerWidth - width) / 2, 10);
	        } else {
	          left = parseInt(this.options.hOffset, 10);
	        }
	        if (this.options.vOffset === 'auto') {
	          if (height > outerHeight) {
	            top = parseInt(Math.min(100, outerHeight / 10), 10);
	          } else {
	            top = parseInt((outerHeight - height) / 4, 10);
	          }
	        } else {
	          top = parseInt(this.options.vOffset, 10);
	        }
	        this.$element.css({ top: top + 'px' });
	        // only worry about left if we don't have an overlay or we havea  horizontal offset,
	        // otherwise we're perfectly in the middle
	        if (!this.$overlay || this.options.hOffset !== 'auto') {
	          this.$element.css({ left: left + 'px' });
	          this.$element.css({ margin: '0px' });
	        }
	      }

	      /**
	       * Adds event handlers for the modal.
	       * @private
	       */

	    }, {
	      key: '_events',
	      value: function _events() {
	        var _this2 = this;

	        var _this = this;

	        this.$element.on({
	          'open.zf.trigger': this.open.bind(this),
	          'close.zf.trigger': function closeZfTrigger(event, $element) {
	            if (event.target === _this.$element[0] || $(event.target).parents('[data-closable]')[0] === $element) {
	              // only close reveal when it's explicitly called
	              return _this2.close.apply(_this2);
	            }
	          },
	          'toggle.zf.trigger': this.toggle.bind(this),
	          'resizeme.zf.trigger': function resizemeZfTrigger() {
	            _this._updatePosition();
	          }
	        });

	        if (this.$anchor.length) {
	          this.$anchor.on('keydown.zf.reveal', function (e) {
	            if (e.which === 13 || e.which === 32) {
	              e.stopPropagation();
	              e.preventDefault();
	              _this.open();
	            }
	          });
	        }

	        if (this.options.closeOnClick && this.options.overlay) {
	          this.$overlay.off('.zf.reveal').on('click.zf.reveal', function (e) {
	            if (e.target === _this.$element[0] || $.contains(_this.$element[0], e.target) || !$.contains(document, e.target)) {
	              return;
	            }
	            _this.close();
	          });
	        }
	        if (this.options.deepLink) {
	          $(window).on('popstate.zf.reveal:' + this.id, this._handleState.bind(this));
	        }
	      }

	      /**
	       * Handles modal methods on back/forward button clicks or any other event that triggers popstate.
	       * @private
	       */

	    }, {
	      key: '_handleState',
	      value: function _handleState(e) {
	        if (window.location.hash === '#' + this.id && !this.isActive) {
	          this.open();
	        } else {
	          this.close();
	        }
	      }

	      /**
	       * Opens the modal controlled by `this.$anchor`, and closes all others by default.
	       * @function
	       * @fires Reveal#closeme
	       * @fires Reveal#open
	       */

	    }, {
	      key: 'open',
	      value: function open() {
	        var _this3 = this;

	        if (this.options.deepLink) {
	          var hash = '#' + this.id;

	          if (window.history.pushState) {
	            window.history.pushState(null, null, hash);
	          } else {
	            window.location.hash = hash;
	          }
	        }

	        this.isActive = true;

	        // Make elements invisible, but remove display: none so we can get size and positioning
	        this.$element.css({ 'visibility': 'hidden' }).show().scrollTop(0);
	        if (this.options.overlay) {
	          this.$overlay.css({ 'visibility': 'hidden' }).show();
	        }

	        this._updatePosition();

	        this.$element.hide().css({ 'visibility': '' });

	        if (this.$overlay) {
	          this.$overlay.css({ 'visibility': '' }).hide();
	          if (this.$element.hasClass('fast')) {
	            this.$overlay.addClass('fast');
	          } else if (this.$element.hasClass('slow')) {
	            this.$overlay.addClass('slow');
	          }
	        }

	        if (!this.options.multipleOpened) {
	          /**
	           * Fires immediately before the modal opens.
	           * Closes any other modals that are currently open
	           * @event Reveal#closeme
	           */
	          this.$element.trigger('closeme.zf.reveal', this.id);
	        }

	        var _this = this;

	        function addRevealOpenClasses() {
	          if (_this.isMobile) {
	            if (!_this.originalScrollPos) {
	              _this.originalScrollPos = window.pageYOffset;
	            }
	            $('html, body').addClass('is-reveal-open');
	          } else {
	            $('body').addClass('is-reveal-open');
	          }
	        }
	        // Motion UI method of reveal
	        if (this.options.animationIn) {
	          var afterAnimation = function afterAnimation() {
	            _this.$element.attr({
	              'aria-hidden': false,
	              'tabindex': -1
	            }).focus();
	            addRevealOpenClasses();
	            Foundation.Keyboard.trapFocus(_this.$element);
	          };

	          if (this.options.overlay) {
	            Foundation.Motion.animateIn(this.$overlay, 'fade-in');
	          }
	          Foundation.Motion.animateIn(this.$element, this.options.animationIn, function () {
	            if (_this3.$element) {
	              // protect against object having been removed
	              _this3.focusableElements = Foundation.Keyboard.findFocusable(_this3.$element);
	              afterAnimation();
	            }
	          });
	        }
	        // jQuery method of reveal
	        else {
	            if (this.options.overlay) {
	              this.$overlay.show(0);
	            }
	            this.$element.show(this.options.showDelay);
	          }

	        // handle accessibility
	        this.$element.attr({
	          'aria-hidden': false,
	          'tabindex': -1
	        }).focus();
	        Foundation.Keyboard.trapFocus(this.$element);

	        /**
	         * Fires when the modal has successfully opened.
	         * @event Reveal#open
	         */
	        this.$element.trigger('open.zf.reveal');

	        addRevealOpenClasses();

	        setTimeout(function () {
	          _this3._extraHandlers();
	        }, 0);
	      }

	      /**
	       * Adds extra event handlers for the body and window if necessary.
	       * @private
	       */

	    }, {
	      key: '_extraHandlers',
	      value: function _extraHandlers() {
	        var _this = this;
	        if (!this.$element) {
	          return;
	        } // If we're in the middle of cleanup, don't freak out
	        this.focusableElements = Foundation.Keyboard.findFocusable(this.$element);

	        if (!this.options.overlay && this.options.closeOnClick && !this.options.fullScreen) {
	          $('body').on('click.zf.reveal', function (e) {
	            if (e.target === _this.$element[0] || $.contains(_this.$element[0], e.target) || !$.contains(document, e.target)) {
	              return;
	            }
	            _this.close();
	          });
	        }

	        if (this.options.closeOnEsc) {
	          $(window).on('keydown.zf.reveal', function (e) {
	            Foundation.Keyboard.handleKey(e, 'Reveal', {
	              close: function close() {
	                if (_this.options.closeOnEsc) {
	                  _this.close();
	                  _this.$anchor.focus();
	                }
	              }
	            });
	          });
	        }

	        // lock focus within modal while tabbing
	        this.$element.on('keydown.zf.reveal', function (e) {
	          var $target = $(this);
	          // handle keyboard event with keyboard util
	          Foundation.Keyboard.handleKey(e, 'Reveal', {
	            open: function open() {
	              if (_this.$element.find(':focus').is(_this.$element.find('[data-close]'))) {
	                setTimeout(function () {
	                  // set focus back to anchor if close button has been activated
	                  _this.$anchor.focus();
	                }, 1);
	              } else if ($target.is(_this.focusableElements)) {
	                // dont't trigger if acual element has focus (i.e. inputs, links, ...)
	                _this.open();
	              }
	            },
	            close: function close() {
	              if (_this.options.closeOnEsc) {
	                _this.close();
	                _this.$anchor.focus();
	              }
	            },
	            handled: function handled(preventDefault) {
	              if (preventDefault) {
	                e.preventDefault();
	              }
	            }
	          });
	        });
	      }

	      /**
	       * Closes the modal.
	       * @function
	       * @fires Reveal#closed
	       */

	    }, {
	      key: 'close',
	      value: function close() {
	        if (!this.isActive || !this.$element.is(':visible')) {
	          return false;
	        }
	        var _this = this;

	        // Motion UI method of hiding
	        if (this.options.animationOut) {
	          if (this.options.overlay) {
	            Foundation.Motion.animateOut(this.$overlay, 'fade-out', finishUp);
	          } else {
	            finishUp();
	          }

	          Foundation.Motion.animateOut(this.$element, this.options.animationOut);
	        }
	        // jQuery method of hiding
	        else {
	            if (this.options.overlay) {
	              this.$overlay.hide(0, finishUp);
	            } else {
	              finishUp();
	            }

	            this.$element.hide(this.options.hideDelay);
	          }

	        // Conditionals to remove extra event listeners added on open
	        if (this.options.closeOnEsc) {
	          $(window).off('keydown.zf.reveal');
	        }

	        if (!this.options.overlay && this.options.closeOnClick) {
	          $('body').off('click.zf.reveal');
	        }

	        this.$element.off('keydown.zf.reveal');

	        function finishUp() {
	          if (_this.isMobile) {
	            $('html, body').removeClass('is-reveal-open');
	            if (_this.originalScrollPos) {
	              $('body').scrollTop(_this.originalScrollPos);
	              _this.originalScrollPos = null;
	            }
	          } else {
	            $('body').removeClass('is-reveal-open');
	          }

	          Foundation.Keyboard.releaseFocus(_this.$element);

	          _this.$element.attr('aria-hidden', true);

	          /**
	          * Fires when the modal is done closing.
	          * @event Reveal#closed
	          */
	          _this.$element.trigger('closed.zf.reveal');
	        }

	        /**
	        * Resets the modal content
	        * This prevents a running video to keep going in the background
	        */
	        if (this.options.resetOnClose) {
	          this.$element.html(this.$element.html());
	        }

	        this.isActive = false;
	        if (_this.options.deepLink) {
	          if (window.history.replaceState) {
	            window.history.replaceState('', document.title, window.location.href.replace('#' + this.id, ''));
	          } else {
	            window.location.hash = '';
	          }
	        }
	      }

	      /**
	       * Toggles the open/closed state of a modal.
	       * @function
	       */

	    }, {
	      key: 'toggle',
	      value: function toggle() {
	        if (this.isActive) {
	          this.close();
	        } else {
	          this.open();
	        }
	      }
	    }, {
	      key: 'destroy',


	      /**
	       * Destroys an instance of a modal.
	       * @function
	       */
	      value: function destroy() {
	        if (this.options.overlay) {
	          this.$element.appendTo($(this.options.appendTo)); // move $element outside of $overlay to prevent error unregisterPlugin()
	          this.$overlay.hide().off().remove();
	        }
	        this.$element.hide().off();
	        this.$anchor.off('.zf');
	        $(window).off('.zf.reveal:' + this.id);

	        Foundation.unregisterPlugin(this);
	      }
	    }]);

	    return Reveal;
	  }();

	  Reveal.defaults = {
	    /**
	     * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.
	     * @option
	     * @type {string}
	     * @default ''
	     */
	    animationIn: '',
	    /**
	     * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.
	     * @option
	     * @type {string}
	     * @default ''
	     */
	    animationOut: '',
	    /**
	     * Time, in ms, to delay the opening of a modal after a click if no animation used.
	     * @option
	     * @type {number}
	     * @default 0
	     */
	    showDelay: 0,
	    /**
	     * Time, in ms, to delay the closing of a modal after a click if no animation used.
	     * @option
	     * @type {number}
	     * @default 0
	     */
	    hideDelay: 0,
	    /**
	     * Allows a click on the body/overlay to close the modal.
	     * @option
	     * @type {boolean}
	     * @default true
	     */
	    closeOnClick: true,
	    /**
	     * Allows the modal to close if the user presses the `ESCAPE` key.
	     * @option
	     * @type {boolean}
	     * @default true
	     */
	    closeOnEsc: true,
	    /**
	     * If true, allows multiple modals to be displayed at once.
	     * @option
	     * @type {boolean}
	     * @default false
	     */
	    multipleOpened: false,
	    /**
	     * Distance, in pixels, the modal should push down from the top of the screen.
	     * @option
	     * @type {number|string}
	     * @default auto
	     */
	    vOffset: 'auto',
	    /**
	     * Distance, in pixels, the modal should push in from the side of the screen.
	     * @option
	     * @type {number|string}
	     * @default auto
	     */
	    hOffset: 'auto',
	    /**
	     * Allows the modal to be fullscreen, completely blocking out the rest of the view. JS checks for this as well.
	     * @option
	     * @type {boolean}
	     * @default false
	     */
	    fullScreen: false,
	    /**
	     * Percentage of screen height the modal should push up from the bottom of the view.
	     * @option
	     * @type {number}
	     * @default 10
	     */
	    btmOffsetPct: 10,
	    /**
	     * Allows the modal to generate an overlay div, which will cover the view when modal opens.
	     * @option
	     * @type {boolean}
	     * @default true
	     */
	    overlay: true,
	    /**
	     * Allows the modal to remove and reinject markup on close. Should be true if using video elements w/o using provider's api, otherwise, videos will continue to play in the background.
	     * @option
	     * @type {boolean}
	     * @default false
	     */
	    resetOnClose: false,
	    /**
	     * Allows the modal to alter the url on open/close, and allows the use of the `back` button to close modals. ALSO, allows a modal to auto-maniacally open on page load IF the hash === the modal's user-set id.
	     * @option
	     * @type {boolean}
	     * @default false
	     */
	    deepLink: false,
	    /**
	    * Allows the modal to append to custom div.
	    * @option
	    * @type {string}
	    * @default "body"
	    */
	    appendTo: "body"

	  };

	  // Window exports
	  Foundation.plugin(Reveal, 'Reveal');

	  function iPhoneSniff() {
	    return (/iP(ad|hone|od).*OS/.test(window.navigator.userAgent)
	    );
	  }

	  function androidSniff() {
	    return (/Android/.test(window.navigator.userAgent)
	    );
	  }

	  function mobileSniff() {
	    return iPhoneSniff() || androidSniff();
	  }
	}(jQuery);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {'use strict';

	!function ($) {

	  Foundation.Box = {
	    ImNotTouchingYou: ImNotTouchingYou,
	    GetDimensions: GetDimensions,
	    GetOffsets: GetOffsets

	    /**
	     * Compares the dimensions of an element to a container and determines collision events with container.
	     * @function
	     * @param {jQuery} element - jQuery object to test for collisions.
	     * @param {jQuery} parent - jQuery object to use as bounding container.
	     * @param {Boolean} lrOnly - set to true to check left and right values only.
	     * @param {Boolean} tbOnly - set to true to check top and bottom values only.
	     * @default if no parent object passed, detects collisions with `window`.
	     * @returns {Boolean} - true if collision free, false if a collision in any direction.
	     */
	  };function ImNotTouchingYou(element, parent, lrOnly, tbOnly) {
	    var eleDims = GetDimensions(element),
	        top,
	        bottom,
	        left,
	        right;

	    if (parent) {
	      var parDims = GetDimensions(parent);

	      bottom = eleDims.offset.top + eleDims.height <= parDims.height + parDims.offset.top;
	      top = eleDims.offset.top >= parDims.offset.top;
	      left = eleDims.offset.left >= parDims.offset.left;
	      right = eleDims.offset.left + eleDims.width <= parDims.width + parDims.offset.left;
	    } else {
	      bottom = eleDims.offset.top + eleDims.height <= eleDims.windowDims.height + eleDims.windowDims.offset.top;
	      top = eleDims.offset.top >= eleDims.windowDims.offset.top;
	      left = eleDims.offset.left >= eleDims.windowDims.offset.left;
	      right = eleDims.offset.left + eleDims.width <= eleDims.windowDims.width;
	    }

	    var allDirs = [bottom, top, left, right];

	    if (lrOnly) {
	      return left === right === true;
	    }

	    if (tbOnly) {
	      return top === bottom === true;
	    }

	    return allDirs.indexOf(false) === -1;
	  };

	  /**
	   * Uses native methods to return an object of dimension values.
	   * @function
	   * @param {jQuery || HTML} element - jQuery object or DOM element for which to get the dimensions. Can be any element other that document or window.
	   * @returns {Object} - nested object of integer pixel values
	   * TODO - if element is window, return only those values.
	   */
	  function GetDimensions(elem, test) {
	    elem = elem.length ? elem[0] : elem;

	    if (elem === window || elem === document) {
	      throw new Error("I'm sorry, Dave. I'm afraid I can't do that.");
	    }

	    var rect = elem.getBoundingClientRect(),
	        parRect = elem.parentNode.getBoundingClientRect(),
	        winRect = document.body.getBoundingClientRect(),
	        winY = window.pageYOffset,
	        winX = window.pageXOffset;

	    return {
	      width: rect.width,
	      height: rect.height,
	      offset: {
	        top: rect.top + winY,
	        left: rect.left + winX
	      },
	      parentDims: {
	        width: parRect.width,
	        height: parRect.height,
	        offset: {
	          top: parRect.top + winY,
	          left: parRect.left + winX
	        }
	      },
	      windowDims: {
	        width: winRect.width,
	        height: winRect.height,
	        offset: {
	          top: winY,
	          left: winX
	        }
	      }
	    };
	  }

	  /**
	   * Returns an object of top and left integer pixel values for dynamically rendered elements,
	   * such as: Tooltip, Reveal, and Dropdown
	   * @function
	   * @param {jQuery} element - jQuery object for the element being positioned.
	   * @param {jQuery} anchor - jQuery object for the element's anchor point.
	   * @param {String} position - a string relating to the desired position of the element, relative to it's anchor
	   * @param {Number} vOffset - integer pixel value of desired vertical separation between anchor and element.
	   * @param {Number} hOffset - integer pixel value of desired horizontal separation between anchor and element.
	   * @param {Boolean} isOverflow - if a collision event is detected, sets to true to default the element to full width - any desired offset.
	   * TODO alter/rewrite to work with `em` values as well/instead of pixels
	   */
	  function GetOffsets(element, anchor, position, vOffset, hOffset, isOverflow) {
	    var $eleDims = GetDimensions(element),
	        $anchorDims = anchor ? GetDimensions(anchor) : null;

	    switch (position) {
	      case 'top':
	        return {
	          left: Foundation.rtl() ? $anchorDims.offset.left - $eleDims.width + $anchorDims.width : $anchorDims.offset.left,
	          top: $anchorDims.offset.top - ($eleDims.height + vOffset)
	        };
	        break;
	      case 'left':
	        return {
	          left: $anchorDims.offset.left - ($eleDims.width + hOffset),
	          top: $anchorDims.offset.top
	        };
	        break;
	      case 'right':
	        return {
	          left: $anchorDims.offset.left + $anchorDims.width + hOffset,
	          top: $anchorDims.offset.top
	        };
	        break;
	      case 'center top':
	        return {
	          left: $anchorDims.offset.left + $anchorDims.width / 2 - $eleDims.width / 2,
	          top: $anchorDims.offset.top - ($eleDims.height + vOffset)
	        };
	        break;
	      case 'center bottom':
	        return {
	          left: isOverflow ? hOffset : $anchorDims.offset.left + $anchorDims.width / 2 - $eleDims.width / 2,
	          top: $anchorDims.offset.top + $anchorDims.height + vOffset
	        };
	        break;
	      case 'center left':
	        return {
	          left: $anchorDims.offset.left - ($eleDims.width + hOffset),
	          top: $anchorDims.offset.top + $anchorDims.height / 2 - $eleDims.height / 2
	        };
	        break;
	      case 'center right':
	        return {
	          left: $anchorDims.offset.left + $anchorDims.width + hOffset + 1,
	          top: $anchorDims.offset.top + $anchorDims.height / 2 - $eleDims.height / 2
	        };
	        break;
	      case 'center':
	        return {
	          left: $eleDims.windowDims.offset.left + $eleDims.windowDims.width / 2 - $eleDims.width / 2,
	          top: $eleDims.windowDims.offset.top + $eleDims.windowDims.height / 2 - $eleDims.height / 2
	        };
	        break;
	      case 'reveal':
	        return {
	          left: ($eleDims.windowDims.width - $eleDims.width) / 2,
	          top: $eleDims.windowDims.offset.top + vOffset
	        };
	      case 'reveal full':
	        return {
	          left: $eleDims.windowDims.offset.left,
	          top: $eleDims.windowDims.offset.top
	        };
	        break;
	      case 'left bottom':
	        return {
	          left: $anchorDims.offset.left,
	          top: $anchorDims.offset.top + $anchorDims.height + vOffset
	        };
	        break;
	      case 'right bottom':
	        return {
	          left: $anchorDims.offset.left + $anchorDims.width + hOffset - $eleDims.width,
	          top: $anchorDims.offset.top + $anchorDims.height + vOffset
	        };
	        break;
	      default:
	        return {
	          left: Foundation.rtl() ? $anchorDims.offset.left - $eleDims.width + $anchorDims.width : $anchorDims.offset.left + hOffset,
	          top: $anchorDims.offset.top + $anchorDims.height + vOffset
	        };
	    }
	  }
	}(jQuery);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	!function ($) {

	  var MutationObserver = function () {
	    var prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];
	    for (var i = 0; i < prefixes.length; i++) {
	      if (prefixes[i] + 'MutationObserver' in window) {
	        return window[prefixes[i] + 'MutationObserver'];
	      }
	    }
	    return false;
	  }();

	  var triggers = function triggers(el, type) {
	    el.data(type).split(' ').forEach(function (id) {
	      $('#' + id)[type === 'close' ? 'trigger' : 'triggerHandler'](type + '.zf.trigger', [el]);
	    });
	  };
	  // Elements with [data-open] will reveal a plugin that supports it when clicked.
	  $(document).on('click.zf.trigger', '[data-open]', function () {
	    triggers($(this), 'open');
	  });

	  // Elements with [data-close] will close a plugin that supports it when clicked.
	  // If used without a value on [data-close], the event will bubble, allowing it to close a parent component.
	  $(document).on('click.zf.trigger', '[data-close]', function () {
	    var id = $(this).data('close');
	    if (id) {
	      triggers($(this), 'close');
	    } else {
	      $(this).trigger('close.zf.trigger');
	    }
	  });

	  // Elements with [data-toggle] will toggle a plugin that supports it when clicked.
	  $(document).on('click.zf.trigger', '[data-toggle]', function () {
	    var id = $(this).data('toggle');
	    if (id) {
	      triggers($(this), 'toggle');
	    } else {
	      $(this).trigger('toggle.zf.trigger');
	    }
	  });

	  // Elements with [data-closable] will respond to close.zf.trigger events.
	  $(document).on('close.zf.trigger', '[data-closable]', function (e) {
	    e.stopPropagation();
	    var animation = $(this).data('closable');

	    if (animation !== '') {
	      Foundation.Motion.animateOut($(this), animation, function () {
	        $(this).trigger('closed.zf');
	      });
	    } else {
	      $(this).fadeOut().trigger('closed.zf');
	    }
	  });

	  $(document).on('focus.zf.trigger blur.zf.trigger', '[data-toggle-focus]', function () {
	    var id = $(this).data('toggle-focus');
	    $('#' + id).triggerHandler('toggle.zf.trigger', [$(this)]);
	  });

	  /**
	  * Fires once after all other scripts have loaded
	  * @function
	  * @private
	  */
	  $(window).on('load', function () {
	    checkListeners();
	  });

	  function checkListeners() {
	    eventsListener();
	    resizeListener();
	    scrollListener();
	    mutateListener();
	    closemeListener();
	  }

	  //******** only fires this function once on load, if there's something to watch ********
	  function closemeListener(pluginName) {
	    var yetiBoxes = $('[data-yeti-box]'),
	        plugNames = ['dropdown', 'tooltip', 'reveal'];

	    if (pluginName) {
	      if (typeof pluginName === 'string') {
	        plugNames.push(pluginName);
	      } else if ((typeof pluginName === 'undefined' ? 'undefined' : _typeof(pluginName)) === 'object' && typeof pluginName[0] === 'string') {
	        plugNames.concat(pluginName);
	      } else {
	        console.error('Plugin names must be strings');
	      }
	    }
	    if (yetiBoxes.length) {
	      var listeners = plugNames.map(function (name) {
	        return 'closeme.zf.' + name;
	      }).join(' ');

	      $(window).off(listeners).on(listeners, function (e, pluginId) {
	        var plugin = e.namespace.split('.')[0];
	        var plugins = $('[data-' + plugin + ']').not('[data-yeti-box="' + pluginId + '"]');

	        plugins.each(function () {
	          var _this = $(this);

	          _this.triggerHandler('close.zf.trigger', [_this]);
	        });
	      });
	    }
	  }

	  function resizeListener(debounce) {
	    var timer = void 0,
	        $nodes = $('[data-resize]');
	    if ($nodes.length) {
	      $(window).off('resize.zf.trigger').on('resize.zf.trigger', function (e) {
	        if (timer) {
	          clearTimeout(timer);
	        }

	        timer = setTimeout(function () {

	          if (!MutationObserver) {
	            //fallback for IE 9
	            $nodes.each(function () {
	              $(this).triggerHandler('resizeme.zf.trigger');
	            });
	          }
	          //trigger all listening elements and signal a resize event
	          $nodes.attr('data-events', "resize");
	        }, debounce || 10); //default time to emit resize event
	      });
	    }
	  }

	  function scrollListener(debounce) {
	    var timer = void 0,
	        $nodes = $('[data-scroll]');
	    if ($nodes.length) {
	      $(window).off('scroll.zf.trigger').on('scroll.zf.trigger', function (e) {
	        if (timer) {
	          clearTimeout(timer);
	        }

	        timer = setTimeout(function () {

	          if (!MutationObserver) {
	            //fallback for IE 9
	            $nodes.each(function () {
	              $(this).triggerHandler('scrollme.zf.trigger');
	            });
	          }
	          //trigger all listening elements and signal a scroll event
	          $nodes.attr('data-events', "scroll");
	        }, debounce || 10); //default time to emit scroll event
	      });
	    }
	  }

	  function mutateListener(debounce) {
	    var $nodes = $('[data-mutate]');
	    if ($nodes.length && MutationObserver) {
	      //trigger all listening elements and signal a mutate event
	      //no IE 9 or 10
	      $nodes.each(function () {
	        $(this).triggerHandler('mutateme.zf.trigger');
	      });
	    }
	  }

	  function eventsListener() {
	    if (!MutationObserver) {
	      return false;
	    }
	    var nodes = document.querySelectorAll('[data-resize], [data-scroll], [data-mutate]');

	    //element callback
	    var listeningElementsMutation = function listeningElementsMutation(mutationRecordsList) {
	      var $target = $(mutationRecordsList[0].target);

	      //trigger the event handler for the element depending on type
	      switch (mutationRecordsList[0].type) {

	        case "attributes":
	          if ($target.attr("data-events") === "scroll" && mutationRecordsList[0].attributeName === "data-events") {
	            $target.triggerHandler('scrollme.zf.trigger', [$target, window.pageYOffset]);
	          }
	          if ($target.attr("data-events") === "resize" && mutationRecordsList[0].attributeName === "data-events") {
	            $target.triggerHandler('resizeme.zf.trigger', [$target]);
	          }
	          if (mutationRecordsList[0].attributeName === "style") {
	            $target.closest("[data-mutate]").attr("data-events", "mutate");
	            $target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger', [$target.closest("[data-mutate]")]);
	          }
	          break;

	        case "childList":
	          $target.closest("[data-mutate]").attr("data-events", "mutate");
	          $target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger', [$target.closest("[data-mutate]")]);
	          break;

	        default:
	          return false;
	        //nothing
	      }
	    };

	    if (nodes.length) {
	      //for each element that needs to listen for resizing, scrolling, or mutation add a single observer
	      for (var i = 0; i <= nodes.length - 1; i++) {
	        var elementObserver = new MutationObserver(listeningElementsMutation);
	        elementObserver.observe(nodes[i], { attributes: true, childList: true, characterData: false, subtree: true, attributeFilter: ["data-events", "style"] });
	      }
	    }
	  }

	  // ------------------------------------

	  // [PH]
	  // Foundation.CheckWatchers = checkWatchers;
	  Foundation.IHearYou = checkListeners;
	  // Foundation.ISeeYou = scrollListener;
	  // Foundation.IFeelYou = closemeListener;
	}(jQuery);

	// function domMutationObserver(debounce) {
	//   // !!! This is coming soon and needs more work; not active  !!! //
	//   var timer,
	//   nodes = document.querySelectorAll('[data-mutate]');
	//   //
	//   if (nodes.length) {
	//     // var MutationObserver = (function () {
	//     //   var prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];
	//     //   for (var i=0; i < prefixes.length; i++) {
	//     //     if (prefixes[i] + 'MutationObserver' in window) {
	//     //       return window[prefixes[i] + 'MutationObserver'];
	//     //     }
	//     //   }
	//     //   return false;
	//     // }());
	//
	//
	//     //for the body, we need to listen for all changes effecting the style and class attributes
	//     var bodyObserver = new MutationObserver(bodyMutation);
	//     bodyObserver.observe(document.body, { attributes: true, childList: true, characterData: false, subtree:true, attributeFilter:["style", "class"]});
	//
	//
	//     //body callback
	//     function bodyMutation(mutate) {
	//       //trigger all listening elements and signal a mutation event
	//       if (timer) { clearTimeout(timer); }
	//
	//       timer = setTimeout(function() {
	//         bodyObserver.disconnect();
	//         $('[data-mutate]').attr('data-events',"mutate");
	//       }, debounce || 150);
	//     }
	//   }
	// }
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	!function ($) {

	  // Default set of media queries
	  var defaultQueries = {
	    'default': 'only screen',
	    landscape: 'only screen and (orientation: landscape)',
	    portrait: 'only screen and (orientation: portrait)',
	    retina: 'only screen and (-webkit-min-device-pixel-ratio: 2),' + 'only screen and (min--moz-device-pixel-ratio: 2),' + 'only screen and (-o-min-device-pixel-ratio: 2/1),' + 'only screen and (min-device-pixel-ratio: 2),' + 'only screen and (min-resolution: 192dpi),' + 'only screen and (min-resolution: 2dppx)'
	  };

	  var MediaQuery = {
	    queries: [],

	    current: '',

	    /**
	     * Initializes the media query helper, by extracting the breakpoint list from the CSS and activating the breakpoint watcher.
	     * @function
	     * @private
	     */
	    _init: function _init() {
	      var self = this;
	      var extractedStyles = $('.foundation-mq').css('font-family');
	      var namedQueries;

	      namedQueries = parseStyleToObject(extractedStyles);

	      for (var key in namedQueries) {
	        if (namedQueries.hasOwnProperty(key)) {
	          self.queries.push({
	            name: key,
	            value: 'only screen and (min-width: ' + namedQueries[key] + ')'
	          });
	        }
	      }

	      this.current = this._getCurrentSize();

	      this._watcher();
	    },


	    /**
	     * Checks if the screen is at least as wide as a breakpoint.
	     * @function
	     * @param {String} size - Name of the breakpoint to check.
	     * @returns {Boolean} `true` if the breakpoint matches, `false` if it's smaller.
	     */
	    atLeast: function atLeast(size) {
	      var query = this.get(size);

	      if (query) {
	        return window.matchMedia(query).matches;
	      }

	      return false;
	    },


	    /**
	     * Checks if the screen matches to a breakpoint.
	     * @function
	     * @param {String} size - Name of the breakpoint to check, either 'small only' or 'small'. Omitting 'only' falls back to using atLeast() method.
	     * @returns {Boolean} `true` if the breakpoint matches, `false` if it does not.
	     */
	    is: function is(size) {
	      size = size.trim().split(' ');
	      if (size.length > 1 && size[1] === 'only') {
	        if (size[0] === this._getCurrentSize()) return true;
	      } else {
	        return this.atLeast(size[0]);
	      }
	      return false;
	    },


	    /**
	     * Gets the media query of a breakpoint.
	     * @function
	     * @param {String} size - Name of the breakpoint to get.
	     * @returns {String|null} - The media query of the breakpoint, or `null` if the breakpoint doesn't exist.
	     */
	    get: function get(size) {
	      for (var i in this.queries) {
	        if (this.queries.hasOwnProperty(i)) {
	          var query = this.queries[i];
	          if (size === query.name) return query.value;
	        }
	      }

	      return null;
	    },


	    /**
	     * Gets the current breakpoint name by testing every breakpoint and returning the last one to match (the biggest one).
	     * @function
	     * @private
	     * @returns {String} Name of the current breakpoint.
	     */
	    _getCurrentSize: function _getCurrentSize() {
	      var matched;

	      for (var i = 0; i < this.queries.length; i++) {
	        var query = this.queries[i];

	        if (window.matchMedia(query.value).matches) {
	          matched = query;
	        }
	      }

	      if ((typeof matched === 'undefined' ? 'undefined' : _typeof(matched)) === 'object') {
	        return matched.name;
	      } else {
	        return matched;
	      }
	    },


	    /**
	     * Activates the breakpoint watcher, which fires an event on the window whenever the breakpoint changes.
	     * @function
	     * @private
	     */
	    _watcher: function _watcher() {
	      var _this = this;

	      $(window).on('resize.zf.mediaquery', function () {
	        var newSize = _this._getCurrentSize(),
	            currentSize = _this.current;

	        if (newSize !== currentSize) {
	          // Change the current media query
	          _this.current = newSize;

	          // Broadcast the media query change on the window
	          $(window).trigger('changed.zf.mediaquery', [newSize, currentSize]);
	        }
	      });
	    }
	  };

	  Foundation.MediaQuery = MediaQuery;

	  // matchMedia() polyfill - Test a CSS media type/query in JS.
	  // Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license
	  window.matchMedia || (window.matchMedia = function () {
	    'use strict';

	    // For browsers that support matchMedium api such as IE 9 and webkit

	    var styleMedia = window.styleMedia || window.media;

	    // For those that don't support matchMedium
	    if (!styleMedia) {
	      var style = document.createElement('style'),
	          script = document.getElementsByTagName('script')[0],
	          info = null;

	      style.type = 'text/css';
	      style.id = 'matchmediajs-test';

	      script && script.parentNode && script.parentNode.insertBefore(style, script);

	      // 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers
	      info = 'getComputedStyle' in window && window.getComputedStyle(style, null) || style.currentStyle;

	      styleMedia = {
	        matchMedium: function matchMedium(media) {
	          var text = '@media ' + media + '{ #matchmediajs-test { width: 1px; } }';

	          // 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers
	          if (style.styleSheet) {
	            style.styleSheet.cssText = text;
	          } else {
	            style.textContent = text;
	          }

	          // Test if media query is true or false
	          return info.width === '1px';
	        }
	      };
	    }

	    return function (media) {
	      return {
	        matches: styleMedia.matchMedium(media || 'all'),
	        media: media || 'all'
	      };
	    };
	  }());

	  // Thank you: https://github.com/sindresorhus/query-string
	  function parseStyleToObject(str) {
	    var styleObject = {};

	    if (typeof str !== 'string') {
	      return styleObject;
	    }

	    str = str.trim().slice(1, -1); // browsers re-quote string style values

	    if (!str) {
	      return styleObject;
	    }

	    styleObject = str.split('&').reduce(function (ret, param) {
	      var parts = param.replace(/\+/g, ' ').split('=');
	      var key = parts[0];
	      var val = parts[1];
	      key = decodeURIComponent(key);

	      // missing `=` should be `null`:
	      // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
	      val = val === undefined ? null : decodeURIComponent(val);

	      if (!ret.hasOwnProperty(key)) {
	        ret[key] = val;
	      } else if (Array.isArray(ret[key])) {
	        ret[key].push(val);
	      } else {
	        ret[key] = [ret[key], val];
	      }
	      return ret;
	    }, {});

	    return styleObject;
	  }

	  Foundation.MediaQuery = MediaQuery;
	}(jQuery);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {/*******************************************
	 *                                         *
	 * This util was created by Marius Olbertz *
	 * Please thank Marius on GitHub /owlbertz *
	 * or the web http://www.mariusolbertz.de/ *
	 *                                         *
	 ******************************************/

	'use strict';

	!function ($) {

	  var keyCodes = {
	    9: 'TAB',
	    13: 'ENTER',
	    27: 'ESCAPE',
	    32: 'SPACE',
	    37: 'ARROW_LEFT',
	    38: 'ARROW_UP',
	    39: 'ARROW_RIGHT',
	    40: 'ARROW_DOWN'
	  };

	  var commands = {};

	  var Keyboard = {
	    keys: getKeyCodes(keyCodes),

	    /**
	     * Parses the (keyboard) event and returns a String that represents its key
	     * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE
	     * @param {Event} event - the event generated by the event handler
	     * @return String key - String that represents the key pressed
	     */
	    parseKey: function parseKey(event) {
	      var key = keyCodes[event.which || event.keyCode] || String.fromCharCode(event.which).toUpperCase();

	      // Remove un-printable characters, e.g. for `fromCharCode` calls for CTRL only events
	      key = key.replace(/\W+/, '');

	      if (event.shiftKey) key = 'SHIFT_' + key;
	      if (event.ctrlKey) key = 'CTRL_' + key;
	      if (event.altKey) key = 'ALT_' + key;

	      // Remove trailing underscore, in case only modifiers were used (e.g. only `CTRL_ALT`)
	      key = key.replace(/_$/, '');

	      return key;
	    },


	    /**
	     * Handles the given (keyboard) event
	     * @param {Event} event - the event generated by the event handler
	     * @param {String} component - Foundation component's name, e.g. Slider or Reveal
	     * @param {Objects} functions - collection of functions that are to be executed
	     */
	    handleKey: function handleKey(event, component, functions) {
	      var commandList = commands[component],
	          keyCode = this.parseKey(event),
	          cmds,
	          command,
	          fn;

	      if (!commandList) return console.warn('Component not defined!');

	      if (typeof commandList.ltr === 'undefined') {
	        // this component does not differentiate between ltr and rtl
	        cmds = commandList; // use plain list
	      } else {
	        // merge ltr and rtl: if document is rtl, rtl overwrites ltr and vice versa
	        if (Foundation.rtl()) cmds = $.extend({}, commandList.ltr, commandList.rtl);else cmds = $.extend({}, commandList.rtl, commandList.ltr);
	      }
	      command = cmds[keyCode];

	      fn = functions[command];
	      if (fn && typeof fn === 'function') {
	        // execute function  if exists
	        var returnValue = fn.apply();
	        if (functions.handled || typeof functions.handled === 'function') {
	          // execute function when event was handled
	          functions.handled(returnValue);
	        }
	      } else {
	        if (functions.unhandled || typeof functions.unhandled === 'function') {
	          // execute function when event was not handled
	          functions.unhandled();
	        }
	      }
	    },


	    /**
	     * Finds all focusable elements within the given `$element`
	     * @param {jQuery} $element - jQuery object to search within
	     * @return {jQuery} $focusable - all focusable elements within `$element`
	     */
	    findFocusable: function findFocusable($element) {
	      if (!$element) {
	        return false;
	      }
	      return $element.find('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]').filter(function () {
	        if (!$(this).is(':visible') || $(this).attr('tabindex') < 0) {
	          return false;
	        } //only have visible elements and those that have a tabindex greater or equal 0
	        return true;
	      });
	    },


	    /**
	     * Returns the component name name
	     * @param {Object} component - Foundation component, e.g. Slider or Reveal
	     * @return String componentName
	     */

	    register: function register(componentName, cmds) {
	      commands[componentName] = cmds;
	    },


	    /**
	     * Traps the focus in the given element.
	     * @param  {jQuery} $element  jQuery object to trap the foucs into.
	     */
	    trapFocus: function trapFocus($element) {
	      var $focusable = Foundation.Keyboard.findFocusable($element),
	          $firstFocusable = $focusable.eq(0),
	          $lastFocusable = $focusable.eq(-1);

	      $element.on('keydown.zf.trapfocus', function (event) {
	        if (event.target === $lastFocusable[0] && Foundation.Keyboard.parseKey(event) === 'TAB') {
	          event.preventDefault();
	          $firstFocusable.focus();
	        } else if (event.target === $firstFocusable[0] && Foundation.Keyboard.parseKey(event) === 'SHIFT_TAB') {
	          event.preventDefault();
	          $lastFocusable.focus();
	        }
	      });
	    },

	    /**
	     * Releases the trapped focus from the given element.
	     * @param  {jQuery} $element  jQuery object to release the focus for.
	     */
	    releaseFocus: function releaseFocus($element) {
	      $element.off('keydown.zf.trapfocus');
	    }
	  };

	  /*
	   * Constants for easier comparing.
	   * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE
	   */
	  function getKeyCodes(kcs) {
	    var k = {};
	    for (var kc in kcs) {
	      k[kcs[kc]] = kcs[kc];
	    }return k;
	  }

	  Foundation.Keyboard = Keyboard;
	}(jQuery);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {'use strict';

	!function ($) {

	  /**
	   * Motion module.
	   * @module foundation.motion
	   */

	  var initClasses = ['mui-enter', 'mui-leave'];
	  var activeClasses = ['mui-enter-active', 'mui-leave-active'];

	  var Motion = {
	    animateIn: function animateIn(element, animation, cb) {
	      animate(true, element, animation, cb);
	    },

	    animateOut: function animateOut(element, animation, cb) {
	      animate(false, element, animation, cb);
	    }
	  };

	  function Move(duration, elem, fn) {
	    var anim,
	        prog,
	        start = null;
	    // console.log('called');

	    if (duration === 0) {
	      fn.apply(elem);
	      elem.trigger('finished.zf.animate', [elem]).triggerHandler('finished.zf.animate', [elem]);
	      return;
	    }

	    function move(ts) {
	      if (!start) start = ts;
	      // console.log(start, ts);
	      prog = ts - start;
	      fn.apply(elem);

	      if (prog < duration) {
	        anim = window.requestAnimationFrame(move, elem);
	      } else {
	        window.cancelAnimationFrame(anim);
	        elem.trigger('finished.zf.animate', [elem]).triggerHandler('finished.zf.animate', [elem]);
	      }
	    }
	    anim = window.requestAnimationFrame(move);
	  }

	  /**
	   * Animates an element in or out using a CSS transition class.
	   * @function
	   * @private
	   * @param {Boolean} isIn - Defines if the animation is in or out.
	   * @param {Object} element - jQuery or HTML object to animate.
	   * @param {String} animation - CSS class to use.
	   * @param {Function} cb - Callback to run when animation is finished.
	   */
	  function animate(isIn, element, animation, cb) {
	    element = $(element).eq(0);

	    if (!element.length) return;

	    var initClass = isIn ? initClasses[0] : initClasses[1];
	    var activeClass = isIn ? activeClasses[0] : activeClasses[1];

	    // Set up the animation
	    reset();

	    element.addClass(animation).css('transition', 'none');

	    requestAnimationFrame(function () {
	      element.addClass(initClass);
	      if (isIn) element.show();
	    });

	    // Start the animation
	    requestAnimationFrame(function () {
	      element[0].offsetWidth;
	      element.css('transition', '').addClass(activeClass);
	    });

	    // Clean up the animation when it finishes
	    element.one(Foundation.transitionend(element), finish);

	    // Hides the element (for out animations), resets the element, and runs a callback
	    function finish() {
	      if (!isIn) element.hide();
	      reset();
	      if (cb) cb.apply(element);
	    }

	    // Resets transitions and removes motion-specific classes
	    function reset() {
	      element[0].style.transitionDuration = 0;
	      element.removeClass(initClass + ' ' + activeClass + ' ' + animation);
	    }
	  }

	  Foundation.Move = Move;
	  Foundation.Motion = Motion;
	}(jQuery);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/* =========================================================
	 * foundation-datepicker.js
	 * Copyright 2015 Peter Beno, najlepsiwebdesigner@gmail.com, @benopeter
	 * project website http://foundation-datepicker.peterbeno.com
	 * ========================================================= */
	jQuery(function ($) {

	    function UTCDate() {
	        return new Date(Date.UTC.apply(Date, arguments));
	    }

	    function UTCToday() {
	        var today = new Date();
	        return UTCDate(today.getUTCFullYear(), today.getUTCMonth(), today.getUTCDate());
	    }

	    var Datepicker = function Datepicker(element, options) {
	        var that = this;

	        this.element = $(element);
	        this.autoShow = options.autoShow == undefined ? true : options.autoShow;
	        this.appendTo = options.appendTo || 'body';
	        this.closeButton = options.closeButton;
	        this.language = options.language || this.element.data('date-language') || "en";
	        this.language = this.language in dates ? this.language : this.language.split('-')[0]; //Check if "de-DE" style date is available, if not language should fallback to 2 letter code eg "de"
	        this.language = this.language in dates ? this.language : "en";
	        this.isRTL = dates[this.language].rtl || false;
	        this.format = DPGlobal.parseFormat(options.format || this.element.data('date-format') || dates[this.language].format || 'mm/dd/yyyy');
	        this.formatText = options.format || this.element.data('date-format') || dates[this.language].format || 'mm/dd/yyyy';
	        this.isInline = false;
	        this.isInput = this.element.is('input');
	        this.component = this.element.is('.date') ? this.element.find('.prefix, .postfix') : false;
	        this.hasInput = this.component && this.element.find('input').length;
	        this.disableDblClickSelection = options.disableDblClickSelection;
	        this.onRender = options.onRender || function () {};
	        if (this.component && this.component.length === 0) {
	            this.component = false;
	        }
	        this.linkField = options.linkField || this.element.data('link-field') || false;
	        this.linkFormat = DPGlobal.parseFormat(options.linkFormat || this.element.data('link-format') || 'yyyy-mm-dd hh:ii:ss');
	        this.minuteStep = options.minuteStep || this.element.data('minute-step') || 5;
	        this.pickerPosition = options.pickerPosition || this.element.data('picker-position') || 'bottom-right';
	        this.initialDate = options.initialDate || null;
	        this.faCSSprefix = options.faCSSprefix || 'fa';
	        this.leftArrow = options.leftArrow || '<i class="' + this.faCSSprefix + ' ' + this.faCSSprefix + '-chevron-left fi-arrow-left"/>';
	        this.rightArrow = options.rightArrow || '<i class="' + this.faCSSprefix + ' ' + this.faCSSprefix + '-chevron-right fi-arrow-right"/>';
	        this.closeIcon = options.closeIcon || '<i class="' + this.faCSSprefix + ' ' + this.faCSSprefix + '-remove ' + this.faCSSprefix + '-times fi-x"></i>';

	        this.minView = 0;
	        if ('minView' in options) {
	            this.minView = options.minView;
	        } else if ('minView' in this.element.data()) {
	            this.minView = this.element.data('min-view');
	        }
	        this.minView = DPGlobal.convertViewMode(this.minView);

	        this.maxView = DPGlobal.modes.length - 1;
	        if ('maxView' in options) {
	            this.maxView = options.maxView;
	        } else if ('maxView' in this.element.data()) {
	            this.maxView = this.element.data('max-view');
	        }
	        this.maxView = DPGlobal.convertViewMode(this.maxView);

	        this.startViewMode = 'month';
	        if ('startView' in options) {
	            this.startViewMode = options.startView;
	        } else if ('startView' in this.element.data()) {
	            this.startViewMode = this.element.data('start-view');
	        }
	        this.startViewMode = DPGlobal.convertViewMode(this.startViewMode);
	        this.viewMode = this.startViewMode;

	        if (!('minView' in options) && !('maxView' in options) && !this.element.data('min-view') && !this.element.data('max-view')) {
	            this.pickTime = false;
	            if ('pickTime' in options) {
	                this.pickTime = options.pickTime;
	            }
	            if (this.pickTime == true) {
	                this.minView = 0;
	                this.maxView = 4;
	            } else {
	                this.minView = 2;
	                this.maxView = 4;
	            }
	        }

	        this.forceParse = true;
	        if ('forceParse' in options) {
	            this.forceParse = options.forceParse;
	        } else if ('dateForceParse' in this.element.data()) {
	            this.forceParse = this.element.data('date-force-parse');
	        }

	        this.picker = $(DPGlobal.template(this.leftArrow, this.rightArrow, this.closeIcon)).appendTo(this.isInline ? this.element : this.appendTo).on({
	            click: $.proxy(this.click, this),
	            mousedown: $.proxy(this.mousedown, this)
	        });
	        if (this.closeButton) {
	            this.picker.find('a.datepicker-close').show();
	        } else {
	            this.picker.find('a.datepicker-close').hide();
	        }

	        if (this.isInline) {
	            this.picker.addClass('datepicker-inline');
	        } else {
	            this.picker.addClass('datepicker-dropdown dropdown-menu');
	        }
	        if (this.isRTL) {
	            this.picker.addClass('datepicker-rtl');

	            this.picker.find('.date-switch').each(function () {
	                $(this).parent().prepend($(this).siblings('.next'));
	                $(this).parent().append($(this).siblings('.prev'));
	            });
	            this.picker.find('.prev, .next').toggleClass('prev next');
	        }
	        $(document).on('mousedown', function (e) {
	            if (that.isInput && e.target === that.element[0]) {
	                return;
	            }

	            // Clicked outside the datepicker, hide it
	            if ($(e.target).closest('.datepicker.datepicker-inline, .datepicker.datepicker-dropdown').length === 0) {
	                that.hide();
	            }
	        });

	        this.autoclose = true;
	        if ('autoclose' in options) {
	            this.autoclose = options.autoclose;
	        } else if ('dateAutoclose' in this.element.data()) {
	            this.autoclose = this.element.data('date-autoclose');
	        }

	        this.keyboardNavigation = true;
	        if ('keyboardNavigation' in options) {
	            this.keyboardNavigation = options.keyboardNavigation;
	        } else if ('dateKeyboardNavigation' in this.element.data()) {
	            this.keyboardNavigation = this.element.data('date-keyboard-navigation');
	        }

	        this.todayBtn = options.todayBtn || this.element.data('date-today-btn') || false;
	        this.todayHighlight = options.todayHighlight || this.element.data('date-today-highlight') || false;

	        this.calendarWeeks = false;
	        if ('calendarWeeks' in options) {
	            this.calendarWeeks = options.calendarWeeks;
	        } else if ('dateCalendarWeeks' in this.element.data()) {
	            this.calendarWeeks = this.element.data('date-calendar-weeks');
	        }
	        if (this.calendarWeeks) this.picker.find('tfoot th.today').attr('colspan', function (i, val) {
	            return parseInt(val) + 1;
	        });

	        this.weekStart = (options.weekStart || this.element.data('date-weekstart') || dates[this.language].weekStart || 0) % 7;
	        this.weekEnd = (this.weekStart + 6) % 7;
	        this.startDate = -Infinity;
	        this.endDate = Infinity;
	        this.daysOfWeekDisabled = [];
	        this.datesDisabled = [];
	        this.setStartDate(options.startDate || this.element.data('date-startdate'));
	        this.setEndDate(options.endDate || this.element.data('date-enddate'));
	        this.setDaysOfWeekDisabled(options.daysOfWeekDisabled || this.element.data('date-days-of-week-disabled'));
	        this.setDatesDisabled(options.datesDisabled || this.element.data('dates-disabled'));

	        this.fillDow();
	        this.fillMonths();
	        this.update();

	        this.showMode();

	        if (this.isInline) {
	            this.show();
	        }

	        this._attachEvents();
	    };

	    Datepicker.prototype = {
	        constructor: Datepicker,

	        _events: [],
	        _attachEvents: function _attachEvents() {
	            this._detachEvents();
	            if (this.isInput) {
	                // single input
	                if (!this.keyboardNavigation) {
	                    this._events = [[this.element, {
	                        focus: this.autoShow ? $.proxy(this.show, this) : function () {}
	                    }]];
	                } else {
	                    this._events = [[this.element, {
	                        focus: this.autoShow ? $.proxy(this.show, this) : function () {},
	                        keyup: $.proxy(this.update, this),
	                        keydown: $.proxy(this.keydown, this),
	                        click: this.element.attr('readonly') ? $.proxy(this.show, this) : function () {}
	                    }]];
	                }
	            } else if (this.component && this.hasInput) {
	                // component: input + button
	                this._events = [
	                // For components that are not readonly, allow keyboard nav
	                [this.element.find('input'), {
	                    focus: this.autoShow ? $.proxy(this.show, this) : function () {},
	                    keyup: $.proxy(this.update, this),
	                    keydown: $.proxy(this.keydown, this)
	                }], [this.component, {
	                    click: $.proxy(this.show, this)
	                }]];
	            } else if (this.element.is('div')) {
	                // inline datepicker
	                this.isInline = true;
	            } else {
	                this._events = [[this.element, {
	                    click: $.proxy(this.show, this)
	                }]];
	            }

	            if (this.disableDblClickSelection) {
	                this._events[this._events.length] = [this.element, {
	                    dblclick: function dblclick(e) {
	                        e.preventDefault();
	                        e.stopPropagation();
	                        $(this).blur();
	                    }
	                }];
	            }

	            for (var i = 0, el, ev; i < this._events.length; i++) {
	                el = this._events[i][0];
	                ev = this._events[i][1];
	                el.on(ev);
	            }
	        },
	        _detachEvents: function _detachEvents() {
	            for (var i = 0, el, ev; i < this._events.length; i++) {
	                el = this._events[i][0];
	                ev = this._events[i][1];
	                el.off(ev);
	            }
	            this._events = [];
	        },

	        show: function show(e) {
	            this.picker.show();
	            this.height = this.component ? this.component.outerHeight() : this.element.outerHeight();
	            this.update();
	            this.place();
	            $(window).on('resize', $.proxy(this.place, this));
	            if (e) {
	                e.stopPropagation();
	                e.preventDefault();
	            }
	            this.element.trigger({
	                type: 'show',
	                date: this.date
	            });
	        },

	        hide: function hide(e) {
	            if (this.isInline) return;
	            if (!this.picker.is(':visible')) return;
	            this.picker.hide();
	            $(window).off('resize', this.place);
	            this.viewMode = this.startViewMode;
	            this.showMode();
	            if (!this.isInput) {
	                $(document).off('mousedown', this.hide);
	            }

	            if (this.forceParse && (this.isInput && this.element.val() || this.hasInput && this.element.find('input').val())) this.setValue();
	            this.element.trigger({
	                type: 'hide',
	                date: this.date
	            });
	        },

	        remove: function remove() {
	            this._detachEvents();
	            this.picker.remove();
	            delete this.element.data().datepicker;
	        },

	        getDate: function getDate() {
	            var d = this.getUTCDate();
	            return new Date(d.getTime() + d.getTimezoneOffset() * 60000);
	        },

	        getUTCDate: function getUTCDate() {
	            return this.date;
	        },

	        setDate: function setDate(d) {
	            this.setUTCDate(new Date(d.getTime() - d.getTimezoneOffset() * 60000));
	        },

	        setUTCDate: function setUTCDate(d) {
	            this.date = d;
	            this.setValue();
	        },

	        setValue: function setValue() {
	            var formatted = this.getFormattedDate();
	            if (!this.isInput) {
	                if (this.component) {
	                    this.element.find('input').val(formatted);
	                }
	                this.element.data('date', formatted);
	            } else {
	                this.element.val(formatted);
	            }
	        },

	        getFormattedDate: function getFormattedDate(format) {
	            if (format === undefined) format = this.format;
	            return DPGlobal.formatDate(this.date, format, this.language);
	        },

	        setStartDate: function setStartDate(startDate) {
	            this.startDate = startDate || -Infinity;
	            if (this.startDate !== -Infinity) {
	                this.startDate = DPGlobal.parseDate(this.startDate, this.format, this.language);
	            }
	            this.update();
	            this.updateNavArrows();
	        },

	        setEndDate: function setEndDate(endDate) {
	            this.endDate = endDate || Infinity;
	            if (this.endDate !== Infinity) {
	                this.endDate = DPGlobal.parseDate(this.endDate, this.format, this.language);
	            }
	            this.update();
	            this.updateNavArrows();
	        },

	        setDaysOfWeekDisabled: function setDaysOfWeekDisabled(daysOfWeekDisabled) {
	            this.daysOfWeekDisabled = daysOfWeekDisabled || [];
	            if (!$.isArray(this.daysOfWeekDisabled)) {
	                this.daysOfWeekDisabled = this.daysOfWeekDisabled.split(/,\s*/);
	            }
	            this.daysOfWeekDisabled = $.map(this.daysOfWeekDisabled, function (d) {
	                return parseInt(d, 10);
	            });
	            this.update();
	            this.updateNavArrows();
	        },

	        setDatesDisabled: function setDatesDisabled(datesDisabled) {
	            this.datesDisabled = datesDisabled || [];
	            if (!$.isArray(this.datesDisabled)) {
	                this.datesDisabled = this.datesDisabled.split(/,\s*/);
	            }
	            this.datesDisabled = $.map(this.datesDisabled, function (d) {
	                return DPGlobal.parseDate(d, this.format, this.language).valueOf();
	            });
	            this.update();
	            this.updateNavArrows();
	        },

	        place: function place() {
	            if (this.isInline) return;
	            var zIndex = parseInt(this.element.parents().filter(function () {
	                return $(this).css('z-index') != 'auto';
	            }).first().css('z-index')) + 10;
	            var textbox = this.component ? this.component : this.element;
	            var offset = textbox.offset();
	            var height = textbox.outerHeight() + parseInt(textbox.css('margin-top'));
	            var width = textbox.outerWidth() + parseInt(textbox.css('margin-left'));
	            var fullOffsetTop = offset.top + height;
	            var offsetLeft = offset.left;
	            this.picker.removeClass('datepicker-top datepicker-bottom');
	            // if the datepicker is going to be below the window, show it on top of the input
	            if (fullOffsetTop + this.picker.outerHeight() >= $(window).scrollTop() + $(window).height()) {
	                fullOffsetTop = offset.top - this.picker.outerHeight();
	                this.picker.addClass('datepicker-top');
	            } else {
	                this.picker.addClass('datepicker-bottom');
	            }

	            // if the datepicker is going to go past the right side of the window, we want
	            // to set the right position so the datepicker lines up with the textbox
	            if (offset.left + this.picker.width() >= $(window).width()) {
	                offsetLeft = offset.left + width - this.picker.width();
	            }
	            this.picker.css({
	                top: fullOffsetTop,
	                left: offsetLeft,
	                zIndex: zIndex
	            });
	        },

	        update: function update() {
	            var date,
	                fromArgs = false;
	            var currentVal = this.isInput ? this.element.val() : this.element.data('date') || this.element.find('input').val();
	            if (arguments && arguments.length && (typeof arguments[0] === 'string' || arguments[0] instanceof Date)) {
	                date = arguments[0];
	                fromArgs = true;
	            } else if (!currentVal && this.initialDate != null) {
	                // If value is not set, set it to the initialDate 
	                date = this.initialDate;
	            } else {
	                date = this.isInput ? this.element.val() : this.element.data('date') || this.element.find('input').val();
	            }

	            // if (date && date.length > this.formatText.length) {
	            //         $(this.picker).addClass('is-invalid')
	            //         $(this.element).addClass('is-invalid-input')
	            //         return;
	            // } else {
	            //     $(this.picker).removeClass('is-invalid')
	            //     $(this.element).removeClass('is-invalid-input')

	            // }

	            this.date = DPGlobal.parseDate(date, this.format, this.language);

	            if (fromArgs || this.initialDate != null) this.setValue();

	            if (this.date < this.startDate) {
	                this.viewDate = new Date(this.startDate.valueOf());
	            } else if (this.date > this.endDate) {
	                this.viewDate = new Date(this.endDate.valueOf());
	            } else {
	                this.viewDate = new Date(this.date.valueOf());
	            }
	            this.fill();
	        },

	        fillDow: function fillDow() {
	            var dowCnt = this.weekStart,
	                html = '<tr>';
	            if (this.calendarWeeks) {
	                var cell = '<th class="cw">&nbsp;</th>';
	                html += cell;
	                this.picker.find('.datepicker-days thead tr:first-child').prepend(cell);
	            }
	            while (dowCnt < this.weekStart + 7) {
	                html += '<th class="dow">' + dates[this.language].daysMin[dowCnt++ % 7] + '</th>';
	            }
	            html += '</tr>';
	            this.picker.find('.datepicker-days thead').append(html);
	        },

	        fillMonths: function fillMonths() {
	            var html = '',
	                i = 0;
	            while (i < 12) {
	                html += '<span class="month">' + dates[this.language].monthsShort[i++] + '</span>';
	            }
	            this.picker.find('.datepicker-months td').html(html);
	        },

	        fill: function fill() {
	            if (this.date == null || this.viewDate == null) {
	                return;
	            }

	            var d = new Date(this.viewDate.valueOf()),
	                year = d.getUTCFullYear(),
	                month = d.getUTCMonth(),
	                dayMonth = d.getUTCDate(),
	                hours = d.getUTCHours(),
	                minutes = d.getUTCMinutes(),
	                startYear = this.startDate !== -Infinity ? this.startDate.getUTCFullYear() : -Infinity,
	                startMonth = this.startDate !== -Infinity ? this.startDate.getUTCMonth() : -Infinity,
	                endYear = this.endDate !== Infinity ? this.endDate.getUTCFullYear() : Infinity,
	                endMonth = this.endDate !== Infinity ? this.endDate.getUTCMonth() : Infinity,
	                currentDate = this.date && UTCDate(this.date.getUTCFullYear(), this.date.getUTCMonth(), this.date.getUTCDate()).valueOf(),
	                today = new Date(),
	                titleFormat = dates[this.language].titleFormat || dates['en'].titleFormat;
	            // this.picker.find('.datepicker-days thead th.date-switch')
	            // 			.text(DPGlobal.formatDate(new UTCDate(year, month), titleFormat, this.language));

	            this.picker.find('.datepicker-days thead th:eq(1)').text(dates[this.language].months[month] + ' ' + year);
	            this.picker.find('.datepicker-hours thead th:eq(1)').text(dayMonth + ' ' + dates[this.language].months[month] + ' ' + year);
	            this.picker.find('.datepicker-minutes thead th:eq(1)').text(dayMonth + ' ' + dates[this.language].months[month] + ' ' + year);

	            this.picker.find('tfoot th.today').text(dates[this.language].today).toggle(this.todayBtn !== false);
	            this.updateNavArrows();
	            this.fillMonths();
	            var prevMonth = UTCDate(year, month - 1, 28, 0, 0, 0, 0),
	                day = DPGlobal.getDaysInMonth(prevMonth.getUTCFullYear(), prevMonth.getUTCMonth());
	            prevMonth.setUTCDate(day);
	            prevMonth.setUTCDate(day - (prevMonth.getUTCDay() - this.weekStart + 7) % 7);
	            var nextMonth = new Date(prevMonth.valueOf());
	            nextMonth.setUTCDate(nextMonth.getUTCDate() + 42);
	            nextMonth = nextMonth.valueOf();
	            var html = [];
	            var clsName;
	            while (prevMonth.valueOf() < nextMonth) {
	                if (prevMonth.getUTCDay() == this.weekStart) {
	                    html.push('<tr>');
	                    if (this.calendarWeeks) {
	                        // adapted from https://github.com/timrwood/moment/blob/master/moment.js#L128
	                        var a = new Date(prevMonth.getUTCFullYear(), prevMonth.getUTCMonth(), prevMonth.getUTCDate() - prevMonth.getDay() + 10 - (this.weekStart && this.weekStart % 7 < 5 && 7)),
	                            b = new Date(a.getFullYear(), 0, 4),
	                            calWeek = ~~((a - b) / 864e5 / 7 + 1.5);
	                        html.push('<td class="cw">' + calWeek + '</td>');
	                    }
	                }
	                clsName = ' ' + this.onRender(prevMonth) + ' ';
	                if (prevMonth.getUTCFullYear() < year || prevMonth.getUTCFullYear() == year && prevMonth.getUTCMonth() < month) {
	                    clsName += ' old';
	                } else if (prevMonth.getUTCFullYear() > year || prevMonth.getUTCFullYear() == year && prevMonth.getUTCMonth() > month) {
	                    clsName += ' new';
	                }
	                // Compare internal UTC date with local today, not UTC today
	                if (this.todayHighlight && prevMonth.getUTCFullYear() == today.getFullYear() && prevMonth.getUTCMonth() == today.getMonth() && prevMonth.getUTCDate() == today.getDate()) {
	                    clsName += ' today';
	                }
	                if (currentDate && prevMonth.valueOf() == currentDate) {
	                    clsName += ' active';
	                }
	                if (prevMonth.valueOf() < this.startDate || prevMonth.valueOf() > this.endDate || $.inArray(prevMonth.getUTCDay(), this.daysOfWeekDisabled) !== -1 || $.inArray(prevMonth.valueOf(), this.datesDisabled) !== -1) {
	                    clsName += ' disabled';
	                }
	                html.push('<td class="day' + clsName + '">' + prevMonth.getUTCDate() + '</td>');
	                if (prevMonth.getUTCDay() == this.weekEnd) {
	                    html.push('</tr>');
	                }
	                prevMonth.setUTCDate(prevMonth.getUTCDate() + 1);
	            }
	            this.picker.find('.datepicker-days tbody').empty().append(html.join(''));

	            html = [];
	            for (var i = 0; i < 24; i++) {
	                var actual = UTCDate(year, month, dayMonth, i);
	                clsName = '';
	                // We want the previous hour for the startDate
	                if (actual.valueOf() + 3600000 < this.startDate || actual.valueOf() > this.endDate) {
	                    clsName += ' disabled';
	                } else if (hours == i) {
	                    clsName += ' active';
	                }
	                html.push('<span class="hour' + clsName + '">' + i + ':00</span>');
	            }
	            this.picker.find('.datepicker-hours td').html(html.join(''));

	            html = [];
	            for (var i = 0; i < 60; i += this.minuteStep) {
	                var actual = UTCDate(year, month, dayMonth, hours, i);
	                clsName = '';
	                if (actual.valueOf() < this.startDate || actual.valueOf() > this.endDate) {
	                    clsName += ' disabled';
	                } else if (Math.floor(minutes / this.minuteStep) == Math.floor(i / this.minuteStep)) {
	                    clsName += ' active';
	                }
	                html.push('<span class="minute' + clsName + '">' + hours + ':' + (i < 10 ? '0' + i : i) + '</span>');
	            }
	            this.picker.find('.datepicker-minutes td').html(html.join(''));

	            var currentYear = this.date && this.date.getUTCFullYear();
	            var months = this.picker.find('.datepicker-months').find('th:eq(1)').text(year).end().find('span').removeClass('active');
	            if (currentYear && currentYear == year) {
	                months.eq(this.date.getUTCMonth()).addClass('active');
	            }
	            if (year < startYear || year > endYear) {
	                months.addClass('disabled');
	            }
	            if (year == startYear) {
	                months.slice(0, startMonth).addClass('disabled');
	            }
	            if (year == endYear) {
	                months.slice(endMonth + 1).addClass('disabled');
	            }

	            html = '';
	            year = parseInt(year / 10, 10) * 10;
	            var yearCont = this.picker.find('.datepicker-years').find('th:eq(1)').text(year + '-' + (year + 9)).end().find('td');
	            year -= 1;
	            for (var i = -1; i < 11; i++) {
	                html += '<span class="year' + (i == -1 || i == 10 ? ' old' : '') + (currentYear == year ? ' active' : '') + (year < startYear || year > endYear ? ' disabled' : '') + '">' + year + '</span>';
	                year += 1;
	            }
	            yearCont.html(html);
	        },

	        updateNavArrows: function updateNavArrows() {
	            var d = new Date(this.viewDate),
	                year = d.getUTCFullYear(),
	                month = d.getUTCMonth(),
	                day = d.getUTCDate(),
	                hour = d.getUTCHours();
	            switch (this.viewMode) {
	                case 0:
	                    if (this.startDate !== -Infinity && year <= this.startDate.getUTCFullYear() && month <= this.startDate.getUTCMonth() && day <= this.startDate.getUTCDate() && hour <= this.startDate.getUTCHours()) {
	                        this.picker.find('.prev').css({
	                            visibility: 'hidden'
	                        });
	                    } else {
	                        this.picker.find('.prev').css({
	                            visibility: 'visible'
	                        });
	                    }
	                    if (this.endDate !== Infinity && year >= this.endDate.getUTCFullYear() && month >= this.endDate.getUTCMonth() && day >= this.endDate.getUTCDate() && hour >= this.endDate.getUTCHours()) {
	                        this.picker.find('.next').css({
	                            visibility: 'hidden'
	                        });
	                    } else {
	                        this.picker.find('.next').css({
	                            visibility: 'visible'
	                        });
	                    }
	                    break;
	                case 1:
	                    if (this.startDate !== -Infinity && year <= this.startDate.getUTCFullYear() && month <= this.startDate.getUTCMonth() && day <= this.startDate.getUTCDate()) {
	                        this.picker.find('.prev').css({
	                            visibility: 'hidden'
	                        });
	                    } else {
	                        this.picker.find('.prev').css({
	                            visibility: 'visible'
	                        });
	                    }
	                    if (this.endDate !== Infinity && year >= this.endDate.getUTCFullYear() && month >= this.endDate.getUTCMonth() && day >= this.endDate.getUTCDate()) {
	                        this.picker.find('.next').css({
	                            visibility: 'hidden'
	                        });
	                    } else {
	                        this.picker.find('.next').css({
	                            visibility: 'visible'
	                        });
	                    }
	                    break;
	                case 2:
	                    if (this.startDate !== -Infinity && year <= this.startDate.getUTCFullYear() && month <= this.startDate.getUTCMonth()) {
	                        this.picker.find('.prev').css({
	                            visibility: 'hidden'
	                        });
	                    } else {
	                        this.picker.find('.prev').css({
	                            visibility: 'visible'
	                        });
	                    }
	                    if (this.endDate !== Infinity && year >= this.endDate.getUTCFullYear() && month >= this.endDate.getUTCMonth()) {
	                        this.picker.find('.next').css({
	                            visibility: 'hidden'
	                        });
	                    } else {
	                        this.picker.find('.next').css({
	                            visibility: 'visible'
	                        });
	                    }
	                    break;
	                case 3:
	                case 4:
	                    if (this.startDate !== -Infinity && year <= this.startDate.getUTCFullYear()) {
	                        this.picker.find('.prev').css({
	                            visibility: 'hidden'
	                        });
	                    } else {
	                        this.picker.find('.prev').css({
	                            visibility: 'visible'
	                        });
	                    }
	                    if (this.endDate !== Infinity && year >= this.endDate.getUTCFullYear()) {
	                        this.picker.find('.next').css({
	                            visibility: 'hidden'
	                        });
	                    } else {
	                        this.picker.find('.next').css({
	                            visibility: 'visible'
	                        });
	                    }
	                    break;
	            }
	        },

	        click: function click(e) {
	            e.stopPropagation();
	            e.preventDefault();

	            if ($(e.target).hasClass('datepicker-close') || $(e.target).parent().hasClass('datepicker-close')) {
	                this.hide();
	            }

	            var target = $(e.target).closest('span, td, th');
	            if (target.length == 1) {
	                if (target.is('.disabled')) {
	                    this.element.trigger({
	                        type: 'outOfRange',
	                        date: this.viewDate,
	                        startDate: this.startDate,
	                        endDate: this.endDate
	                    });
	                    return;
	                }

	                switch (target[0].nodeName.toLowerCase()) {
	                    case 'th':
	                        switch (target[0].className) {
	                            case 'date-switch':
	                                this.showMode(1);
	                                break;
	                            case 'prev':
	                            case 'next':
	                                var dir = DPGlobal.modes[this.viewMode].navStep * (target[0].className == 'prev' ? -1 : 1);
	                                switch (this.viewMode) {
	                                    case 0:
	                                        this.viewDate = this.moveHour(this.viewDate, dir);
	                                        break;
	                                    case 1:
	                                        this.viewDate = this.moveDate(this.viewDate, dir);
	                                        break;
	                                    case 2:
	                                        this.viewDate = this.moveMonth(this.viewDate, dir);
	                                        break;
	                                    case 3:
	                                    case 4:
	                                        this.viewDate = this.moveYear(this.viewDate, dir);
	                                        break;
	                                }
	                                this.fill();
	                                break;
	                            case 'today':
	                                var date = new Date();
	                                date = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds());

	                                this.viewMode = this.startViewMode;
	                                this.showMode(0);
	                                this._setDate(date);
	                                break;
	                        }
	                        break;
	                    case 'span':
	                        if (!target.is('.disabled')) {
	                            if (target.is('.month')) {
	                                if (this.minView === 3) {
	                                    var month = target.parent().find('span').index(target) || 0;
	                                    var year = this.viewDate.getUTCFullYear(),
	                                        day = 1,
	                                        hours = this.viewDate.getUTCHours(),
	                                        minutes = this.viewDate.getUTCMinutes(),
	                                        seconds = this.viewDate.getUTCSeconds();
	                                    this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));
	                                } else {
	                                    this.viewDate.setUTCDate(1);
	                                    var month = target.parent().find('span').index(target);
	                                    this.viewDate.setUTCMonth(month);
	                                    this.element.trigger({
	                                        type: 'changeMonth',
	                                        date: this.viewDate
	                                    });
	                                }
	                            } else if (target.is('.year')) {
	                                if (this.minView === 4) {
	                                    var year = parseInt(target.text(), 10) || 0;
	                                    var month = 0,
	                                        day = 1,
	                                        hours = this.viewDate.getUTCHours(),
	                                        minutes = this.viewDate.getUTCMinutes(),
	                                        seconds = this.viewDate.getUTCSeconds();
	                                    this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));
	                                } else {
	                                    this.viewDate.setUTCDate(1);
	                                    var year = parseInt(target.text(), 10) || 0;
	                                    this.viewDate.setUTCFullYear(year);
	                                    this.element.trigger({
	                                        type: 'changeYear',
	                                        date: this.viewDate
	                                    });
	                                }
	                            } else if (target.is('.hour')) {
	                                var hours = parseInt(target.text(), 10) || 0;
	                                var year = this.viewDate.getUTCFullYear(),
	                                    month = this.viewDate.getUTCMonth(),
	                                    day = this.viewDate.getUTCDate(),
	                                    minutes = this.viewDate.getUTCMinutes(),
	                                    seconds = this.viewDate.getUTCSeconds();
	                                this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));
	                            } else if (target.is('.minute')) {
	                                var minutes = parseInt(target.text().substr(target.text().indexOf(':') + 1), 10) || 0;
	                                var year = this.viewDate.getUTCFullYear(),
	                                    month = this.viewDate.getUTCMonth(),
	                                    day = this.viewDate.getUTCDate(),
	                                    hours = this.viewDate.getUTCHours(),
	                                    seconds = this.viewDate.getUTCSeconds();
	                                this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));
	                            }

	                            if (this.viewMode != 0) {

	                                var oldViewMode = this.viewMode;
	                                this.showMode(-1);
	                                this.fill();
	                                if (oldViewMode == this.viewMode && this.autoclose) {
	                                    this.hide();
	                                }
	                            } else {
	                                this.fill();
	                                if (this.autoclose) {
	                                    this.hide();
	                                }
	                            }
	                        }
	                        break;
	                    case 'td':

	                        if (target.is('.day') && !target.is('.disabled')) {
	                            var day = parseInt(target.text(), 10) || 1;
	                            var year = this.viewDate.getUTCFullYear(),
	                                month = this.viewDate.getUTCMonth(),
	                                hours = this.viewDate.getUTCHours(),
	                                minutes = this.viewDate.getUTCMinutes(),
	                                seconds = this.viewDate.getUTCSeconds();
	                            if (target.is('.old')) {
	                                if (month === 0) {
	                                    month = 11;
	                                    year -= 1;
	                                } else {
	                                    month -= 1;
	                                }
	                            } else if (target.is('.new')) {
	                                if (month == 11) {
	                                    month = 0;
	                                    year += 1;
	                                } else {
	                                    month += 1;
	                                }
	                            }
	                            this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));
	                        }

	                        var oldViewMode = this.viewMode;

	                        this.showMode(-1);

	                        this.fill();
	                        if (oldViewMode == this.viewMode && this.autoclose) {
	                            this.hide();
	                        }
	                        break;
	                }
	            }
	        },

	        _setDate: function _setDate(date, which) {

	            if (!which || which == 'date') this.date = date;
	            if (!which || which == 'view') this.viewDate = date;
	            this.fill();
	            this.setValue();
	            this.element.trigger({
	                type: 'changeDate',
	                date: this.date
	            });
	            var element;
	            if (this.isInput) {
	                element = this.element;
	            } else if (this.component) {
	                element = this.element.find('input');
	            }
	            if (element) {
	                element.change();
	                if (this.autoclose && (!which || which == 'date')) {
	                    // this.hide();
	                }
	            }
	        },

	        moveHour: function moveHour(date, dir) {
	            if (!dir) return date;
	            var new_date = new Date(date.valueOf());
	            dir = dir > 0 ? 1 : -1;
	            new_date.setUTCHours(new_date.getUTCHours() + dir);
	            return new_date;
	        },

	        moveDate: function moveDate(date, dir) {
	            if (!dir) return date;
	            var new_date = new Date(date.valueOf());
	            dir = dir > 0 ? 1 : -1;
	            new_date.setUTCDate(new_date.getUTCDate() + dir);
	            return new_date;
	        },

	        moveMonth: function moveMonth(date, dir) {
	            if (!dir) return date;
	            var new_date = new Date(date.valueOf()),
	                day = new_date.getUTCDate(),
	                month = new_date.getUTCMonth(),
	                mag = Math.abs(dir),
	                new_month,
	                test;
	            dir = dir > 0 ? 1 : -1;
	            if (mag == 1) {
	                test = dir == -1
	                // If going back one month, make sure month is not current month
	                // (eg, Mar 31 -> Feb 31 == Feb 28, not Mar 02)
	                ? function () {
	                    return new_date.getUTCMonth() == month;
	                }
	                // If going forward one month, make sure month is as expected
	                // (eg, Jan 31 -> Feb 31 == Feb 28, not Mar 02)
	                : function () {
	                    return new_date.getUTCMonth() != new_month;
	                };
	                new_month = month + dir;
	                new_date.setUTCMonth(new_month);
	                // Dec -> Jan (12) or Jan -> Dec (-1) -- limit expected date to 0-11
	                if (new_month < 0 || new_month > 11) new_month = (new_month + 12) % 12;
	            } else {
	                // For magnitudes >1, move one month at a time...
	                for (var i = 0; i < mag; i++) {
	                    // ...which might decrease the day (eg, Jan 31 to Feb 28, etc)...
	                    new_date = this.moveMonth(new_date, dir);
	                } // ...then reset the day, keeping it in the new month
	                new_month = new_date.getUTCMonth();
	                new_date.setUTCDate(day);
	                test = function test() {
	                    return new_month != new_date.getUTCMonth();
	                };
	            }
	            // Common date-resetting loop -- if date is beyond end of month, make it
	            // end of month
	            while (test()) {
	                new_date.setUTCDate(--day);
	                new_date.setUTCMonth(new_month);
	            }
	            return new_date;
	        },

	        moveYear: function moveYear(date, dir) {
	            return this.moveMonth(date, dir * 12);
	        },

	        dateWithinRange: function dateWithinRange(date) {
	            return date >= this.startDate && date <= this.endDate;
	        },

	        keydown: function keydown(e) {
	            if (!this.keyboardNavigation) {
	                return true;
	            }
	            if (this.picker.is(':not(:visible)')) {
	                if (e.keyCode == 27) // allow escape to hide and re-show picker
	                    this.show();
	                return;
	            }
	            var dateChanged = false,
	                dir,
	                day,
	                month,
	                newDate,
	                newViewDate;
	            switch (e.keyCode) {
	                case 27:
	                    // escape
	                    this.hide();
	                    e.preventDefault();
	                    break;
	                case 37: // left
	                case 39:
	                    // right
	                    if (!this.keyboardNavigation) break;
	                    dir = e.keyCode == 37 ? -1 : 1;
	                    if (e.ctrlKey) {
	                        newDate = this.moveYear(this.date, dir);
	                        newViewDate = this.moveYear(this.viewDate, dir);
	                    } else if (e.shiftKey) {
	                        newDate = this.moveMonth(this.date, dir);
	                        newViewDate = this.moveMonth(this.viewDate, dir);
	                    } else {
	                        newDate = new Date(this.date.valueOf());
	                        newDate.setUTCDate(this.date.getUTCDate() + dir);
	                        newViewDate = new Date(this.viewDate.valueOf());
	                        newViewDate.setUTCDate(this.viewDate.getUTCDate() + dir);
	                    }
	                    if (this.dateWithinRange(newDate)) {
	                        this.date = newDate;
	                        this.viewDate = newViewDate;
	                        this.setValue();
	                        this.update();
	                        e.preventDefault();
	                        dateChanged = true;
	                    }
	                    break;
	                case 38: // up
	                case 40:
	                    // down
	                    if (!this.keyboardNavigation) break;
	                    dir = e.keyCode == 38 ? -1 : 1;
	                    if (e.ctrlKey) {
	                        newDate = this.moveYear(this.date, dir);
	                        newViewDate = this.moveYear(this.viewDate, dir);
	                    } else if (e.shiftKey) {
	                        newDate = this.moveMonth(this.date, dir);
	                        newViewDate = this.moveMonth(this.viewDate, dir);
	                    } else {
	                        newDate = new Date(this.date.valueOf());
	                        newDate.setUTCDate(this.date.getUTCDate() + dir * 7);
	                        newViewDate = new Date(this.viewDate.valueOf());
	                        newViewDate.setUTCDate(this.viewDate.getUTCDate() + dir * 7);
	                    }
	                    if (this.dateWithinRange(newDate)) {
	                        this.date = newDate;
	                        this.viewDate = newViewDate;
	                        this.setValue();
	                        this.update();
	                        e.preventDefault();
	                        dateChanged = true;
	                    }
	                    break;
	                case 13:
	                    // enter
	                    this.hide();
	                    e.preventDefault();
	                    break;
	                case 9:
	                    // tab
	                    this.hide();
	                    break;
	            }
	            if (dateChanged) {
	                this.element.trigger({
	                    type: 'changeDate',
	                    date: this.date
	                });
	                var element;
	                if (this.isInput) {
	                    element = this.element;
	                } else if (this.component) {
	                    element = this.element.find('input');
	                }
	                if (element) {
	                    element.change();
	                }
	            }
	        },

	        showMode: function showMode(dir) {

	            if (dir) {
	                var newViewMode = Math.max(0, Math.min(DPGlobal.modes.length - 1, this.viewMode + dir));
	                if (newViewMode >= this.minView && newViewMode <= this.maxView) {
	                    this.viewMode = newViewMode;
	                }
	            }
	            /*
	            	vitalets: fixing bug of very special conditions:
	            	jquery 1.7.1 + webkit + show inline datepicker in bootstrap popover.
	            	Method show() does not set display css correctly and datepicker is not shown.
	            	Changed to .css('display', 'block') solve the problem.
	            	See https://github.com/vitalets/x-editable/issues/37
	             	In jquery 1.7.2+ everything works fine.
	            */
	            //this.picker.find('>div').hide().filter('.datepicker-'+DPGlobal.modes[this.viewMode].clsName).show();
	            this.picker.find('>div').hide().filter('.datepicker-' + DPGlobal.modes[this.viewMode].clsName).css('display', 'block');
	            this.updateNavArrows();
	        },

	        changeViewDate: function changeViewDate(date) {
	            this.date = date;
	            this.viewDate = date;
	            this.fill();
	        },

	        reset: function reset(e) {
	            this._setDate(null, 'date');
	        }
	    };

	    $.fn.fdatepicker = function (option) {
	        var args = Array.apply(null, arguments);
	        args.shift();
	        return this.each(function () {
	            var $this = $(this),
	                data = $this.data('datepicker'),
	                options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option;
	            if (!data) {
	                $this.data('datepicker', data = new Datepicker(this, $.extend({}, $.fn.fdatepicker.defaults, options)));
	            }
	            if (typeof option == 'string' && typeof data[option] == 'function') {
	                data[option].apply(data, args);
	            }
	        });
	    };

	    $.fn.fdatepicker.defaults = {
	        onRender: function onRender(date) {
	            return '';
	        }
	    };
	    $.fn.fdatepicker.Constructor = Datepicker;
	    var dates = $.fn.fdatepicker.dates = {
	        'en': {
	            days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"],
	            daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
	            daysMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa", "Su"],
	            months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
	            monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
	            today: "Today",
	            titleFormat: "MM yyyy"
	        }
	    };

	    var DPGlobal = {
	        modes: [{
	            clsName: 'minutes',
	            navFnc: 'Hours',
	            navStep: 1
	        }, {
	            clsName: 'hours',
	            navFnc: 'Date',
	            navStep: 1
	        }, {
	            clsName: 'days',
	            navFnc: 'Month',
	            navStep: 1
	        }, {
	            clsName: 'months',
	            navFnc: 'FullYear',
	            navStep: 1
	        }, {
	            clsName: 'years',
	            navFnc: 'FullYear',
	            navStep: 10
	        }],
	        isLeapYear: function isLeapYear(year) {
	            return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
	        },
	        getDaysInMonth: function getDaysInMonth(year, month) {
	            return [31, DPGlobal.isLeapYear(year) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
	        },
	        validParts: /hh?|ii?|ss?|dd?|mm?|MM?|yy(?:yy)?/g,
	        nonpunctuation: /[^ -\/:-@\[\u3400-\u9fff-`{-~\t\n\r]+/g,
	        parseFormat: function parseFormat(format) {
	            // IE treats \0 as a string end in inputs (truncating the value),
	            // so it's a bad format delimiter, anyway
	            var separators = format.replace(this.validParts, '\0').split('\0'),
	                parts = format.match(this.validParts);
	            if (!separators || !separators.length || !parts || parts.length === 0) {
	                throw new Error("Invalid date format.");
	            }
	            this.formatText = format;
	            return {
	                separators: separators,
	                parts: parts
	            };
	        },
	        parseDate: function parseDate(date, format, language) {
	            if (date instanceof Date) return new Date(date.valueOf() - date.getTimezoneOffset() * 60000);
	            if (/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(date)) {
	                format = this.parseFormat('yyyy-mm-dd');
	            }
	            if (/^\d{4}\-\d{1,2}\-\d{1,2}[T ]\d{1,2}\:\d{1,2}$/.test(date)) {
	                format = this.parseFormat('yyyy-mm-dd hh:ii');
	            }
	            if (/^\d{4}\-\d{1,2}\-\d{1,2}[T ]\d{1,2}\:\d{1,2}\:\d{1,2}[Z]{0,1}$/.test(date)) {
	                format = this.parseFormat('yyyy-mm-dd hh:ii:ss');
	            }
	            if (/^[-+]\d+[dmwy]([\s,]+[-+]\d+[dmwy])*$/.test(date)) {
	                var part_re = /([-+]\d+)([dmwy])/,
	                    parts = date.match(/([-+]\d+)([dmwy])/g),
	                    part,
	                    dir;
	                date = new Date();
	                for (var i = 0; i < parts.length; i++) {
	                    part = part_re.exec(parts[i]);
	                    dir = parseInt(part[1]);
	                    switch (part[2]) {
	                        case 'd':
	                            date.setUTCDate(date.getUTCDate() + dir);
	                            break;
	                        case 'm':
	                            date = Datetimepicker.prototype.moveMonth.call(Datetimepicker.prototype, date, dir);
	                            break;
	                        case 'w':
	                            date.setUTCDate(date.getUTCDate() + dir * 7);
	                            break;
	                        case 'y':
	                            date = Datetimepicker.prototype.moveYear.call(Datetimepicker.prototype, date, dir);
	                            break;
	                    }
	                }
	                return UTCDate(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds());
	            }
	            var parts = date && date.match(this.nonpunctuation) || [],
	                date = new Date(),
	                parsed = {},
	                setters_order = ['hh', 'h', 'ii', 'i', 'ss', 's', 'yyyy', 'yy', 'M', 'MM', 'm', 'mm', 'd', 'dd'],
	                setters_map = {
	                hh: function hh(d, v) {
	                    return d.setUTCHours(v);
	                },
	                h: function h(d, v) {
	                    return d.setUTCHours(v);
	                },
	                ii: function ii(d, v) {
	                    return d.setUTCMinutes(v);
	                },
	                i: function i(d, v) {
	                    return d.setUTCMinutes(v);
	                },
	                ss: function ss(d, v) {
	                    return d.setUTCSeconds(v);
	                },
	                s: function s(d, v) {
	                    return d.setUTCSeconds(v);
	                },
	                yyyy: function yyyy(d, v) {
	                    return d.setUTCFullYear(v);
	                },
	                yy: function yy(d, v) {
	                    return d.setUTCFullYear(2000 + v);
	                },
	                m: function m(d, v) {
	                    v -= 1;
	                    while (v < 0) {
	                        v += 12;
	                    }v %= 12;
	                    d.setUTCMonth(v);
	                    while (d.getUTCMonth() != v) {
	                        d.setUTCDate(d.getUTCDate() - 1);
	                    }return d;
	                },
	                d: function d(_d, v) {
	                    return _d.setUTCDate(v);
	                }
	            },
	                val,
	                filtered,
	                part;
	            setters_map['M'] = setters_map['MM'] = setters_map['mm'] = setters_map['m'];
	            setters_map['dd'] = setters_map['d'];
	            date = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0); //date.getHours(), date.getMinutes(), date.getSeconds());
	            if (parts.length == format.parts.length) {
	                for (var i = 0, cnt = format.parts.length; i < cnt; i++) {
	                    val = parseInt(parts[i], 10);
	                    part = format.parts[i];
	                    if (isNaN(val)) {
	                        switch (part) {
	                            case 'MM':
	                                filtered = $(dates[language].months).filter(function () {
	                                    var m = this.slice(0, parts[i].length),
	                                        p = parts[i].slice(0, m.length);
	                                    return m == p;
	                                });
	                                val = $.inArray(filtered[0], dates[language].months) + 1;
	                                break;
	                            case 'M':
	                                filtered = $(dates[language].monthsShort).filter(function () {
	                                    var m = this.slice(0, parts[i].length),
	                                        p = parts[i].slice(0, m.length);
	                                    return m == p;
	                                });
	                                val = $.inArray(filtered[0], dates[language].monthsShort) + 1;
	                                break;
	                        }
	                    }
	                    parsed[part] = val;
	                }
	                for (var i = 0, s; i < setters_order.length; i++) {
	                    s = setters_order[i];
	                    if (s in parsed && !isNaN(parsed[s])) setters_map[s](date, parsed[s]);
	                }
	            }
	            return date;
	        },
	        formatDate: function formatDate(date, format, language) {
	            if (date == null) {
	                return '';
	            }
	            var val = {
	                h: date.getUTCHours(),
	                i: date.getUTCMinutes(),
	                s: date.getUTCSeconds(),
	                d: date.getUTCDate(),
	                m: date.getUTCMonth() + 1,
	                M: dates[language].monthsShort[date.getUTCMonth()],
	                MM: dates[language].months[date.getUTCMonth()],
	                yy: date.getUTCFullYear().toString().substring(2),
	                yyyy: date.getUTCFullYear()
	            };
	            val.hh = (val.h < 10 ? '0' : '') + val.h;
	            val.ii = (val.i < 10 ? '0' : '') + val.i;
	            val.ss = (val.s < 10 ? '0' : '') + val.s;
	            val.dd = (val.d < 10 ? '0' : '') + val.d;
	            val.mm = (val.m < 10 ? '0' : '') + val.m;
	            var date = [],
	                seps = $.extend([], format.separators);
	            for (var i = 0, cnt = format.parts.length; i < cnt; i++) {
	                if (seps.length) date.push(seps.shift());
	                date.push(val[format.parts[i]]);
	            }
	            return date.join('');
	        },
	        convertViewMode: function convertViewMode(viewMode) {
	            switch (viewMode) {
	                case 4:
	                case 'decade':
	                    viewMode = 4;
	                    break;
	                case 3:
	                case 'year':
	                    viewMode = 3;
	                    break;
	                case 2:
	                case 'month':
	                    viewMode = 2;
	                    break;
	                case 1:
	                case 'day':
	                    viewMode = 1;
	                    break;
	                case 0:
	                case 'hour':
	                    viewMode = 0;
	                    break;
	            }

	            return viewMode;
	        },
	        headTemplate: function headTemplate(leftArrow, rightArrow) {
	            return '<thead>' + '<tr>' + '<th class="prev">' + leftArrow + '</th>' + '<th colspan="5" class="date-switch"></th>' + '<th class="next">' + rightArrow + '</th>' + '</tr>' + '</thead>';
	        },
	        contTemplate: '<tbody><tr><td colspan="7"></td></tr></tbody>',
	        footTemplate: '<tfoot><tr><th colspan="7" class="today"></th></tr></tfoot>'
	    };
	    DPGlobal.template = function (leftArrow, rightArrow, closeIcon) {
	        return '<div class="datepicker">' + '<div class="datepicker-minutes">' + '<table class=" table-condensed">' + DPGlobal.headTemplate(leftArrow, rightArrow) + DPGlobal.contTemplate + DPGlobal.footTemplate + '</table>' + '</div>' + '<div class="datepicker-hours">' + '<table class=" table-condensed">' + DPGlobal.headTemplate(leftArrow, rightArrow) + DPGlobal.contTemplate + DPGlobal.footTemplate + '</table>' + '</div>' + '<div class="datepicker-days">' + '<table class=" table-condensed">' + DPGlobal.headTemplate(leftArrow, rightArrow) + '<tbody></tbody>' + DPGlobal.footTemplate + '</table>' + '</div>' + '<div class="datepicker-months">' + '<table class="table-condensed">' + DPGlobal.headTemplate(leftArrow, rightArrow) + DPGlobal.contTemplate + DPGlobal.footTemplate + '</table>' + '</div>' + '<div class="datepicker-years">' + '<table class="table-condensed">' + DPGlobal.headTemplate(leftArrow, rightArrow) + DPGlobal.contTemplate + DPGlobal.footTemplate + '</table>' + '</div>' + '<a class="button datepicker-close tiny alert right" style="width:auto;">' + closeIcon + '</a>' + '</div>';
	    };

	    $.fn.fdatepicker.DPGlobal = DPGlobal;
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/*
	== malihu jquery custom scrollbar plugin == 
	Version: 3.1.5 
	Plugin URI: http://manos.malihu.gr/jquery-custom-content-scroller 
	Author: malihu
	Author URI: http://manos.malihu.gr
	License: MIT License (MIT)
	*/

	/*
	Copyright Manos Malihutsakis (email: manos@malihu.gr)

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	/*
	The code below is fairly long, fully commented and should be normally used in development. 
	For production, use either the minified jquery.mCustomScrollbar.min.js script or 
	the production-ready jquery.mCustomScrollbar.concat.min.js which contains the plugin 
	and dependencies (minified). 
	*/

	(function (factory) {
		if (true) {
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (typeof module !== "undefined" && module.exports) {
			module.exports = factory;
		} else {
			factory(jQuery, window, document);
		}
	})(function ($) {
		(function (init) {
			var _rjs = "function" === "function" && __webpack_require__(14),
			    /* RequireJS */
			_njs = typeof module !== "undefined" && module.exports,
			    /* NodeJS */
			_dlp = "https:" == document.location.protocol ? "https:" : "http:",
			    /* location protocol */
			_url = "cdnjs.cloudflare.com/ajax/libs/jquery-mousewheel/3.1.13/jquery.mousewheel.min.js";
			if (!_rjs) {
				if (_njs) {
					__webpack_require__(15)($);
				} else {
					/* load jquery-mousewheel plugin (via CDN) if it's not present or not loaded via RequireJS 
	    (works when mCustomScrollbar fn is called on window load) */
					$.event.special.mousewheel || $("head").append(decodeURI("%3Cscript src=" + _dlp + "//" + _url + "%3E%3C/script%3E"));
				}
			}
			init();
		})(function () {

			/* 
	  ----------------------------------------
	  PLUGIN NAMESPACE, PREFIX, DEFAULT SELECTOR(S) 
	  ----------------------------------------
	  */

			var pluginNS = "mCustomScrollbar",
			    pluginPfx = "mCS",
			    defaultSelector = ".mCustomScrollbar",


			/* 
	  ----------------------------------------
	  DEFAULT OPTIONS 
	  ----------------------------------------
	  */

			defaults = {
				/*
	   set element/content width/height programmatically 
	   values: boolean, pixels, percentage 
	   	option						default
	   	-------------------------------------
	   	setWidth					false
	   	setHeight					false
	   */
				/*
	   set the initial css top property of content  
	   values: string (e.g. "-100px", "10%" etc.)
	   */
				setTop: 0,
				/*
	   set the initial css left property of content  
	   values: string (e.g. "-100px", "10%" etc.)
	   */
				setLeft: 0,
				/* 
	   scrollbar axis (vertical and/or horizontal scrollbars) 
	   values (string): "y", "x", "yx"
	   */
				axis: "y",
				/*
	   position of scrollbar relative to content  
	   values (string): "inside", "outside" ("outside" requires elements with position:relative)
	   */
				scrollbarPosition: "inside",
				/*
	   scrolling inertia
	   values: integer (milliseconds)
	   */
				scrollInertia: 950,
				/* 
	   auto-adjust scrollbar dragger length
	   values: boolean
	   */
				autoDraggerLength: true,
				/*
	   auto-hide scrollbar when idle 
	   values: boolean
	   	option						default
	   	-------------------------------------
	   	autoHideScrollbar			false
	   */
				/*
	   auto-expands scrollbar on mouse-over and dragging
	   values: boolean
	   	option						default
	   	-------------------------------------
	   	autoExpandScrollbar			false
	   */
				/*
	   always show scrollbar, even when there's nothing to scroll 
	   values: integer (0=disable, 1=always show dragger rail and buttons, 2=always show dragger rail, dragger and buttons), boolean
	   */
				alwaysShowScrollbar: 0,
				/*
	   scrolling always snaps to a multiple of this number in pixels
	   values: integer, array ([y,x])
	   	option						default
	   	-------------------------------------
	   	snapAmount					null
	   */
				/*
	   when snapping, snap with this number in pixels as an offset 
	   values: integer
	   */
				snapOffset: 0,
				/* 
	   mouse-wheel scrolling
	   */
				mouseWheel: {
					/* 
	    enable mouse-wheel scrolling
	    values: boolean
	    */
					enable: true,
					/* 
	    scrolling amount in pixels
	    values: "auto", integer 
	    */
					scrollAmount: "auto",
					/* 
	    mouse-wheel scrolling axis 
	    the default scrolling direction when both vertical and horizontal scrollbars are present 
	    values (string): "y", "x" 
	    */
					axis: "y",
					/* 
	    prevent the default behaviour which automatically scrolls the parent element(s) when end of scrolling is reached 
	    values: boolean
	    	option						default
	    	-------------------------------------
	    	preventDefault				null
	    */
					/*
	    the reported mouse-wheel delta value. The number of lines (translated to pixels) one wheel notch scrolls.  
	    values: "auto", integer 
	    "auto" uses the default OS/browser value 
	    */
					deltaFactor: "auto",
					/*
	    normalize mouse-wheel delta to -1 or 1 (disables mouse-wheel acceleration) 
	    values: boolean
	    	option						default
	    	-------------------------------------
	    	normalizeDelta				null
	    */
					/*
	    invert mouse-wheel scrolling direction 
	    values: boolean
	    	option						default
	    	-------------------------------------
	    	invert						null
	    */
					/*
	    the tags that disable mouse-wheel when cursor is over them
	    */
					disableOver: ["select", "option", "keygen", "datalist", "textarea"]
				},
				/* 
	   scrollbar buttons
	   */
				scrollButtons: {
					/*
	    enable scrollbar buttons
	    values: boolean
	    	option						default
	    	-------------------------------------
	    	enable						null
	    */
					/*
	    scrollbar buttons scrolling type 
	    values (string): "stepless", "stepped"
	    */
					scrollType: "stepless",
					/*
	    scrolling amount in pixels
	    values: "auto", integer 
	    */
					scrollAmount: "auto"
					/*
	    tabindex of the scrollbar buttons
	    values: false, integer
	    	option						default
	    	-------------------------------------
	    	tabindex					null
	    */
				},
				/* 
	   keyboard scrolling
	   */
				keyboard: {
					/*
	    enable scrolling via keyboard
	    values: boolean
	    */
					enable: true,
					/*
	    keyboard scrolling type 
	    values (string): "stepless", "stepped"
	    */
					scrollType: "stepless",
					/*
	    scrolling amount in pixels
	    values: "auto", integer 
	    */
					scrollAmount: "auto"
				},
				/*
	   enable content touch-swipe scrolling 
	   values: boolean, integer, string (number)
	   integer values define the axis-specific minimum amount required for scrolling momentum
	   */
				contentTouchScroll: 25,
				/*
	   enable/disable document (default) touch-swipe scrolling 
	   */
				documentTouchScroll: true,
				/*
	   advanced option parameters
	   */
				advanced: {
					/*
	    auto-expand content horizontally (for "x" or "yx" axis) 
	    values: boolean, integer (the value 2 forces the non scrollHeight/scrollWidth method, the value 3 forces the scrollHeight/scrollWidth method)
	    	option						default
	    	-------------------------------------
	    	autoExpandHorizontalScroll	null
	    */
					/*
	    auto-scroll to elements with focus
	    */
					autoScrollOnFocus: "input,textarea,select,button,datalist,keygen,a[tabindex],area,object,[contenteditable='true']",
					/*
	    auto-update scrollbars on content, element or viewport resize 
	    should be true for fluid layouts/elements, adding/removing content dynamically, hiding/showing elements, content with images etc. 
	    values: boolean
	    */
					updateOnContentResize: true,
					/*
	    auto-update scrollbars each time each image inside the element is fully loaded 
	    values: "auto", boolean
	    */
					updateOnImageLoad: "auto",
					/*
	    auto-update scrollbars based on the amount and size changes of specific selectors 
	    useful when you need to update the scrollbar(s) automatically, each time a type of element is added, removed or changes its size 
	    values: boolean, string (e.g. "ul li" will auto-update scrollbars each time list-items inside the element are changed) 
	    a value of true (boolean) will auto-update scrollbars each time any element is changed
	    	option						default
	    	-------------------------------------
	    	updateOnSelectorChange		null
	    */
					/*
	    extra selectors that'll allow scrollbar dragging upon mousemove/up, pointermove/up, touchend etc. (e.g. "selector-1, selector-2")
	    	option						default
	    	-------------------------------------
	    	extraDraggableSelectors		null
	    */
					/*
	    extra selectors that'll release scrollbar dragging upon mouseup, pointerup, touchend etc. (e.g. "selector-1, selector-2")
	    	option						default
	    	-------------------------------------
	    	releaseDraggableSelectors	null
	    */
					/*
	    auto-update timeout 
	    values: integer (milliseconds)
	    */
					autoUpdateTimeout: 60
				},
				/* 
	   scrollbar theme 
	   values: string (see CSS/plugin URI for a list of ready-to-use themes)
	   */
				theme: "light",
				/*
	   user defined callback functions
	   */
				callbacks: {
					/*
	    Available callbacks: 
	    	callback					default
	    	-------------------------------------
	    	onCreate					null
	    	onInit						null
	    	onScrollStart				null
	    	onScroll					null
	    	onTotalScroll				null
	    	onTotalScrollBack			null
	    	whileScrolling				null
	    	onOverflowY					null
	    	onOverflowX					null
	    	onOverflowYNone				null
	    	onOverflowXNone				null
	    	onImageLoad					null
	    	onSelectorChange			null
	    	onBeforeUpdate				null
	    	onUpdate					null
	    */
					onTotalScrollOffset: 0,
					onTotalScrollBackOffset: 0,
					alwaysTriggerOffsets: true
					/*
	    add scrollbar(s) on all elements matching the current selector, now and in the future 
	    values: boolean, string 
	    string values: "on" (enable), "once" (disable after first invocation), "off" (disable)
	    liveSelector values: string (selector)
	    	option						default
	    	-------------------------------------
	    	live						false
	    	liveSelector				null
	    */
				} },


			/* 
	  ----------------------------------------
	  VARS, CONSTANTS 
	  ----------------------------------------
	  */

			totalInstances = 0,
			    /* plugin instances amount */
			liveTimers = {},
			    /* live option timers */
			oldIE = window.attachEvent && !window.addEventListener ? 1 : 0,
			    /* detect IE < 9 */
			touchActive = false,
			    touchable,
			    /* global touch vars (for touch and pointer events) */
			/* general plugin classes */
			classes = ["mCSB_dragger_onDrag", "mCSB_scrollTools_onDrag", "mCS_img_loaded", "mCS_disabled", "mCS_destroyed", "mCS_no_scrollbar", "mCS-autoHide", "mCS-dir-rtl", "mCS_no_scrollbar_y", "mCS_no_scrollbar_x", "mCS_y_hidden", "mCS_x_hidden", "mCSB_draggerContainer", "mCSB_buttonUp", "mCSB_buttonDown", "mCSB_buttonLeft", "mCSB_buttonRight"],


			/* 
	  ----------------------------------------
	  METHODS 
	  ----------------------------------------
	  */

			methods = {

				/* 
	   plugin initialization method 
	   creates the scrollbar(s), plugin data object and options
	   ----------------------------------------
	   */

				init: function init(options) {

					var options = $.extend(true, {}, defaults, options),
					    selector = _selector.call(this); /* validate selector */

					/* 
	    if live option is enabled, monitor for elements matching the current selector and 
	    apply scrollbar(s) when found (now and in the future) 
	    */
					if (options.live) {
						var liveSelector = options.liveSelector || this.selector || defaultSelector,
						    /* live selector(s) */
						$liveSelector = $(liveSelector); /* live selector(s) as jquery object */
						if (options.live === "off") {
							/* 
	      disable live if requested 
	      usage: $(selector).mCustomScrollbar({live:"off"}); 
	      */
							removeLiveTimers(liveSelector);
							return;
						}
						liveTimers[liveSelector] = setTimeout(function () {
							/* call mCustomScrollbar fn on live selector(s) every half-second */
							$liveSelector.mCustomScrollbar(options);
							if (options.live === "once" && $liveSelector.length) {
								/* disable live after first invocation */
								removeLiveTimers(liveSelector);
							}
						}, 500);
					} else {
						removeLiveTimers(liveSelector);
					}

					/* options backward compatibility (for versions < 3.0.0) and normalization */
					options.setWidth = options.set_width ? options.set_width : options.setWidth;
					options.setHeight = options.set_height ? options.set_height : options.setHeight;
					options.axis = options.horizontalScroll ? "x" : _findAxis(options.axis);
					options.scrollInertia = options.scrollInertia > 0 && options.scrollInertia < 17 ? 17 : options.scrollInertia;
					if (_typeof(options.mouseWheel) !== "object" && options.mouseWheel == true) {
						/* old school mouseWheel option (non-object) */
						options.mouseWheel = { enable: true, scrollAmount: "auto", axis: "y", preventDefault: false, deltaFactor: "auto", normalizeDelta: false, invert: false };
					}
					options.mouseWheel.scrollAmount = !options.mouseWheelPixels ? options.mouseWheel.scrollAmount : options.mouseWheelPixels;
					options.mouseWheel.normalizeDelta = !options.advanced.normalizeMouseWheelDelta ? options.mouseWheel.normalizeDelta : options.advanced.normalizeMouseWheelDelta;
					options.scrollButtons.scrollType = _findScrollButtonsType(options.scrollButtons.scrollType);

					_theme(options); /* theme-specific options */

					/* plugin constructor */
					return $(selector).each(function () {

						var $this = $(this);

						if (!$this.data(pluginPfx)) {
							/* prevent multiple instantiations */

							/* store options and create objects in jquery data */
							$this.data(pluginPfx, {
								idx: ++totalInstances, /* instance index */
								opt: options, /* options */
								scrollRatio: { y: null, x: null }, /* scrollbar to content ratio */
								overflowed: null, /* overflowed axis */
								contentReset: { y: null, x: null }, /* object to check when content resets */
								bindEvents: false, /* object to check if events are bound */
								tweenRunning: false, /* object to check if tween is running */
								sequential: {}, /* sequential scrolling object */
								langDir: $this.css("direction"), /* detect/store direction (ltr or rtl) */
								cbOffsets: null, /* object to check whether callback offsets always trigger */
								/* 
	       object to check how scrolling events where last triggered 
	       "internal" (default - triggered by this script), "external" (triggered by other scripts, e.g. via scrollTo method) 
	       usage: object.data("mCS").trigger
	       */
								trigger: null,
								/* 
	       object to check for changes in elements in order to call the update method automatically 
	       */
								poll: { size: { o: 0, n: 0 }, img: { o: 0, n: 0 }, change: { o: 0, n: 0 } }
							});

							var d = $this.data(pluginPfx),
							    o = d.opt,

							/* HTML data attributes */
							htmlDataAxis = $this.data("mcs-axis"),
							    htmlDataSbPos = $this.data("mcs-scrollbar-position"),
							    htmlDataTheme = $this.data("mcs-theme");

							if (htmlDataAxis) {
								o.axis = htmlDataAxis;
							} /* usage example: data-mcs-axis="y" */
							if (htmlDataSbPos) {
								o.scrollbarPosition = htmlDataSbPos;
							} /* usage example: data-mcs-scrollbar-position="outside" */
							if (htmlDataTheme) {
								/* usage example: data-mcs-theme="minimal" */
								o.theme = htmlDataTheme;
								_theme(o); /* theme-specific options */
							}

							_pluginMarkup.call(this); /* add plugin markup */

							if (d && o.callbacks.onCreate && typeof o.callbacks.onCreate === "function") {
								o.callbacks.onCreate.call(this);
							} /* callbacks: onCreate */

							$("#mCSB_" + d.idx + "_container img:not(." + classes[2] + ")").addClass(classes[2]); /* flag loaded images */

							methods.update.call(null, $this); /* call the update method */
						}
					});
				},
				/* ---------------------------------------- */

				/* 
	   plugin update method 
	   updates content and scrollbar(s) values, events and status 
	   ----------------------------------------
	   usage: $(selector).mCustomScrollbar("update");
	   */

				update: function update(el, cb) {

					var selector = el || _selector.call(this); /* validate selector */

					return $(selector).each(function () {

						var $this = $(this);

						if ($this.data(pluginPfx)) {
							/* check if plugin has initialized */

							var d = $this.data(pluginPfx),
							    o = d.opt,
							    mCSB_container = $("#mCSB_" + d.idx + "_container"),
							    mCustomScrollBox = $("#mCSB_" + d.idx),
							    mCSB_dragger = [$("#mCSB_" + d.idx + "_dragger_vertical"), $("#mCSB_" + d.idx + "_dragger_horizontal")];

							if (!mCSB_container.length) {
								return;
							}

							if (d.tweenRunning) {
								_stop($this);
							} /* stop any running tweens while updating */

							if (cb && d && o.callbacks.onBeforeUpdate && typeof o.callbacks.onBeforeUpdate === "function") {
								o.callbacks.onBeforeUpdate.call(this);
							} /* callbacks: onBeforeUpdate */

							/* if element was disabled or destroyed, remove class(es) */
							if ($this.hasClass(classes[3])) {
								$this.removeClass(classes[3]);
							}
							if ($this.hasClass(classes[4])) {
								$this.removeClass(classes[4]);
							}

							/* css flexbox fix, detect/set max-height */
							mCustomScrollBox.css("max-height", "none");
							if (mCustomScrollBox.height() !== $this.height()) {
								mCustomScrollBox.css("max-height", $this.height());
							}

							_expandContentHorizontally.call(this); /* expand content horizontally */

							if (o.axis !== "y" && !o.advanced.autoExpandHorizontalScroll) {
								mCSB_container.css("width", _contentWidth(mCSB_container));
							}

							d.overflowed = _overflowed.call(this); /* determine if scrolling is required */

							_scrollbarVisibility.call(this); /* show/hide scrollbar(s) */

							/* auto-adjust scrollbar dragger length analogous to content */
							if (o.autoDraggerLength) {
								_setDraggerLength.call(this);
							}

							_scrollRatio.call(this); /* calculate and store scrollbar to content ratio */

							_bindEvents.call(this); /* bind scrollbar events */

							/* reset scrolling position and/or events */
							var to = [Math.abs(mCSB_container[0].offsetTop), Math.abs(mCSB_container[0].offsetLeft)];
							if (o.axis !== "x") {
								/* y/yx axis */
								if (!d.overflowed[0]) {
									/* y scrolling is not required */
									_resetContentPosition.call(this); /* reset content position */
									if (o.axis === "y") {
										_unbindEvents.call(this);
									} else if (o.axis === "yx" && d.overflowed[1]) {
										_scrollTo($this, to[1].toString(), { dir: "x", dur: 0, overwrite: "none" });
									}
								} else if (mCSB_dragger[0].height() > mCSB_dragger[0].parent().height()) {
									_resetContentPosition.call(this); /* reset content position */
								} else {
									/* y scrolling is required */
									_scrollTo($this, to[0].toString(), { dir: "y", dur: 0, overwrite: "none" });
									d.contentReset.y = null;
								}
							}
							if (o.axis !== "y") {
								/* x/yx axis */
								if (!d.overflowed[1]) {
									/* x scrolling is not required */
									_resetContentPosition.call(this); /* reset content position */
									if (o.axis === "x") {
										_unbindEvents.call(this);
									} else if (o.axis === "yx" && d.overflowed[0]) {
										_scrollTo($this, to[0].toString(), { dir: "y", dur: 0, overwrite: "none" });
									}
								} else if (mCSB_dragger[1].width() > mCSB_dragger[1].parent().width()) {
									_resetContentPosition.call(this); /* reset content position */
								} else {
									/* x scrolling is required */
									_scrollTo($this, to[1].toString(), { dir: "x", dur: 0, overwrite: "none" });
									d.contentReset.x = null;
								}
							}

							/* callbacks: onImageLoad, onSelectorChange, onUpdate */
							if (cb && d) {
								if (cb === 2 && o.callbacks.onImageLoad && typeof o.callbacks.onImageLoad === "function") {
									o.callbacks.onImageLoad.call(this);
								} else if (cb === 3 && o.callbacks.onSelectorChange && typeof o.callbacks.onSelectorChange === "function") {
									o.callbacks.onSelectorChange.call(this);
								} else if (o.callbacks.onUpdate && typeof o.callbacks.onUpdate === "function") {
									o.callbacks.onUpdate.call(this);
								}
							}

							_autoUpdate.call(this); /* initialize automatic updating (for dynamic content, fluid layouts etc.) */
						}
					});
				},
				/* ---------------------------------------- */

				/* 
	   plugin scrollTo method 
	   triggers a scrolling event to a specific value
	   ----------------------------------------
	   usage: $(selector).mCustomScrollbar("scrollTo",value,options);
	   */

				scrollTo: function scrollTo(val, options) {

					/* prevent silly things like $(selector).mCustomScrollbar("scrollTo",undefined); */
					if (typeof val == "undefined" || val == null) {
						return;
					}

					var selector = _selector.call(this); /* validate selector */

					return $(selector).each(function () {

						var $this = $(this);

						if ($this.data(pluginPfx)) {
							/* check if plugin has initialized */

							var d = $this.data(pluginPfx),
							    o = d.opt,

							/* method default options */
							methodDefaults = {
								trigger: "external", /* method is by default triggered externally (e.g. from other scripts) */
								scrollInertia: o.scrollInertia, /* scrolling inertia (animation duration) */
								scrollEasing: "mcsEaseInOut", /* animation easing */
								moveDragger: false, /* move dragger instead of content */
								timeout: 60, /* scroll-to delay */
								callbacks: true, /* enable/disable callbacks */
								onStart: true,
								onUpdate: true,
								onComplete: true
							},
							    methodOptions = $.extend(true, {}, methodDefaults, options),
							    to = _arr.call(this, val),
							    dur = methodOptions.scrollInertia > 0 && methodOptions.scrollInertia < 17 ? 17 : methodOptions.scrollInertia;

							/* translate yx values to actual scroll-to positions */
							to[0] = _to.call(this, to[0], "y");
							to[1] = _to.call(this, to[1], "x");

							/* 
	      check if scroll-to value moves the dragger instead of content. 
	      Only pixel values apply on dragger (e.g. 100, "100px", "-=100" etc.) 
	      */
							if (methodOptions.moveDragger) {
								to[0] *= d.scrollRatio.y;
								to[1] *= d.scrollRatio.x;
							}

							methodOptions.dur = _isTabHidden() ? 0 : dur; //skip animations if browser tab is hidden

							setTimeout(function () {
								/* do the scrolling */
								if (to[0] !== null && typeof to[0] !== "undefined" && o.axis !== "x" && d.overflowed[0]) {
									/* scroll y */
									methodOptions.dir = "y";
									methodOptions.overwrite = "all";
									_scrollTo($this, to[0].toString(), methodOptions);
								}
								if (to[1] !== null && typeof to[1] !== "undefined" && o.axis !== "y" && d.overflowed[1]) {
									/* scroll x */
									methodOptions.dir = "x";
									methodOptions.overwrite = "none";
									_scrollTo($this, to[1].toString(), methodOptions);
								}
							}, methodOptions.timeout);
						}
					});
				},
				/* ---------------------------------------- */

				/*
	   plugin stop method 
	   stops scrolling animation
	   ----------------------------------------
	   usage: $(selector).mCustomScrollbar("stop");
	   */
				stop: function stop() {

					var selector = _selector.call(this); /* validate selector */

					return $(selector).each(function () {

						var $this = $(this);

						if ($this.data(pluginPfx)) {
							/* check if plugin has initialized */

							_stop($this);
						}
					});
				},
				/* ---------------------------------------- */

				/*
	   plugin disable method 
	   temporarily disables the scrollbar(s) 
	   ----------------------------------------
	   usage: $(selector).mCustomScrollbar("disable",reset); 
	   reset (boolean): resets content position to 0 
	   */
				disable: function disable(r) {

					var selector = _selector.call(this); /* validate selector */

					return $(selector).each(function () {

						var $this = $(this);

						if ($this.data(pluginPfx)) {
							/* check if plugin has initialized */

							var d = $this.data(pluginPfx);

							_autoUpdate.call(this, "remove"); /* remove automatic updating */

							_unbindEvents.call(this); /* unbind events */

							if (r) {
								_resetContentPosition.call(this);
							} /* reset content position */

							_scrollbarVisibility.call(this, true); /* show/hide scrollbar(s) */

							$this.addClass(classes[3]); /* add disable class */
						}
					});
				},
				/* ---------------------------------------- */

				/*
	   plugin destroy method 
	   completely removes the scrollbar(s) and returns the element to its original state
	   ----------------------------------------
	   usage: $(selector).mCustomScrollbar("destroy"); 
	   */
				destroy: function destroy() {

					var selector = _selector.call(this); /* validate selector */

					return $(selector).each(function () {

						var $this = $(this);

						if ($this.data(pluginPfx)) {
							/* check if plugin has initialized */

							var d = $this.data(pluginPfx),
							    o = d.opt,
							    mCustomScrollBox = $("#mCSB_" + d.idx),
							    mCSB_container = $("#mCSB_" + d.idx + "_container"),
							    scrollbar = $(".mCSB_" + d.idx + "_scrollbar");

							if (o.live) {
								removeLiveTimers(o.liveSelector || $(selector).selector);
							} /* remove live timers */

							_autoUpdate.call(this, "remove"); /* remove automatic updating */

							_unbindEvents.call(this); /* unbind events */

							_resetContentPosition.call(this); /* reset content position */

							$this.removeData(pluginPfx); /* remove plugin data object */

							_delete(this, "mcs"); /* delete callbacks object */

							/* remove plugin markup */
							scrollbar.remove(); /* remove scrollbar(s) first (those can be either inside or outside plugin's inner wrapper) */
							mCSB_container.find("img." + classes[2]).removeClass(classes[2]); /* remove loaded images flag */
							mCustomScrollBox.replaceWith(mCSB_container.contents()); /* replace plugin's inner wrapper with the original content */
							/* remove plugin classes from the element and add destroy class */
							$this.removeClass(pluginNS + " _" + pluginPfx + "_" + d.idx + " " + classes[6] + " " + classes[7] + " " + classes[5] + " " + classes[3]).addClass(classes[4]);
						}
					});
				}
				/* ---------------------------------------- */

			},


			/* 
	  ----------------------------------------
	  FUNCTIONS
	  ----------------------------------------
	  */

			/* validates selector (if selector is invalid or undefined uses the default one) */
			_selector = function _selector() {
				return _typeof($(this)) !== "object" || $(this).length < 1 ? defaultSelector : this;
			},

			/* -------------------- */

			/* changes options according to theme */
			_theme = function _theme(obj) {
				var fixedSizeScrollbarThemes = ["rounded", "rounded-dark", "rounded-dots", "rounded-dots-dark"],
				    nonExpandedScrollbarThemes = ["rounded-dots", "rounded-dots-dark", "3d", "3d-dark", "3d-thick", "3d-thick-dark", "inset", "inset-dark", "inset-2", "inset-2-dark", "inset-3", "inset-3-dark"],
				    disabledScrollButtonsThemes = ["minimal", "minimal-dark"],
				    enabledAutoHideScrollbarThemes = ["minimal", "minimal-dark"],
				    scrollbarPositionOutsideThemes = ["minimal", "minimal-dark"];
				obj.autoDraggerLength = $.inArray(obj.theme, fixedSizeScrollbarThemes) > -1 ? false : obj.autoDraggerLength;
				obj.autoExpandScrollbar = $.inArray(obj.theme, nonExpandedScrollbarThemes) > -1 ? false : obj.autoExpandScrollbar;
				obj.scrollButtons.enable = $.inArray(obj.theme, disabledScrollButtonsThemes) > -1 ? false : obj.scrollButtons.enable;
				obj.autoHideScrollbar = $.inArray(obj.theme, enabledAutoHideScrollbarThemes) > -1 ? true : obj.autoHideScrollbar;
				obj.scrollbarPosition = $.inArray(obj.theme, scrollbarPositionOutsideThemes) > -1 ? "outside" : obj.scrollbarPosition;
			},

			/* -------------------- */

			/* live option timers removal */
			removeLiveTimers = function removeLiveTimers(selector) {
				if (liveTimers[selector]) {
					clearTimeout(liveTimers[selector]);
					_delete(liveTimers, selector);
				}
			},

			/* -------------------- */

			/* normalizes axis option to valid values: "y", "x", "yx" */
			_findAxis = function _findAxis(val) {
				return val === "yx" || val === "xy" || val === "auto" ? "yx" : val === "x" || val === "horizontal" ? "x" : "y";
			},

			/* -------------------- */

			/* normalizes scrollButtons.scrollType option to valid values: "stepless", "stepped" */
			_findScrollButtonsType = function _findScrollButtonsType(val) {
				return val === "stepped" || val === "pixels" || val === "step" || val === "click" ? "stepped" : "stepless";
			},

			/* -------------------- */

			/* generates plugin markup */
			_pluginMarkup = function _pluginMarkup() {
				var $this = $(this),
				    d = $this.data(pluginPfx),
				    o = d.opt,
				    expandClass = o.autoExpandScrollbar ? " " + classes[1] + "_expand" : "",
				    scrollbar = ["<div id='mCSB_" + d.idx + "_scrollbar_vertical' class='mCSB_scrollTools mCSB_" + d.idx + "_scrollbar mCS-" + o.theme + " mCSB_scrollTools_vertical" + expandClass + "'><div class='" + classes[12] + "'><div id='mCSB_" + d.idx + "_dragger_vertical' class='mCSB_dragger' style='position:absolute;'><div class='mCSB_dragger_bar' /></div><div class='mCSB_draggerRail' /></div></div>", "<div id='mCSB_" + d.idx + "_scrollbar_horizontal' class='mCSB_scrollTools mCSB_" + d.idx + "_scrollbar mCS-" + o.theme + " mCSB_scrollTools_horizontal" + expandClass + "'><div class='" + classes[12] + "'><div id='mCSB_" + d.idx + "_dragger_horizontal' class='mCSB_dragger' style='position:absolute;'><div class='mCSB_dragger_bar' /></div><div class='mCSB_draggerRail' /></div></div>"],
				    wrapperClass = o.axis === "yx" ? "mCSB_vertical_horizontal" : o.axis === "x" ? "mCSB_horizontal" : "mCSB_vertical",
				    scrollbars = o.axis === "yx" ? scrollbar[0] + scrollbar[1] : o.axis === "x" ? scrollbar[1] : scrollbar[0],
				    contentWrapper = o.axis === "yx" ? "<div id='mCSB_" + d.idx + "_container_wrapper' class='mCSB_container_wrapper' />" : "",
				    autoHideClass = o.autoHideScrollbar ? " " + classes[6] : "",
				    scrollbarDirClass = o.axis !== "x" && d.langDir === "rtl" ? " " + classes[7] : "";
				if (o.setWidth) {
					$this.css("width", o.setWidth);
				} /* set element width */
				if (o.setHeight) {
					$this.css("height", o.setHeight);
				} /* set element height */
				o.setLeft = o.axis !== "y" && d.langDir === "rtl" ? "989999px" : o.setLeft; /* adjust left position for rtl direction */
				$this.addClass(pluginNS + " _" + pluginPfx + "_" + d.idx + autoHideClass + scrollbarDirClass).wrapInner("<div id='mCSB_" + d.idx + "' class='mCustomScrollBox mCS-" + o.theme + " " + wrapperClass + "'><div id='mCSB_" + d.idx + "_container' class='mCSB_container' style='position:relative; top:" + o.setTop + "; left:" + o.setLeft + ";' dir='" + d.langDir + "' /></div>");
				var mCustomScrollBox = $("#mCSB_" + d.idx),
				    mCSB_container = $("#mCSB_" + d.idx + "_container");
				if (o.axis !== "y" && !o.advanced.autoExpandHorizontalScroll) {
					mCSB_container.css("width", _contentWidth(mCSB_container));
				}
				if (o.scrollbarPosition === "outside") {
					if ($this.css("position") === "static") {
						/* requires elements with non-static position */
						$this.css("position", "relative");
					}
					$this.css("overflow", "visible");
					mCustomScrollBox.addClass("mCSB_outside").after(scrollbars);
				} else {
					mCustomScrollBox.addClass("mCSB_inside").append(scrollbars);
					mCSB_container.wrap(contentWrapper);
				}
				_scrollButtons.call(this); /* add scrollbar buttons */
				/* minimum dragger length */
				var mCSB_dragger = [$("#mCSB_" + d.idx + "_dragger_vertical"), $("#mCSB_" + d.idx + "_dragger_horizontal")];
				mCSB_dragger[0].css("min-height", mCSB_dragger[0].height());
				mCSB_dragger[1].css("min-width", mCSB_dragger[1].width());
			},

			/* -------------------- */

			/* calculates content width */
			_contentWidth = function _contentWidth(el) {
				var val = [el[0].scrollWidth, Math.max.apply(Math, el.children().map(function () {
					return $(this).outerWidth(true);
				}).get())],
				    w = el.parent().width();
				return val[0] > w ? val[0] : val[1] > w ? val[1] : "100%";
			},

			/* -------------------- */

			/* expands content horizontally */
			_expandContentHorizontally = function _expandContentHorizontally() {
				var $this = $(this),
				    d = $this.data(pluginPfx),
				    o = d.opt,
				    mCSB_container = $("#mCSB_" + d.idx + "_container");
				if (o.advanced.autoExpandHorizontalScroll && o.axis !== "y") {
					/* calculate scrollWidth */
					mCSB_container.css({ "width": "auto", "min-width": 0, "overflow-x": "scroll" });
					var w = Math.ceil(mCSB_container[0].scrollWidth);
					if (o.advanced.autoExpandHorizontalScroll === 3 || o.advanced.autoExpandHorizontalScroll !== 2 && w > mCSB_container.parent().width()) {
						mCSB_container.css({ "width": w, "min-width": "100%", "overflow-x": "inherit" });
					} else {
						/* 
	     wrap content with an infinite width div and set its position to absolute and width to auto. 
	     Setting width to auto before calculating the actual width is important! 
	     We must let the browser set the width as browser zoom values are impossible to calculate.
	     */
						mCSB_container.css({ "overflow-x": "inherit", "position": "absolute" }).wrap("<div class='mCSB_h_wrapper' style='position:relative; left:0; width:999999px;' />").css({ /* set actual width, original position and un-wrap */
							/* 
	      get the exact width (with decimals) and then round-up. 
	      Using jquery outerWidth() will round the width value which will mess up with inner elements that have non-integer width
	      */
							"width": Math.ceil(mCSB_container[0].getBoundingClientRect().right + 0.4) - Math.floor(mCSB_container[0].getBoundingClientRect().left),
							"min-width": "100%",
							"position": "relative"
						}).unwrap();
					}
				}
			},

			/* -------------------- */

			/* adds scrollbar buttons */
			_scrollButtons = function _scrollButtons() {
				var $this = $(this),
				    d = $this.data(pluginPfx),
				    o = d.opt,
				    mCSB_scrollTools = $(".mCSB_" + d.idx + "_scrollbar:first"),
				    tabindex = !_isNumeric(o.scrollButtons.tabindex) ? "" : "tabindex='" + o.scrollButtons.tabindex + "'",
				    btnHTML = ["<a href='#' class='" + classes[13] + "' " + tabindex + " />", "<a href='#' class='" + classes[14] + "' " + tabindex + " />", "<a href='#' class='" + classes[15] + "' " + tabindex + " />", "<a href='#' class='" + classes[16] + "' " + tabindex + " />"],
				    btn = [o.axis === "x" ? btnHTML[2] : btnHTML[0], o.axis === "x" ? btnHTML[3] : btnHTML[1], btnHTML[2], btnHTML[3]];
				if (o.scrollButtons.enable) {
					mCSB_scrollTools.prepend(btn[0]).append(btn[1]).next(".mCSB_scrollTools").prepend(btn[2]).append(btn[3]);
				}
			},

			/* -------------------- */

			/* auto-adjusts scrollbar dragger length */
			_setDraggerLength = function _setDraggerLength() {
				var $this = $(this),
				    d = $this.data(pluginPfx),
				    mCustomScrollBox = $("#mCSB_" + d.idx),
				    mCSB_container = $("#mCSB_" + d.idx + "_container"),
				    mCSB_dragger = [$("#mCSB_" + d.idx + "_dragger_vertical"), $("#mCSB_" + d.idx + "_dragger_horizontal")],
				    ratio = [mCustomScrollBox.height() / mCSB_container.outerHeight(false), mCustomScrollBox.width() / mCSB_container.outerWidth(false)],
				    l = [parseInt(mCSB_dragger[0].css("min-height")), Math.round(ratio[0] * mCSB_dragger[0].parent().height()), parseInt(mCSB_dragger[1].css("min-width")), Math.round(ratio[1] * mCSB_dragger[1].parent().width())],
				    h = oldIE && l[1] < l[0] ? l[0] : l[1],
				    w = oldIE && l[3] < l[2] ? l[2] : l[3];
				mCSB_dragger[0].css({
					"height": h, "max-height": mCSB_dragger[0].parent().height() - 10
				}).find(".mCSB_dragger_bar").css({ "line-height": l[0] + "px" });
				mCSB_dragger[1].css({
					"width": w, "max-width": mCSB_dragger[1].parent().width() - 10
				});
			},

			/* -------------------- */

			/* calculates scrollbar to content ratio */
			_scrollRatio = function _scrollRatio() {
				var $this = $(this),
				    d = $this.data(pluginPfx),
				    mCustomScrollBox = $("#mCSB_" + d.idx),
				    mCSB_container = $("#mCSB_" + d.idx + "_container"),
				    mCSB_dragger = [$("#mCSB_" + d.idx + "_dragger_vertical"), $("#mCSB_" + d.idx + "_dragger_horizontal")],
				    scrollAmount = [mCSB_container.outerHeight(false) - mCustomScrollBox.height(), mCSB_container.outerWidth(false) - mCustomScrollBox.width()],
				    ratio = [scrollAmount[0] / (mCSB_dragger[0].parent().height() - mCSB_dragger[0].height()), scrollAmount[1] / (mCSB_dragger[1].parent().width() - mCSB_dragger[1].width())];
				d.scrollRatio = { y: ratio[0], x: ratio[1] };
			},

			/* -------------------- */

			/* toggles scrolling classes */
			_onDragClasses = function _onDragClasses(el, action, xpnd) {
				var expandClass = xpnd ? classes[0] + "_expanded" : "",
				    scrollbar = el.closest(".mCSB_scrollTools");
				if (action === "active") {
					el.toggleClass(classes[0] + " " + expandClass);scrollbar.toggleClass(classes[1]);
					el[0]._draggable = el[0]._draggable ? 0 : 1;
				} else {
					if (!el[0]._draggable) {
						if (action === "hide") {
							el.removeClass(classes[0]);scrollbar.removeClass(classes[1]);
						} else {
							el.addClass(classes[0]);scrollbar.addClass(classes[1]);
						}
					}
				}
			},

			/* -------------------- */

			/* checks if content overflows its container to determine if scrolling is required */
			_overflowed = function _overflowed() {
				var $this = $(this),
				    d = $this.data(pluginPfx),
				    mCustomScrollBox = $("#mCSB_" + d.idx),
				    mCSB_container = $("#mCSB_" + d.idx + "_container"),
				    contentHeight = d.overflowed == null ? mCSB_container.height() : mCSB_container.outerHeight(false),
				    contentWidth = d.overflowed == null ? mCSB_container.width() : mCSB_container.outerWidth(false),
				    h = mCSB_container[0].scrollHeight,
				    w = mCSB_container[0].scrollWidth;
				if (h > contentHeight) {
					contentHeight = h;
				}
				if (w > contentWidth) {
					contentWidth = w;
				}
				return [contentHeight > mCustomScrollBox.height(), contentWidth > mCustomScrollBox.width()];
			},

			/* -------------------- */

			/* resets content position to 0 */
			_resetContentPosition = function _resetContentPosition() {
				var $this = $(this),
				    d = $this.data(pluginPfx),
				    o = d.opt,
				    mCustomScrollBox = $("#mCSB_" + d.idx),
				    mCSB_container = $("#mCSB_" + d.idx + "_container"),
				    mCSB_dragger = [$("#mCSB_" + d.idx + "_dragger_vertical"), $("#mCSB_" + d.idx + "_dragger_horizontal")];
				_stop($this); /* stop any current scrolling before resetting */
				if (o.axis !== "x" && !d.overflowed[0] || o.axis === "y" && d.overflowed[0]) {
					/* reset y */
					mCSB_dragger[0].add(mCSB_container).css("top", 0);
					_scrollTo($this, "_resetY");
				}
				if (o.axis !== "y" && !d.overflowed[1] || o.axis === "x" && d.overflowed[1]) {
					/* reset x */
					var cx = dx = 0;
					if (d.langDir === "rtl") {
						/* adjust left position for rtl direction */
						cx = mCustomScrollBox.width() - mCSB_container.outerWidth(false);
						dx = Math.abs(cx / d.scrollRatio.x);
					}
					mCSB_container.css("left", cx);
					mCSB_dragger[1].css("left", dx);
					_scrollTo($this, "_resetX");
				}
			},

			/* -------------------- */

			/* binds scrollbar events */
			_bindEvents = function _bindEvents() {
				var $this = $(this),
				    d = $this.data(pluginPfx),
				    o = d.opt;
				if (!d.bindEvents) {
					/* check if events are already bound */
					_draggable.call(this);
					if (o.contentTouchScroll) {
						_contentDraggable.call(this);
					}
					_selectable.call(this);
					if (o.mouseWheel.enable) {
						/* bind mousewheel fn when plugin is available */
						var _mwt = function _mwt() {
							mousewheelTimeout = setTimeout(function () {
								if (!$.event.special.mousewheel) {
									_mwt();
								} else {
									clearTimeout(mousewheelTimeout);
									_mousewheel.call($this[0]);
								}
							}, 100);
						};

						var mousewheelTimeout;
						_mwt();
					}
					_draggerRail.call(this);
					_wrapperScroll.call(this);
					if (o.advanced.autoScrollOnFocus) {
						_focus.call(this);
					}
					if (o.scrollButtons.enable) {
						_buttons.call(this);
					}
					if (o.keyboard.enable) {
						_keyboard.call(this);
					}
					d.bindEvents = true;
				}
			},

			/* -------------------- */

			/* unbinds scrollbar events */
			_unbindEvents = function _unbindEvents() {
				var $this = $(this),
				    d = $this.data(pluginPfx),
				    o = d.opt,
				    namespace = pluginPfx + "_" + d.idx,
				    sb = ".mCSB_" + d.idx + "_scrollbar",
				    sel = $("#mCSB_" + d.idx + ",#mCSB_" + d.idx + "_container,#mCSB_" + d.idx + "_container_wrapper," + sb + " ." + classes[12] + ",#mCSB_" + d.idx + "_dragger_vertical,#mCSB_" + d.idx + "_dragger_horizontal," + sb + ">a"),
				    mCSB_container = $("#mCSB_" + d.idx + "_container");
				if (o.advanced.releaseDraggableSelectors) {
					sel.add($(o.advanced.releaseDraggableSelectors));
				}
				if (o.advanced.extraDraggableSelectors) {
					sel.add($(o.advanced.extraDraggableSelectors));
				}
				if (d.bindEvents) {
					/* check if events are bound */
					/* unbind namespaced events from document/selectors */
					$(document).add($(!_canAccessIFrame() || top.document)).unbind("." + namespace);
					sel.each(function () {
						$(this).unbind("." + namespace);
					});
					/* clear and delete timeouts/objects */
					clearTimeout($this[0]._focusTimeout);_delete($this[0], "_focusTimeout");
					clearTimeout(d.sequential.step);_delete(d.sequential, "step");
					clearTimeout(mCSB_container[0].onCompleteTimeout);_delete(mCSB_container[0], "onCompleteTimeout");
					d.bindEvents = false;
				}
			},

			/* -------------------- */

			/* toggles scrollbar visibility */
			_scrollbarVisibility = function _scrollbarVisibility(disabled) {
				var $this = $(this),
				    d = $this.data(pluginPfx),
				    o = d.opt,
				    contentWrapper = $("#mCSB_" + d.idx + "_container_wrapper"),
				    content = contentWrapper.length ? contentWrapper : $("#mCSB_" + d.idx + "_container"),
				    scrollbar = [$("#mCSB_" + d.idx + "_scrollbar_vertical"), $("#mCSB_" + d.idx + "_scrollbar_horizontal")],
				    mCSB_dragger = [scrollbar[0].find(".mCSB_dragger"), scrollbar[1].find(".mCSB_dragger")];
				if (o.axis !== "x") {
					if (d.overflowed[0] && !disabled) {
						scrollbar[0].add(mCSB_dragger[0]).add(scrollbar[0].children("a")).css("display", "block");
						content.removeClass(classes[8] + " " + classes[10]);
					} else {
						if (o.alwaysShowScrollbar) {
							if (o.alwaysShowScrollbar !== 2) {
								mCSB_dragger[0].css("display", "none");
							}
							content.removeClass(classes[10]);
						} else {
							scrollbar[0].css("display", "none");
							content.addClass(classes[10]);
						}
						content.addClass(classes[8]);
					}
				}
				if (o.axis !== "y") {
					if (d.overflowed[1] && !disabled) {
						scrollbar[1].add(mCSB_dragger[1]).add(scrollbar[1].children("a")).css("display", "block");
						content.removeClass(classes[9] + " " + classes[11]);
					} else {
						if (o.alwaysShowScrollbar) {
							if (o.alwaysShowScrollbar !== 2) {
								mCSB_dragger[1].css("display", "none");
							}
							content.removeClass(classes[11]);
						} else {
							scrollbar[1].css("display", "none");
							content.addClass(classes[11]);
						}
						content.addClass(classes[9]);
					}
				}
				if (!d.overflowed[0] && !d.overflowed[1]) {
					$this.addClass(classes[5]);
				} else {
					$this.removeClass(classes[5]);
				}
			},

			/* -------------------- */

			/* returns input coordinates of pointer, touch and mouse events (relative to document) */
			_coordinates = function _coordinates(e) {
				var t = e.type,
				    o = e.target.ownerDocument !== document && frameElement !== null ? [$(frameElement).offset().top, $(frameElement).offset().left] : null,
				    io = _canAccessIFrame() && e.target.ownerDocument !== top.document && frameElement !== null ? [$(e.view.frameElement).offset().top, $(e.view.frameElement).offset().left] : [0, 0];
				switch (t) {
					case "pointerdown":case "MSPointerDown":case "pointermove":case "MSPointerMove":case "pointerup":case "MSPointerUp":
						return o ? [e.originalEvent.pageY - o[0] + io[0], e.originalEvent.pageX - o[1] + io[1], false] : [e.originalEvent.pageY, e.originalEvent.pageX, false];
						break;
					case "touchstart":case "touchmove":case "touchend":
						var touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0],
						    touches = e.originalEvent.touches.length || e.originalEvent.changedTouches.length;
						return e.target.ownerDocument !== document ? [touch.screenY, touch.screenX, touches > 1] : [touch.pageY, touch.pageX, touches > 1];
						break;
					default:
						return o ? [e.pageY - o[0] + io[0], e.pageX - o[1] + io[1], false] : [e.pageY, e.pageX, false];
				}
			},

			/* -------------------- */

			/* 
	  SCROLLBAR DRAG EVENTS
	  scrolls content via scrollbar dragging 
	  */
			_draggable = function _draggable() {
				var $this = $(this),
				    d = $this.data(pluginPfx),
				    o = d.opt,
				    namespace = pluginPfx + "_" + d.idx,
				    draggerId = ["mCSB_" + d.idx + "_dragger_vertical", "mCSB_" + d.idx + "_dragger_horizontal"],
				    mCSB_container = $("#mCSB_" + d.idx + "_container"),
				    mCSB_dragger = $("#" + draggerId[0] + ",#" + draggerId[1]),
				    draggable,
				    dragY,
				    dragX,
				    rds = o.advanced.releaseDraggableSelectors ? mCSB_dragger.add($(o.advanced.releaseDraggableSelectors)) : mCSB_dragger,
				    eds = o.advanced.extraDraggableSelectors ? $(!_canAccessIFrame() || top.document).add($(o.advanced.extraDraggableSelectors)) : $(!_canAccessIFrame() || top.document);
				mCSB_dragger.bind("contextmenu." + namespace, function (e) {
					e.preventDefault(); //prevent right click
				}).bind("mousedown." + namespace + " touchstart." + namespace + " pointerdown." + namespace + " MSPointerDown." + namespace, function (e) {
					e.stopImmediatePropagation();
					e.preventDefault();
					if (!_mouseBtnLeft(e)) {
						return;
					} /* left mouse button only */
					touchActive = true;
					if (oldIE) {
						document.onselectstart = function () {
							return false;
						};
					} /* disable text selection for IE < 9 */
					_iframe.call(mCSB_container, false); /* enable scrollbar dragging over iframes by disabling their events */
					_stop($this);
					draggable = $(this);
					var offset = draggable.offset(),
					    y = _coordinates(e)[0] - offset.top,
					    x = _coordinates(e)[1] - offset.left,
					    h = draggable.height() + offset.top,
					    w = draggable.width() + offset.left;
					if (y < h && y > 0 && x < w && x > 0) {
						dragY = y;
						dragX = x;
					}
					_onDragClasses(draggable, "active", o.autoExpandScrollbar);
				}).bind("touchmove." + namespace, function (e) {
					e.stopImmediatePropagation();
					e.preventDefault();
					var offset = draggable.offset(),
					    y = _coordinates(e)[0] - offset.top,
					    x = _coordinates(e)[1] - offset.left;
					_drag(dragY, dragX, y, x);
				});
				$(document).add(eds).bind("mousemove." + namespace + " pointermove." + namespace + " MSPointerMove." + namespace, function (e) {
					if (draggable) {
						var offset = draggable.offset(),
						    y = _coordinates(e)[0] - offset.top,
						    x = _coordinates(e)[1] - offset.left;
						if (dragY === y && dragX === x) {
							return;
						} /* has it really moved? */
						_drag(dragY, dragX, y, x);
					}
				}).add(rds).bind("mouseup." + namespace + " touchend." + namespace + " pointerup." + namespace + " MSPointerUp." + namespace, function (e) {
					if (draggable) {
						_onDragClasses(draggable, "active", o.autoExpandScrollbar);
						draggable = null;
					}
					touchActive = false;
					if (oldIE) {
						document.onselectstart = null;
					} /* enable text selection for IE < 9 */
					_iframe.call(mCSB_container, true); /* enable iframes events */
				});
				function _drag(dragY, dragX, y, x) {
					mCSB_container[0].idleTimer = o.scrollInertia < 233 ? 250 : 0;
					if (draggable.attr("id") === draggerId[1]) {
						var dir = "x",
						    to = (draggable[0].offsetLeft - dragX + x) * d.scrollRatio.x;
					} else {
						var dir = "y",
						    to = (draggable[0].offsetTop - dragY + y) * d.scrollRatio.y;
					}
					_scrollTo($this, to.toString(), { dir: dir, drag: true });
				}
			},

			/* -------------------- */

			/* 
	  TOUCH SWIPE EVENTS
	  scrolls content via touch swipe 
	  Emulates the native touch-swipe scrolling with momentum found in iOS, Android and WP devices 
	  */
			_contentDraggable = function _contentDraggable() {
				var $this = $(this),
				    d = $this.data(pluginPfx),
				    o = d.opt,
				    namespace = pluginPfx + "_" + d.idx,
				    mCustomScrollBox = $("#mCSB_" + d.idx),
				    mCSB_container = $("#mCSB_" + d.idx + "_container"),
				    mCSB_dragger = [$("#mCSB_" + d.idx + "_dragger_vertical"), $("#mCSB_" + d.idx + "_dragger_horizontal")],
				    draggable,
				    dragY,
				    dragX,
				    touchStartY,
				    touchStartX,
				    touchMoveY = [],
				    touchMoveX = [],
				    startTime,
				    runningTime,
				    endTime,
				    distance,
				    speed,
				    amount,
				    durA = 0,
				    durB,
				    overwrite = o.axis === "yx" ? "none" : "all",
				    touchIntent = [],
				    touchDrag,
				    docDrag,
				    iframe = mCSB_container.find("iframe"),
				    events = ["touchstart." + namespace + " pointerdown." + namespace + " MSPointerDown." + namespace, //start
				"touchmove." + namespace + " pointermove." + namespace + " MSPointerMove." + namespace, //move
				"touchend." + namespace + " pointerup." + namespace + " MSPointerUp." + namespace //end
				],
				    touchAction = document.body.style.touchAction !== undefined && document.body.style.touchAction !== "";
				mCSB_container.bind(events[0], function (e) {
					_onTouchstart(e);
				}).bind(events[1], function (e) {
					_onTouchmove(e);
				});
				mCustomScrollBox.bind(events[0], function (e) {
					_onTouchstart2(e);
				}).bind(events[2], function (e) {
					_onTouchend(e);
				});
				if (iframe.length) {
					iframe.each(function () {
						$(this).bind("load", function () {
							/* bind events on accessible iframes */
							if (_canAccessIFrame(this)) {
								$(this.contentDocument || this.contentWindow.document).bind(events[0], function (e) {
									_onTouchstart(e);
									_onTouchstart2(e);
								}).bind(events[1], function (e) {
									_onTouchmove(e);
								}).bind(events[2], function (e) {
									_onTouchend(e);
								});
							}
						});
					});
				}
				function _onTouchstart(e) {
					if (!_pointerTouch(e) || touchActive || _coordinates(e)[2]) {
						touchable = 0;return;
					}
					touchable = 1;touchDrag = 0;docDrag = 0;draggable = 1;
					$this.removeClass("mCS_touch_action");
					var offset = mCSB_container.offset();
					dragY = _coordinates(e)[0] - offset.top;
					dragX = _coordinates(e)[1] - offset.left;
					touchIntent = [_coordinates(e)[0], _coordinates(e)[1]];
				}
				function _onTouchmove(e) {
					if (!_pointerTouch(e) || touchActive || _coordinates(e)[2]) {
						return;
					}
					if (!o.documentTouchScroll) {
						e.preventDefault();
					}
					e.stopImmediatePropagation();
					if (docDrag && !touchDrag) {
						return;
					}
					if (draggable) {
						runningTime = _getTime();
						var offset = mCustomScrollBox.offset(),
						    y = _coordinates(e)[0] - offset.top,
						    x = _coordinates(e)[1] - offset.left,
						    easing = "mcsLinearOut";
						touchMoveY.push(y);
						touchMoveX.push(x);
						touchIntent[2] = Math.abs(_coordinates(e)[0] - touchIntent[0]);touchIntent[3] = Math.abs(_coordinates(e)[1] - touchIntent[1]);
						if (d.overflowed[0]) {
							var limit = mCSB_dragger[0].parent().height() - mCSB_dragger[0].height(),
							    prevent = dragY - y > 0 && y - dragY > -(limit * d.scrollRatio.y) && (touchIntent[3] * 2 < touchIntent[2] || o.axis === "yx");
						}
						if (d.overflowed[1]) {
							var limitX = mCSB_dragger[1].parent().width() - mCSB_dragger[1].width(),
							    preventX = dragX - x > 0 && x - dragX > -(limitX * d.scrollRatio.x) && (touchIntent[2] * 2 < touchIntent[3] || o.axis === "yx");
						}
						if (prevent || preventX) {
							/* prevent native document scrolling */
							if (!touchAction) {
								e.preventDefault();
							}
							touchDrag = 1;
						} else {
							docDrag = 1;
							$this.addClass("mCS_touch_action");
						}
						if (touchAction) {
							e.preventDefault();
						}
						amount = o.axis === "yx" ? [dragY - y, dragX - x] : o.axis === "x" ? [null, dragX - x] : [dragY - y, null];
						mCSB_container[0].idleTimer = 250;
						if (d.overflowed[0]) {
							_drag(amount[0], durA, easing, "y", "all", true);
						}
						if (d.overflowed[1]) {
							_drag(amount[1], durA, easing, "x", overwrite, true);
						}
					}
				}
				function _onTouchstart2(e) {
					if (!_pointerTouch(e) || touchActive || _coordinates(e)[2]) {
						touchable = 0;return;
					}
					touchable = 1;
					e.stopImmediatePropagation();
					_stop($this);
					startTime = _getTime();
					var offset = mCustomScrollBox.offset();
					touchStartY = _coordinates(e)[0] - offset.top;
					touchStartX = _coordinates(e)[1] - offset.left;
					touchMoveY = [];touchMoveX = [];
				}
				function _onTouchend(e) {
					if (!_pointerTouch(e) || touchActive || _coordinates(e)[2]) {
						return;
					}
					draggable = 0;
					e.stopImmediatePropagation();
					touchDrag = 0;docDrag = 0;
					endTime = _getTime();
					var offset = mCustomScrollBox.offset(),
					    y = _coordinates(e)[0] - offset.top,
					    x = _coordinates(e)[1] - offset.left;
					if (endTime - runningTime > 30) {
						return;
					}
					speed = 1000 / (endTime - startTime);
					var easing = "mcsEaseOut",
					    slow = speed < 2.5,
					    diff = slow ? [touchMoveY[touchMoveY.length - 2], touchMoveX[touchMoveX.length - 2]] : [0, 0];
					distance = slow ? [y - diff[0], x - diff[1]] : [y - touchStartY, x - touchStartX];
					var absDistance = [Math.abs(distance[0]), Math.abs(distance[1])];
					speed = slow ? [Math.abs(distance[0] / 4), Math.abs(distance[1] / 4)] : [speed, speed];
					var a = [Math.abs(mCSB_container[0].offsetTop) - distance[0] * _m(absDistance[0] / speed[0], speed[0]), Math.abs(mCSB_container[0].offsetLeft) - distance[1] * _m(absDistance[1] / speed[1], speed[1])];
					amount = o.axis === "yx" ? [a[0], a[1]] : o.axis === "x" ? [null, a[1]] : [a[0], null];
					durB = [absDistance[0] * 4 + o.scrollInertia, absDistance[1] * 4 + o.scrollInertia];
					var md = parseInt(o.contentTouchScroll) || 0; /* absolute minimum distance required */
					amount[0] = absDistance[0] > md ? amount[0] : 0;
					amount[1] = absDistance[1] > md ? amount[1] : 0;
					if (d.overflowed[0]) {
						_drag(amount[0], durB[0], easing, "y", overwrite, false);
					}
					if (d.overflowed[1]) {
						_drag(amount[1], durB[1], easing, "x", overwrite, false);
					}
				}
				function _m(ds, s) {
					var r = [s * 1.5, s * 2, s / 1.5, s / 2];
					if (ds > 90) {
						return s > 4 ? r[0] : r[3];
					} else if (ds > 60) {
						return s > 3 ? r[3] : r[2];
					} else if (ds > 30) {
						return s > 8 ? r[1] : s > 6 ? r[0] : s > 4 ? s : r[2];
					} else {
						return s > 8 ? s : r[3];
					}
				}
				function _drag(amount, dur, easing, dir, overwrite, drag) {
					if (!amount) {
						return;
					}
					_scrollTo($this, amount.toString(), { dur: dur, scrollEasing: easing, dir: dir, overwrite: overwrite, drag: drag });
				}
			},

			/* -------------------- */

			/* 
	  SELECT TEXT EVENTS 
	  scrolls content when text is selected 
	  */
			_selectable = function _selectable() {
				var $this = $(this),
				    d = $this.data(pluginPfx),
				    o = d.opt,
				    seq = d.sequential,
				    namespace = pluginPfx + "_" + d.idx,
				    mCSB_container = $("#mCSB_" + d.idx + "_container"),
				    wrapper = mCSB_container.parent(),
				    action;
				mCSB_container.bind("mousedown." + namespace, function (e) {
					if (touchable) {
						return;
					}
					if (!action) {
						action = 1;touchActive = true;
					}
				}).add(document).bind("mousemove." + namespace, function (e) {
					if (!touchable && action && _sel()) {
						var offset = mCSB_container.offset(),
						    y = _coordinates(e)[0] - offset.top + mCSB_container[0].offsetTop,
						    x = _coordinates(e)[1] - offset.left + mCSB_container[0].offsetLeft;
						if (y > 0 && y < wrapper.height() && x > 0 && x < wrapper.width()) {
							if (seq.step) {
								_seq("off", null, "stepped");
							}
						} else {
							if (o.axis !== "x" && d.overflowed[0]) {
								if (y < 0) {
									_seq("on", 38);
								} else if (y > wrapper.height()) {
									_seq("on", 40);
								}
							}
							if (o.axis !== "y" && d.overflowed[1]) {
								if (x < 0) {
									_seq("on", 37);
								} else if (x > wrapper.width()) {
									_seq("on", 39);
								}
							}
						}
					}
				}).bind("mouseup." + namespace + " dragend." + namespace, function (e) {
					if (touchable) {
						return;
					}
					if (action) {
						action = 0;_seq("off", null);
					}
					touchActive = false;
				});
				function _sel() {
					return window.getSelection ? window.getSelection().toString() : document.selection && document.selection.type != "Control" ? document.selection.createRange().text : 0;
				}
				function _seq(a, c, s) {
					seq.type = s && action ? "stepped" : "stepless";
					seq.scrollAmount = 10;
					_sequentialScroll($this, a, c, "mcsLinearOut", s ? 60 : null);
				}
			},

			/* -------------------- */

			/* 
	  MOUSE WHEEL EVENT
	  scrolls content via mouse-wheel 
	  via mouse-wheel plugin (https://github.com/brandonaaron/jquery-mousewheel)
	  */
			_mousewheel = function _mousewheel() {
				if (!$(this).data(pluginPfx)) {
					return;
				} /* Check if the scrollbar is ready to use mousewheel events (issue: #185) */
				var $this = $(this),
				    d = $this.data(pluginPfx),
				    o = d.opt,
				    namespace = pluginPfx + "_" + d.idx,
				    mCustomScrollBox = $("#mCSB_" + d.idx),
				    mCSB_dragger = [$("#mCSB_" + d.idx + "_dragger_vertical"), $("#mCSB_" + d.idx + "_dragger_horizontal")],
				    iframe = $("#mCSB_" + d.idx + "_container").find("iframe");
				if (iframe.length) {
					iframe.each(function () {
						$(this).bind("load", function () {
							/* bind events on accessible iframes */
							if (_canAccessIFrame(this)) {
								$(this.contentDocument || this.contentWindow.document).bind("mousewheel." + namespace, function (e, delta) {
									_onMousewheel(e, delta);
								});
							}
						});
					});
				}
				mCustomScrollBox.bind("mousewheel." + namespace, function (e, delta) {
					_onMousewheel(e, delta);
				});
				function _onMousewheel(e, delta) {
					_stop($this);
					if (_disableMousewheel($this, e.target)) {
						return;
					} /* disables mouse-wheel when hovering specific elements */
					var deltaFactor = o.mouseWheel.deltaFactor !== "auto" ? parseInt(o.mouseWheel.deltaFactor) : oldIE && e.deltaFactor < 100 ? 100 : e.deltaFactor || 100,
					    dur = o.scrollInertia;
					if (o.axis === "x" || o.mouseWheel.axis === "x") {
						var dir = "x",
						    px = [Math.round(deltaFactor * d.scrollRatio.x), parseInt(o.mouseWheel.scrollAmount)],
						    amount = o.mouseWheel.scrollAmount !== "auto" ? px[1] : px[0] >= mCustomScrollBox.width() ? mCustomScrollBox.width() * 0.9 : px[0],
						    contentPos = Math.abs($("#mCSB_" + d.idx + "_container")[0].offsetLeft),
						    draggerPos = mCSB_dragger[1][0].offsetLeft,
						    limit = mCSB_dragger[1].parent().width() - mCSB_dragger[1].width(),
						    dlt = o.mouseWheel.axis === "y" ? e.deltaY || delta : e.deltaX;
					} else {
						var dir = "y",
						    px = [Math.round(deltaFactor * d.scrollRatio.y), parseInt(o.mouseWheel.scrollAmount)],
						    amount = o.mouseWheel.scrollAmount !== "auto" ? px[1] : px[0] >= mCustomScrollBox.height() ? mCustomScrollBox.height() * 0.9 : px[0],
						    contentPos = Math.abs($("#mCSB_" + d.idx + "_container")[0].offsetTop),
						    draggerPos = mCSB_dragger[0][0].offsetTop,
						    limit = mCSB_dragger[0].parent().height() - mCSB_dragger[0].height(),
						    dlt = e.deltaY || delta;
					}
					if (dir === "y" && !d.overflowed[0] || dir === "x" && !d.overflowed[1]) {
						return;
					}
					if (o.mouseWheel.invert || e.webkitDirectionInvertedFromDevice) {
						dlt = -dlt;
					}
					if (o.mouseWheel.normalizeDelta) {
						dlt = dlt < 0 ? -1 : 1;
					}
					if (dlt > 0 && draggerPos !== 0 || dlt < 0 && draggerPos !== limit || o.mouseWheel.preventDefault) {
						e.stopImmediatePropagation();
						e.preventDefault();
					}
					if (e.deltaFactor < 5 && !o.mouseWheel.normalizeDelta) {
						//very low deltaFactor values mean some kind of delta acceleration (e.g. osx trackpad), so adjusting scrolling accordingly
						amount = e.deltaFactor;dur = 17;
					}
					_scrollTo($this, (contentPos - dlt * amount).toString(), { dir: dir, dur: dur });
				}
			},

			/* -------------------- */

			/* checks if iframe can be accessed */
			_canAccessIFrameCache = new Object(),
			    _canAccessIFrame = function _canAccessIFrame(iframe) {
				var result = false,
				    cacheKey = false,
				    html = null;
				if (iframe === undefined) {
					cacheKey = "#empty";
				} else if ($(iframe).attr("id") !== undefined) {
					cacheKey = $(iframe).attr("id");
				}
				if (cacheKey !== false && _canAccessIFrameCache[cacheKey] !== undefined) {
					return _canAccessIFrameCache[cacheKey];
				}
				if (!iframe) {
					try {
						var doc = top.document;
						html = doc.body.innerHTML;
					} catch (err) {/* do nothing */}
					result = html !== null;
				} else {
					try {
						var doc = iframe.contentDocument || iframe.contentWindow.document;
						html = doc.body.innerHTML;
					} catch (err) {/* do nothing */}
					result = html !== null;
				}
				if (cacheKey !== false) {
					_canAccessIFrameCache[cacheKey] = result;
				}
				return result;
			},

			/* -------------------- */

			/* switches iframe's pointer-events property (drag, mousewheel etc. over cross-domain iframes) */
			_iframe = function _iframe(evt) {
				var el = this.find("iframe");
				if (!el.length) {
					return;
				} /* check if content contains iframes */
				var val = !evt ? "none" : "auto";
				el.css("pointer-events", val); /* for IE11, iframe's display property should not be "block" */
			},

			/* -------------------- */

			/* disables mouse-wheel when hovering specific elements like select, datalist etc. */
			_disableMousewheel = function _disableMousewheel(el, target) {
				var tag = target.nodeName.toLowerCase(),
				    tags = el.data(pluginPfx).opt.mouseWheel.disableOver,

				/* elements that require focus */
				focusTags = ["select", "textarea"];
				return $.inArray(tag, tags) > -1 && !($.inArray(tag, focusTags) > -1 && !$(target).is(":focus"));
			},

			/* -------------------- */

			/* 
	  DRAGGER RAIL CLICK EVENT
	  scrolls content via dragger rail 
	  */
			_draggerRail = function _draggerRail() {
				var $this = $(this),
				    d = $this.data(pluginPfx),
				    namespace = pluginPfx + "_" + d.idx,
				    mCSB_container = $("#mCSB_" + d.idx + "_container"),
				    wrapper = mCSB_container.parent(),
				    mCSB_draggerContainer = $(".mCSB_" + d.idx + "_scrollbar ." + classes[12]),
				    clickable;
				mCSB_draggerContainer.bind("mousedown." + namespace + " touchstart." + namespace + " pointerdown." + namespace + " MSPointerDown." + namespace, function (e) {
					touchActive = true;
					if (!$(e.target).hasClass("mCSB_dragger")) {
						clickable = 1;
					}
				}).bind("touchend." + namespace + " pointerup." + namespace + " MSPointerUp." + namespace, function (e) {
					touchActive = false;
				}).bind("click." + namespace, function (e) {
					if (!clickable) {
						return;
					}
					clickable = 0;
					if ($(e.target).hasClass(classes[12]) || $(e.target).hasClass("mCSB_draggerRail")) {
						_stop($this);
						var el = $(this),
						    mCSB_dragger = el.find(".mCSB_dragger");
						if (el.parent(".mCSB_scrollTools_horizontal").length > 0) {
							if (!d.overflowed[1]) {
								return;
							}
							var dir = "x",
							    clickDir = e.pageX > mCSB_dragger.offset().left ? -1 : 1,
							    to = Math.abs(mCSB_container[0].offsetLeft) - clickDir * (wrapper.width() * 0.9);
						} else {
							if (!d.overflowed[0]) {
								return;
							}
							var dir = "y",
							    clickDir = e.pageY > mCSB_dragger.offset().top ? -1 : 1,
							    to = Math.abs(mCSB_container[0].offsetTop) - clickDir * (wrapper.height() * 0.9);
						}
						_scrollTo($this, to.toString(), { dir: dir, scrollEasing: "mcsEaseInOut" });
					}
				});
			},

			/* -------------------- */

			/* 
	  FOCUS EVENT
	  scrolls content via element focus (e.g. clicking an input, pressing TAB key etc.)
	  */
			_focus = function _focus() {
				var $this = $(this),
				    d = $this.data(pluginPfx),
				    o = d.opt,
				    namespace = pluginPfx + "_" + d.idx,
				    mCSB_container = $("#mCSB_" + d.idx + "_container"),
				    wrapper = mCSB_container.parent();
				mCSB_container.bind("focusin." + namespace, function (e) {
					var el = $(document.activeElement),
					    nested = mCSB_container.find(".mCustomScrollBox").length,
					    dur = 0;
					if (!el.is(o.advanced.autoScrollOnFocus)) {
						return;
					}
					_stop($this);
					clearTimeout($this[0]._focusTimeout);
					$this[0]._focusTimer = nested ? (dur + 17) * nested : 0;
					$this[0]._focusTimeout = setTimeout(function () {
						var to = [_childPos(el)[0], _childPos(el)[1]],
						    contentPos = [mCSB_container[0].offsetTop, mCSB_container[0].offsetLeft],
						    isVisible = [contentPos[0] + to[0] >= 0 && contentPos[0] + to[0] < wrapper.height() - el.outerHeight(false), contentPos[1] + to[1] >= 0 && contentPos[0] + to[1] < wrapper.width() - el.outerWidth(false)],
						    overwrite = o.axis === "yx" && !isVisible[0] && !isVisible[1] ? "none" : "all";
						if (o.axis !== "x" && !isVisible[0]) {
							_scrollTo($this, to[0].toString(), { dir: "y", scrollEasing: "mcsEaseInOut", overwrite: overwrite, dur: dur });
						}
						if (o.axis !== "y" && !isVisible[1]) {
							_scrollTo($this, to[1].toString(), { dir: "x", scrollEasing: "mcsEaseInOut", overwrite: overwrite, dur: dur });
						}
					}, $this[0]._focusTimer);
				});
			},

			/* -------------------- */

			/* sets content wrapper scrollTop/scrollLeft always to 0 */
			_wrapperScroll = function _wrapperScroll() {
				var $this = $(this),
				    d = $this.data(pluginPfx),
				    namespace = pluginPfx + "_" + d.idx,
				    wrapper = $("#mCSB_" + d.idx + "_container").parent();
				wrapper.bind("scroll." + namespace, function (e) {
					if (wrapper.scrollTop() !== 0 || wrapper.scrollLeft() !== 0) {
						$(".mCSB_" + d.idx + "_scrollbar").css("visibility", "hidden"); /* hide scrollbar(s) */
					}
				});
			},

			/* -------------------- */

			/* 
	  BUTTONS EVENTS
	  scrolls content via up, down, left and right buttons 
	  */
			_buttons = function _buttons() {
				var $this = $(this),
				    d = $this.data(pluginPfx),
				    o = d.opt,
				    seq = d.sequential,
				    namespace = pluginPfx + "_" + d.idx,
				    sel = ".mCSB_" + d.idx + "_scrollbar",
				    btn = $(sel + ">a");
				btn.bind("contextmenu." + namespace, function (e) {
					e.preventDefault(); //prevent right click
				}).bind("mousedown." + namespace + " touchstart." + namespace + " pointerdown." + namespace + " MSPointerDown." + namespace + " mouseup." + namespace + " touchend." + namespace + " pointerup." + namespace + " MSPointerUp." + namespace + " mouseout." + namespace + " pointerout." + namespace + " MSPointerOut." + namespace + " click." + namespace, function (e) {
					e.preventDefault();
					if (!_mouseBtnLeft(e)) {
						return;
					} /* left mouse button only */
					var btnClass = $(this).attr("class");
					seq.type = o.scrollButtons.scrollType;
					switch (e.type) {
						case "mousedown":case "touchstart":case "pointerdown":case "MSPointerDown":
							if (seq.type === "stepped") {
								return;
							}
							touchActive = true;
							d.tweenRunning = false;
							_seq("on", btnClass);
							break;
						case "mouseup":case "touchend":case "pointerup":case "MSPointerUp":
						case "mouseout":case "pointerout":case "MSPointerOut":
							if (seq.type === "stepped") {
								return;
							}
							touchActive = false;
							if (seq.dir) {
								_seq("off", btnClass);
							}
							break;
						case "click":
							if (seq.type !== "stepped" || d.tweenRunning) {
								return;
							}
							_seq("on", btnClass);
							break;
					}
					function _seq(a, c) {
						seq.scrollAmount = o.scrollButtons.scrollAmount;
						_sequentialScroll($this, a, c);
					}
				});
			},

			/* -------------------- */

			/* 
	  KEYBOARD EVENTS
	  scrolls content via keyboard 
	  Keys: up arrow, down arrow, left arrow, right arrow, PgUp, PgDn, Home, End
	  */
			_keyboard = function _keyboard() {
				var $this = $(this),
				    d = $this.data(pluginPfx),
				    o = d.opt,
				    seq = d.sequential,
				    namespace = pluginPfx + "_" + d.idx,
				    mCustomScrollBox = $("#mCSB_" + d.idx),
				    mCSB_container = $("#mCSB_" + d.idx + "_container"),
				    wrapper = mCSB_container.parent(),
				    editables = "input,textarea,select,datalist,keygen,[contenteditable='true']",
				    iframe = mCSB_container.find("iframe"),
				    events = ["blur." + namespace + " keydown." + namespace + " keyup." + namespace];
				if (iframe.length) {
					iframe.each(function () {
						$(this).bind("load", function () {
							/* bind events on accessible iframes */
							if (_canAccessIFrame(this)) {
								$(this.contentDocument || this.contentWindow.document).bind(events[0], function (e) {
									_onKeyboard(e);
								});
							}
						});
					});
				}
				mCustomScrollBox.attr("tabindex", "0").bind(events[0], function (e) {
					_onKeyboard(e);
				});
				function _onKeyboard(e) {
					switch (e.type) {
						case "blur":
							if (d.tweenRunning && seq.dir) {
								_seq("off", null);
							}
							break;
						case "keydown":case "keyup":
							var code = e.keyCode ? e.keyCode : e.which,
							    action = "on";
							if (o.axis !== "x" && (code === 38 || code === 40) || o.axis !== "y" && (code === 37 || code === 39)) {
								/* up (38), down (40), left (37), right (39) arrows */
								if ((code === 38 || code === 40) && !d.overflowed[0] || (code === 37 || code === 39) && !d.overflowed[1]) {
									return;
								}
								if (e.type === "keyup") {
									action = "off";
								}
								if (!$(document.activeElement).is(editables)) {
									e.preventDefault();
									e.stopImmediatePropagation();
									_seq(action, code);
								}
							} else if (code === 33 || code === 34) {
								/* PgUp (33), PgDn (34) */
								if (d.overflowed[0] || d.overflowed[1]) {
									e.preventDefault();
									e.stopImmediatePropagation();
								}
								if (e.type === "keyup") {
									_stop($this);
									var keyboardDir = code === 34 ? -1 : 1;
									if (o.axis === "x" || o.axis === "yx" && d.overflowed[1] && !d.overflowed[0]) {
										var dir = "x",
										    to = Math.abs(mCSB_container[0].offsetLeft) - keyboardDir * (wrapper.width() * 0.9);
									} else {
										var dir = "y",
										    to = Math.abs(mCSB_container[0].offsetTop) - keyboardDir * (wrapper.height() * 0.9);
									}
									_scrollTo($this, to.toString(), { dir: dir, scrollEasing: "mcsEaseInOut" });
								}
							} else if (code === 35 || code === 36) {
								/* End (35), Home (36) */
								if (!$(document.activeElement).is(editables)) {
									if (d.overflowed[0] || d.overflowed[1]) {
										e.preventDefault();
										e.stopImmediatePropagation();
									}
									if (e.type === "keyup") {
										if (o.axis === "x" || o.axis === "yx" && d.overflowed[1] && !d.overflowed[0]) {
											var dir = "x",
											    to = code === 35 ? Math.abs(wrapper.width() - mCSB_container.outerWidth(false)) : 0;
										} else {
											var dir = "y",
											    to = code === 35 ? Math.abs(wrapper.height() - mCSB_container.outerHeight(false)) : 0;
										}
										_scrollTo($this, to.toString(), { dir: dir, scrollEasing: "mcsEaseInOut" });
									}
								}
							}
							break;
					}
					function _seq(a, c) {
						seq.type = o.keyboard.scrollType;
						seq.scrollAmount = o.keyboard.scrollAmount;
						if (seq.type === "stepped" && d.tweenRunning) {
							return;
						}
						_sequentialScroll($this, a, c);
					}
				}
			},

			/* -------------------- */

			/* scrolls content sequentially (used when scrolling via buttons, keyboard arrows etc.) */
			_sequentialScroll = function _sequentialScroll(el, action, trigger, e, s) {
				var d = el.data(pluginPfx),
				    o = d.opt,
				    seq = d.sequential,
				    mCSB_container = $("#mCSB_" + d.idx + "_container"),
				    once = seq.type === "stepped" ? true : false,
				    steplessSpeed = o.scrollInertia < 26 ? 26 : o.scrollInertia,
				    /* 26/1.5=17 */
				steppedSpeed = o.scrollInertia < 1 ? 17 : o.scrollInertia;
				switch (action) {
					case "on":
						seq.dir = [trigger === classes[16] || trigger === classes[15] || trigger === 39 || trigger === 37 ? "x" : "y", trigger === classes[13] || trigger === classes[15] || trigger === 38 || trigger === 37 ? -1 : 1];
						_stop(el);
						if (_isNumeric(trigger) && seq.type === "stepped") {
							return;
						}
						_on(once);
						break;
					case "off":
						_off();
						if (once || d.tweenRunning && seq.dir) {
							_on(true);
						}
						break;
				}

				/* starts sequence */
				function _on(once) {
					if (o.snapAmount) {
						seq.scrollAmount = !(o.snapAmount instanceof Array) ? o.snapAmount : seq.dir[0] === "x" ? o.snapAmount[1] : o.snapAmount[0];
					} /* scrolling snapping */
					var c = seq.type !== "stepped",
					    /* continuous scrolling */
					t = s ? s : !once ? 1000 / 60 : c ? steplessSpeed / 1.5 : steppedSpeed,
					    /* timer */
					m = !once ? 2.5 : c ? 7.5 : 40,
					    /* multiplier */
					contentPos = [Math.abs(mCSB_container[0].offsetTop), Math.abs(mCSB_container[0].offsetLeft)],
					    ratio = [d.scrollRatio.y > 10 ? 10 : d.scrollRatio.y, d.scrollRatio.x > 10 ? 10 : d.scrollRatio.x],
					    amount = seq.dir[0] === "x" ? contentPos[1] + seq.dir[1] * (ratio[1] * m) : contentPos[0] + seq.dir[1] * (ratio[0] * m),
					    px = seq.dir[0] === "x" ? contentPos[1] + seq.dir[1] * parseInt(seq.scrollAmount) : contentPos[0] + seq.dir[1] * parseInt(seq.scrollAmount),
					    to = seq.scrollAmount !== "auto" ? px : amount,
					    easing = e ? e : !once ? "mcsLinear" : c ? "mcsLinearOut" : "mcsEaseInOut",
					    onComplete = !once ? false : true;
					if (once && t < 17) {
						to = seq.dir[0] === "x" ? contentPos[1] : contentPos[0];
					}
					_scrollTo(el, to.toString(), { dir: seq.dir[0], scrollEasing: easing, dur: t, onComplete: onComplete });
					if (once) {
						seq.dir = false;
						return;
					}
					clearTimeout(seq.step);
					seq.step = setTimeout(function () {
						_on();
					}, t);
				}
				/* stops sequence */
				function _off() {
					clearTimeout(seq.step);
					_delete(seq, "step");
					_stop(el);
				}
			},

			/* -------------------- */

			/* returns a yx array from value */
			_arr = function _arr(val) {
				var o = $(this).data(pluginPfx).opt,
				    vals = [];
				if (typeof val === "function") {
					val = val();
				} /* check if the value is a single anonymous function */
				/* check if value is object or array, its length and create an array with yx values */
				if (!(val instanceof Array)) {
					/* object value (e.g. {y:"100",x:"100"}, 100 etc.) */
					vals[0] = val.y ? val.y : val.x || o.axis === "x" ? null : val;
					vals[1] = val.x ? val.x : val.y || o.axis === "y" ? null : val;
				} else {
					/* array value (e.g. [100,100]) */
					vals = val.length > 1 ? [val[0], val[1]] : o.axis === "x" ? [null, val[0]] : [val[0], null];
				}
				/* check if array values are anonymous functions */
				if (typeof vals[0] === "function") {
					vals[0] = vals[0]();
				}
				if (typeof vals[1] === "function") {
					vals[1] = vals[1]();
				}
				return vals;
			},

			/* -------------------- */

			/* translates values (e.g. "top", 100, "100px", "#id") to actual scroll-to positions */
			_to = function _to(val, dir) {
				if (val == null || typeof val == "undefined") {
					return;
				}
				var $this = $(this),
				    d = $this.data(pluginPfx),
				    o = d.opt,
				    mCSB_container = $("#mCSB_" + d.idx + "_container"),
				    wrapper = mCSB_container.parent(),
				    t = typeof val === "undefined" ? "undefined" : _typeof(val);
				if (!dir) {
					dir = o.axis === "x" ? "x" : "y";
				}
				var contentLength = dir === "x" ? mCSB_container.outerWidth(false) - wrapper.width() : mCSB_container.outerHeight(false) - wrapper.height(),
				    contentPos = dir === "x" ? mCSB_container[0].offsetLeft : mCSB_container[0].offsetTop,
				    cssProp = dir === "x" ? "left" : "top";
				switch (t) {
					case "function":
						/* this currently is not used. Consider removing it */
						return val();
						break;
					case "object":
						/* js/jquery object */
						var obj = val.jquery ? val : $(val);
						if (!obj.length) {
							return;
						}
						return dir === "x" ? _childPos(obj)[1] : _childPos(obj)[0];
						break;
					case "string":case "number":
						if (_isNumeric(val)) {
							/* numeric value */
							return Math.abs(val);
						} else if (val.indexOf("%") !== -1) {
							/* percentage value */
							return Math.abs(contentLength * parseInt(val) / 100);
						} else if (val.indexOf("-=") !== -1) {
							/* decrease value */
							return Math.abs(contentPos - parseInt(val.split("-=")[1]));
						} else if (val.indexOf("+=") !== -1) {
							/* inrease value */
							var p = contentPos + parseInt(val.split("+=")[1]);
							return p >= 0 ? 0 : Math.abs(p);
						} else if (val.indexOf("px") !== -1 && _isNumeric(val.split("px")[0])) {
							/* pixels string value (e.g. "100px") */
							return Math.abs(val.split("px")[0]);
						} else {
							if (val === "top" || val === "left") {
								/* special strings */
								return 0;
							} else if (val === "bottom") {
								return Math.abs(wrapper.height() - mCSB_container.outerHeight(false));
							} else if (val === "right") {
								return Math.abs(wrapper.width() - mCSB_container.outerWidth(false));
							} else if (val === "first" || val === "last") {
								var obj = mCSB_container.find(":" + val);
								return dir === "x" ? _childPos(obj)[1] : _childPos(obj)[0];
							} else {
								if ($(val).length) {
									/* jquery selector */
									return dir === "x" ? _childPos($(val))[1] : _childPos($(val))[0];
								} else {
									/* other values (e.g. "100em") */
									mCSB_container.css(cssProp, val);
									methods.update.call(null, $this[0]);
									return;
								}
							}
						}
						break;
				}
			},

			/* -------------------- */

			/* calls the update method automatically */
			_autoUpdate = function _autoUpdate(rem) {
				var $this = $(this),
				    d = $this.data(pluginPfx),
				    o = d.opt,
				    mCSB_container = $("#mCSB_" + d.idx + "_container");
				if (rem) {
					/* 
	    removes autoUpdate timer 
	    usage: _autoUpdate.call(this,"remove");
	    */
					clearTimeout(mCSB_container[0].autoUpdate);
					_delete(mCSB_container[0], "autoUpdate");
					return;
				}
				upd();
				function upd() {
					clearTimeout(mCSB_container[0].autoUpdate);
					if ($this.parents("html").length === 0) {
						/* check element in dom tree */
						$this = null;
						return;
					}
					mCSB_container[0].autoUpdate = setTimeout(function () {
						/* update on specific selector(s) length and size change */
						if (o.advanced.updateOnSelectorChange) {
							d.poll.change.n = sizesSum();
							if (d.poll.change.n !== d.poll.change.o) {
								d.poll.change.o = d.poll.change.n;
								doUpd(3);
								return;
							}
						}
						/* update on main element and scrollbar size changes */
						if (o.advanced.updateOnContentResize) {
							d.poll.size.n = $this[0].scrollHeight + $this[0].scrollWidth + mCSB_container[0].offsetHeight + $this[0].offsetHeight + $this[0].offsetWidth;
							if (d.poll.size.n !== d.poll.size.o) {
								d.poll.size.o = d.poll.size.n;
								doUpd(1);
								return;
							}
						}
						/* update on image load */
						if (o.advanced.updateOnImageLoad) {
							if (!(o.advanced.updateOnImageLoad === "auto" && o.axis === "y")) {
								//by default, it doesn't run on vertical content
								d.poll.img.n = mCSB_container.find("img").length;
								if (d.poll.img.n !== d.poll.img.o) {
									d.poll.img.o = d.poll.img.n;
									mCSB_container.find("img").each(function () {
										imgLoader(this);
									});
									return;
								}
							}
						}
						if (o.advanced.updateOnSelectorChange || o.advanced.updateOnContentResize || o.advanced.updateOnImageLoad) {
							upd();
						}
					}, o.advanced.autoUpdateTimeout);
				}
				/* a tiny image loader */
				function imgLoader(el) {
					if ($(el).hasClass(classes[2])) {
						doUpd();return;
					}
					var img = new Image();
					function createDelegate(contextObject, delegateMethod) {
						return function () {
							return delegateMethod.apply(contextObject, arguments);
						};
					}
					function imgOnLoad() {
						this.onload = null;
						$(el).addClass(classes[2]);
						doUpd(2);
					}
					img.onload = createDelegate(img, imgOnLoad);
					img.src = el.src;
				}
				/* returns the total height and width sum of all elements matching the selector */
				function sizesSum() {
					if (o.advanced.updateOnSelectorChange === true) {
						o.advanced.updateOnSelectorChange = "*";
					}
					var total = 0,
					    sel = mCSB_container.find(o.advanced.updateOnSelectorChange);
					if (o.advanced.updateOnSelectorChange && sel.length > 0) {
						sel.each(function () {
							total += this.offsetHeight + this.offsetWidth;
						});
					}
					return total;
				}
				/* calls the update method */
				function doUpd(cb) {
					clearTimeout(mCSB_container[0].autoUpdate);
					methods.update.call(null, $this[0], cb);
				}
			},

			/* -------------------- */

			/* snaps scrolling to a multiple of a pixels number */
			_snapAmount = function _snapAmount(to, amount, offset) {
				return Math.round(to / amount) * amount - offset;
			},

			/* -------------------- */

			/* stops content and scrollbar animations */
			_stop = function _stop(el) {
				var d = el.data(pluginPfx),
				    sel = $("#mCSB_" + d.idx + "_container,#mCSB_" + d.idx + "_container_wrapper,#mCSB_" + d.idx + "_dragger_vertical,#mCSB_" + d.idx + "_dragger_horizontal");
				sel.each(function () {
					_stopTween.call(this);
				});
			},

			/* -------------------- */

			/* 
	  ANIMATES CONTENT 
	  This is where the actual scrolling happens
	  */
			_scrollTo = function _scrollTo(el, to, options) {
				var d = el.data(pluginPfx),
				    o = d.opt,
				    defaults = {
					trigger: "internal",
					dir: "y",
					scrollEasing: "mcsEaseOut",
					drag: false,
					dur: o.scrollInertia,
					overwrite: "all",
					callbacks: true,
					onStart: true,
					onUpdate: true,
					onComplete: true
				},
				    options = $.extend(defaults, options),
				    dur = [options.dur, options.drag ? 0 : options.dur],
				    mCustomScrollBox = $("#mCSB_" + d.idx),
				    mCSB_container = $("#mCSB_" + d.idx + "_container"),
				    wrapper = mCSB_container.parent(),
				    totalScrollOffsets = o.callbacks.onTotalScrollOffset ? _arr.call(el, o.callbacks.onTotalScrollOffset) : [0, 0],
				    totalScrollBackOffsets = o.callbacks.onTotalScrollBackOffset ? _arr.call(el, o.callbacks.onTotalScrollBackOffset) : [0, 0];
				d.trigger = options.trigger;
				if (wrapper.scrollTop() !== 0 || wrapper.scrollLeft() !== 0) {
					/* always reset scrollTop/Left */
					$(".mCSB_" + d.idx + "_scrollbar").css("visibility", "visible");
					wrapper.scrollTop(0).scrollLeft(0);
				}
				if (to === "_resetY" && !d.contentReset.y) {
					/* callbacks: onOverflowYNone */
					if (_cb("onOverflowYNone")) {
						o.callbacks.onOverflowYNone.call(el[0]);
					}
					d.contentReset.y = 1;
				}
				if (to === "_resetX" && !d.contentReset.x) {
					/* callbacks: onOverflowXNone */
					if (_cb("onOverflowXNone")) {
						o.callbacks.onOverflowXNone.call(el[0]);
					}
					d.contentReset.x = 1;
				}
				if (to === "_resetY" || to === "_resetX") {
					return;
				}
				if ((d.contentReset.y || !el[0].mcs) && d.overflowed[0]) {
					/* callbacks: onOverflowY */
					if (_cb("onOverflowY")) {
						o.callbacks.onOverflowY.call(el[0]);
					}
					d.contentReset.x = null;
				}
				if ((d.contentReset.x || !el[0].mcs) && d.overflowed[1]) {
					/* callbacks: onOverflowX */
					if (_cb("onOverflowX")) {
						o.callbacks.onOverflowX.call(el[0]);
					}
					d.contentReset.x = null;
				}
				if (o.snapAmount) {
					/* scrolling snapping */
					var snapAmount = !(o.snapAmount instanceof Array) ? o.snapAmount : options.dir === "x" ? o.snapAmount[1] : o.snapAmount[0];
					to = _snapAmount(to, snapAmount, o.snapOffset);
				}
				switch (options.dir) {
					case "x":
						var mCSB_dragger = $("#mCSB_" + d.idx + "_dragger_horizontal"),
						    property = "left",
						    contentPos = mCSB_container[0].offsetLeft,
						    limit = [mCustomScrollBox.width() - mCSB_container.outerWidth(false), mCSB_dragger.parent().width() - mCSB_dragger.width()],
						    scrollTo = [to, to === 0 ? 0 : to / d.scrollRatio.x],
						    tso = totalScrollOffsets[1],
						    tsbo = totalScrollBackOffsets[1],
						    totalScrollOffset = tso > 0 ? tso / d.scrollRatio.x : 0,
						    totalScrollBackOffset = tsbo > 0 ? tsbo / d.scrollRatio.x : 0;
						break;
					case "y":
						var mCSB_dragger = $("#mCSB_" + d.idx + "_dragger_vertical"),
						    property = "top",
						    contentPos = mCSB_container[0].offsetTop,
						    limit = [mCustomScrollBox.height() - mCSB_container.outerHeight(false), mCSB_dragger.parent().height() - mCSB_dragger.height()],
						    scrollTo = [to, to === 0 ? 0 : to / d.scrollRatio.y],
						    tso = totalScrollOffsets[0],
						    tsbo = totalScrollBackOffsets[0],
						    totalScrollOffset = tso > 0 ? tso / d.scrollRatio.y : 0,
						    totalScrollBackOffset = tsbo > 0 ? tsbo / d.scrollRatio.y : 0;
						break;
				}
				if (scrollTo[1] < 0 || scrollTo[0] === 0 && scrollTo[1] === 0) {
					scrollTo = [0, 0];
				} else if (scrollTo[1] >= limit[1]) {
					scrollTo = [limit[0], limit[1]];
				} else {
					scrollTo[0] = -scrollTo[0];
				}
				if (!el[0].mcs) {
					_mcs(); /* init mcs object (once) to make it available before callbacks */
					if (_cb("onInit")) {
						o.callbacks.onInit.call(el[0]);
					} /* callbacks: onInit */
				}
				clearTimeout(mCSB_container[0].onCompleteTimeout);
				_tweenTo(mCSB_dragger[0], property, Math.round(scrollTo[1]), dur[1], options.scrollEasing);
				if (!d.tweenRunning && (contentPos === 0 && scrollTo[0] >= 0 || contentPos === limit[0] && scrollTo[0] <= limit[0])) {
					return;
				}
				_tweenTo(mCSB_container[0], property, Math.round(scrollTo[0]), dur[0], options.scrollEasing, options.overwrite, {
					onStart: function onStart() {
						if (options.callbacks && options.onStart && !d.tweenRunning) {
							/* callbacks: onScrollStart */
							if (_cb("onScrollStart")) {
								_mcs();o.callbacks.onScrollStart.call(el[0]);
							}
							d.tweenRunning = true;
							_onDragClasses(mCSB_dragger);
							d.cbOffsets = _cbOffsets();
						}
					}, onUpdate: function onUpdate() {
						if (options.callbacks && options.onUpdate) {
							/* callbacks: whileScrolling */
							if (_cb("whileScrolling")) {
								_mcs();o.callbacks.whileScrolling.call(el[0]);
							}
						}
					}, onComplete: function onComplete() {
						if (options.callbacks && options.onComplete) {
							if (o.axis === "yx") {
								clearTimeout(mCSB_container[0].onCompleteTimeout);
							}
							var t = mCSB_container[0].idleTimer || 0;
							mCSB_container[0].onCompleteTimeout = setTimeout(function () {
								/* callbacks: onScroll, onTotalScroll, onTotalScrollBack */
								if (_cb("onScroll")) {
									_mcs();o.callbacks.onScroll.call(el[0]);
								}
								if (_cb("onTotalScroll") && scrollTo[1] >= limit[1] - totalScrollOffset && d.cbOffsets[0]) {
									_mcs();o.callbacks.onTotalScroll.call(el[0]);
								}
								if (_cb("onTotalScrollBack") && scrollTo[1] <= totalScrollBackOffset && d.cbOffsets[1]) {
									_mcs();o.callbacks.onTotalScrollBack.call(el[0]);
								}
								d.tweenRunning = false;
								mCSB_container[0].idleTimer = 0;
								_onDragClasses(mCSB_dragger, "hide");
							}, t);
						}
					}
				});
				/* checks if callback function exists */
				function _cb(cb) {
					return d && o.callbacks[cb] && typeof o.callbacks[cb] === "function";
				}
				/* checks whether callback offsets always trigger */
				function _cbOffsets() {
					return [o.callbacks.alwaysTriggerOffsets || contentPos >= limit[0] + tso, o.callbacks.alwaysTriggerOffsets || contentPos <= -tsbo];
				}
				/* 
	   populates object with useful values for the user 
	   values: 
	   	content: this.mcs.content
	   	content top position: this.mcs.top 
	   	content left position: this.mcs.left 
	   	dragger top position: this.mcs.draggerTop 
	   	dragger left position: this.mcs.draggerLeft 
	   	scrolling y percentage: this.mcs.topPct 
	   	scrolling x percentage: this.mcs.leftPct 
	   	scrolling direction: this.mcs.direction
	   */
				function _mcs() {
					var cp = [mCSB_container[0].offsetTop, mCSB_container[0].offsetLeft],
					    /* content position */
					dp = [mCSB_dragger[0].offsetTop, mCSB_dragger[0].offsetLeft],
					    /* dragger position */
					cl = [mCSB_container.outerHeight(false), mCSB_container.outerWidth(false)],
					    /* content length */
					pl = [mCustomScrollBox.height(), mCustomScrollBox.width()]; /* content parent length */
					el[0].mcs = {
						content: mCSB_container, /* original content wrapper as jquery object */
						top: cp[0], left: cp[1], draggerTop: dp[0], draggerLeft: dp[1],
						topPct: Math.round(100 * Math.abs(cp[0]) / (Math.abs(cl[0]) - pl[0])), leftPct: Math.round(100 * Math.abs(cp[1]) / (Math.abs(cl[1]) - pl[1])),
						direction: options.dir
					};
					/* 
	    this refers to the original element containing the scrollbar(s)
	    usage: this.mcs.top, this.mcs.leftPct etc. 
	    */
				}
			},

			/* -------------------- */

			/* 
	  CUSTOM JAVASCRIPT ANIMATION TWEEN 
	  Lighter and faster than jquery animate() and css transitions 
	  Animates top/left properties and includes easings 
	  */
			_tweenTo = function _tweenTo(el, prop, to, duration, easing, overwrite, callbacks) {
				if (!el._mTween) {
					el._mTween = { top: {}, left: {} };
				}
				var callbacks = callbacks || {},
				    onStart = callbacks.onStart || function () {},
				    onUpdate = callbacks.onUpdate || function () {},
				    onComplete = callbacks.onComplete || function () {},
				    startTime = _getTime(),
				    _delay,
				    progress = 0,
				    from = el.offsetTop,
				    elStyle = el.style,
				    _request,
				    tobj = el._mTween[prop];
				if (prop === "left") {
					from = el.offsetLeft;
				}
				var diff = to - from;
				tobj.stop = 0;
				if (overwrite !== "none") {
					_cancelTween();
				}
				_startTween();
				function _step() {
					if (tobj.stop) {
						return;
					}
					if (!progress) {
						onStart.call();
					}
					progress = _getTime() - startTime;
					_tween();
					if (progress >= tobj.time) {
						tobj.time = progress > tobj.time ? progress + _delay - (progress - tobj.time) : progress + _delay - 1;
						if (tobj.time < progress + 1) {
							tobj.time = progress + 1;
						}
					}
					if (tobj.time < duration) {
						tobj.id = _request(_step);
					} else {
						onComplete.call();
					}
				}
				function _tween() {
					if (duration > 0) {
						tobj.currVal = _ease(tobj.time, from, diff, duration, easing);
						elStyle[prop] = Math.round(tobj.currVal) + "px";
					} else {
						elStyle[prop] = to + "px";
					}
					onUpdate.call();
				}
				function _startTween() {
					_delay = 1000 / 60;
					tobj.time = progress + _delay;
					_request = !window.requestAnimationFrame ? function (f) {
						_tween();return setTimeout(f, 0.01);
					} : window.requestAnimationFrame;
					tobj.id = _request(_step);
				}
				function _cancelTween() {
					if (tobj.id == null) {
						return;
					}
					if (!window.requestAnimationFrame) {
						clearTimeout(tobj.id);
					} else {
						window.cancelAnimationFrame(tobj.id);
					}
					tobj.id = null;
				}
				function _ease(t, b, c, d, type) {
					switch (type) {
						case "linear":case "mcsLinear":
							return c * t / d + b;
							break;
						case "mcsLinearOut":
							t /= d;t--;return c * Math.sqrt(1 - t * t) + b;
							break;
						case "easeInOutSmooth":
							t /= d / 2;
							if (t < 1) return c / 2 * t * t + b;
							t--;
							return -c / 2 * (t * (t - 2) - 1) + b;
							break;
						case "easeInOutStrong":
							t /= d / 2;
							if (t < 1) return c / 2 * Math.pow(2, 10 * (t - 1)) + b;
							t--;
							return c / 2 * (-Math.pow(2, -10 * t) + 2) + b;
							break;
						case "easeInOut":case "mcsEaseInOut":
							t /= d / 2;
							if (t < 1) return c / 2 * t * t * t + b;
							t -= 2;
							return c / 2 * (t * t * t + 2) + b;
							break;
						case "easeOutSmooth":
							t /= d;t--;
							return -c * (t * t * t * t - 1) + b;
							break;
						case "easeOutStrong":
							return c * (-Math.pow(2, -10 * t / d) + 1) + b;
							break;
						case "easeOut":case "mcsEaseOut":default:
							var ts = (t /= d) * t,
							    tc = ts * t;
							return b + c * (0.499999999999997 * tc * ts + -2.5 * ts * ts + 5.5 * tc + -6.5 * ts + 4 * t);
					}
				}
			},

			/* -------------------- */

			/* returns current time */
			_getTime = function _getTime() {
				if (window.performance && window.performance.now) {
					return window.performance.now();
				} else {
					if (window.performance && window.performance.webkitNow) {
						return window.performance.webkitNow();
					} else {
						if (Date.now) {
							return Date.now();
						} else {
							return new Date().getTime();
						}
					}
				}
			},

			/* -------------------- */

			/* stops a tween */
			_stopTween = function _stopTween() {
				var el = this;
				if (!el._mTween) {
					el._mTween = { top: {}, left: {} };
				}
				var props = ["top", "left"];
				for (var i = 0; i < props.length; i++) {
					var prop = props[i];
					if (el._mTween[prop].id) {
						if (!window.requestAnimationFrame) {
							clearTimeout(el._mTween[prop].id);
						} else {
							window.cancelAnimationFrame(el._mTween[prop].id);
						}
						el._mTween[prop].id = null;
						el._mTween[prop].stop = 1;
					}
				}
			},

			/* -------------------- */

			/* deletes a property (avoiding the exception thrown by IE) */
			_delete = function _delete(c, m) {
				try {
					delete c[m];
				} catch (e) {
					c[m] = null;
				}
			},

			/* -------------------- */

			/* detects left mouse button */
			_mouseBtnLeft = function _mouseBtnLeft(e) {
				return !(e.which && e.which !== 1);
			},

			/* -------------------- */

			/* detects if pointer type event is touch */
			_pointerTouch = function _pointerTouch(e) {
				var t = e.originalEvent.pointerType;
				return !(t && t !== "touch" && t !== 2);
			},

			/* -------------------- */

			/* checks if value is numeric */
			_isNumeric = function _isNumeric(val) {
				return !isNaN(parseFloat(val)) && isFinite(val);
			},

			/* -------------------- */

			/* returns element position according to content */
			_childPos = function _childPos(el) {
				var p = el.parents(".mCSB_container");
				return [el.offset().top - p.offset().top, el.offset().left - p.offset().left];
			},

			/* -------------------- */

			/* checks if browser tab is hidden/inactive via Page Visibility API */
			_isTabHidden = function _isTabHidden() {
				var prop = _getHiddenProp();
				if (!prop) return false;
				return document[prop];
				function _getHiddenProp() {
					var pfx = ["webkit", "moz", "ms", "o"];
					if ("hidden" in document) return "hidden"; //natively supported
					for (var i = 0; i < pfx.length; i++) {
						//prefixed
						if (pfx[i] + "Hidden" in document) return pfx[i] + "Hidden";
					}
					return null; //not supported
				}
			};
			/* -------------------- */

			/* 
	  ----------------------------------------
	  PLUGIN SETUP 
	  ----------------------------------------
	  */

			/* plugin constructor functions */
			$.fn[pluginNS] = function (method) {
				/* usage: $(selector).mCustomScrollbar(); */
				if (methods[method]) {
					return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
				} else if ((typeof method === "undefined" ? "undefined" : _typeof(method)) === "object" || !method) {
					return methods.init.apply(this, arguments);
				} else {
					$.error("Method " + method + " does not exist");
				}
			};
			$[pluginNS] = function (method) {
				/* usage: $.mCustomScrollbar(); */
				if (methods[method]) {
					return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
				} else if ((typeof method === "undefined" ? "undefined" : _typeof(method)) === "object" || !method) {
					return methods.init.apply(this, arguments);
				} else {
					$.error("Method " + method + " does not exist");
				}
			};

			/* 
	  allow setting plugin default options. 
	  usage: $.mCustomScrollbar.defaults.scrollInertia=500; 
	  to apply any changed default options on default selectors (below), use inside document ready fn 
	  e.g.: $(document).ready(function(){ $.mCustomScrollbar.defaults.scrollInertia=500; });
	  */
			$[pluginNS].defaults = defaults;

			/* 
	  add window object (window.mCustomScrollbar) 
	  usage: if(window.mCustomScrollbar){console.log("custom scrollbar plugin loaded");}
	  */
			window[pluginNS] = true;

			$(window).bind("load", function () {

				$(defaultSelector)[pluginNS](); /* add scrollbars automatically on default selector */

				/* extend jQuery expressions */
				$.extend($.expr[":"], {
					/* checks if element is within scrollable viewport */
					mcsInView: $.expr[":"].mcsInView || function (el) {
						var $el = $(el),
						    content = $el.parents(".mCSB_container"),
						    wrapper,
						    cPos;
						if (!content.length) {
							return;
						}
						wrapper = content.parent();
						cPos = [content[0].offsetTop, content[0].offsetLeft];
						return cPos[0] + _childPos($el)[0] >= 0 && cPos[0] + _childPos($el)[0] < wrapper.height() - $el.outerHeight(false) && cPos[1] + _childPos($el)[1] >= 0 && cPos[1] + _childPos($el)[1] < wrapper.width() - $el.outerWidth(false);
					},
					/* checks if element or part of element is in view of scrollable viewport */
					mcsInSight: $.expr[":"].mcsInSight || function (el, i, m) {
						var $el = $(el),
						    elD,
						    content = $el.parents(".mCSB_container"),
						    wrapperView,
						    pos,
						    wrapperViewPct,
						    pctVals = m[3] === "exact" ? [[1, 0], [1, 0]] : [[0.9, 0.1], [0.6, 0.4]];
						if (!content.length) {
							return;
						}
						elD = [$el.outerHeight(false), $el.outerWidth(false)];
						pos = [content[0].offsetTop + _childPos($el)[0], content[0].offsetLeft + _childPos($el)[1]];
						wrapperView = [content.parent()[0].offsetHeight, content.parent()[0].offsetWidth];
						wrapperViewPct = [elD[0] < wrapperView[0] ? pctVals[0] : pctVals[1], elD[1] < wrapperView[1] ? pctVals[0] : pctVals[1]];
						return pos[0] - wrapperView[0] * wrapperViewPct[0][0] < 0 && pos[0] + elD[0] - wrapperView[0] * wrapperViewPct[0][1] >= 0 && pos[1] - wrapperView[1] * wrapperViewPct[1][0] < 0 && pos[1] + elD[1] - wrapperView[1] * wrapperViewPct[1][1] >= 0;
					},
					/* checks if element is overflowed having visible scrollbar(s) */
					mcsOverflow: $.expr[":"].mcsOverflow || function (el) {
						var d = $(el).data(pluginPfx);
						if (!d) {
							return;
						}
						return d.overflowed[0] || d.overflowed[1];
					}
				});
			});
		});
	});

/***/ }),
/* 14 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {module.exports = __webpack_amd_options__;

	/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery Mousewheel 3.1.13
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 */

	(function (factory) {
	    if ( true ) {
	        // AMD. Register as an anonymous module.
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports === 'object') {
	        // Node/CommonJS style for Browserify
	        module.exports = factory;
	    } else {
	        // Browser globals
	        factory(jQuery);
	    }
	}(function ($) {

	    var toFix  = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'],
	        toBind = ( 'onwheel' in document || document.documentMode >= 9 ) ?
	                    ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'],
	        slice  = Array.prototype.slice,
	        nullLowestDeltaTimeout, lowestDelta;

	    if ( $.event.fixHooks ) {
	        for ( var i = toFix.length; i; ) {
	            $.event.fixHooks[ toFix[--i] ] = $.event.mouseHooks;
	        }
	    }

	    var special = $.event.special.mousewheel = {
	        version: '3.1.12',

	        setup: function() {
	            if ( this.addEventListener ) {
	                for ( var i = toBind.length; i; ) {
	                    this.addEventListener( toBind[--i], handler, false );
	                }
	            } else {
	                this.onmousewheel = handler;
	            }
	            // Store the line height and page height for this particular element
	            $.data(this, 'mousewheel-line-height', special.getLineHeight(this));
	            $.data(this, 'mousewheel-page-height', special.getPageHeight(this));
	        },

	        teardown: function() {
	            if ( this.removeEventListener ) {
	                for ( var i = toBind.length; i; ) {
	                    this.removeEventListener( toBind[--i], handler, false );
	                }
	            } else {
	                this.onmousewheel = null;
	            }
	            // Clean up the data we added to the element
	            $.removeData(this, 'mousewheel-line-height');
	            $.removeData(this, 'mousewheel-page-height');
	        },

	        getLineHeight: function(elem) {
	            var $elem = $(elem),
	                $parent = $elem['offsetParent' in $.fn ? 'offsetParent' : 'parent']();
	            if (!$parent.length) {
	                $parent = $('body');
	            }
	            return parseInt($parent.css('fontSize'), 10) || parseInt($elem.css('fontSize'), 10) || 16;
	        },

	        getPageHeight: function(elem) {
	            return $(elem).height();
	        },

	        settings: {
	            adjustOldDeltas: true, // see shouldAdjustOldDeltas() below
	            normalizeOffset: true  // calls getBoundingClientRect for each event
	        }
	    };

	    $.fn.extend({
	        mousewheel: function(fn) {
	            return fn ? this.bind('mousewheel', fn) : this.trigger('mousewheel');
	        },

	        unmousewheel: function(fn) {
	            return this.unbind('mousewheel', fn);
	        }
	    });


	    function handler(event) {
	        var orgEvent   = event || window.event,
	            args       = slice.call(arguments, 1),
	            delta      = 0,
	            deltaX     = 0,
	            deltaY     = 0,
	            absDelta   = 0,
	            offsetX    = 0,
	            offsetY    = 0;
	        event = $.event.fix(orgEvent);
	        event.type = 'mousewheel';

	        // Old school scrollwheel delta
	        if ( 'detail'      in orgEvent ) { deltaY = orgEvent.detail * -1;      }
	        if ( 'wheelDelta'  in orgEvent ) { deltaY = orgEvent.wheelDelta;       }
	        if ( 'wheelDeltaY' in orgEvent ) { deltaY = orgEvent.wheelDeltaY;      }
	        if ( 'wheelDeltaX' in orgEvent ) { deltaX = orgEvent.wheelDeltaX * -1; }

	        // Firefox < 17 horizontal scrolling related to DOMMouseScroll event
	        if ( 'axis' in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS ) {
	            deltaX = deltaY * -1;
	            deltaY = 0;
	        }

	        // Set delta to be deltaY or deltaX if deltaY is 0 for backwards compatabilitiy
	        delta = deltaY === 0 ? deltaX : deltaY;

	        // New school wheel delta (wheel event)
	        if ( 'deltaY' in orgEvent ) {
	            deltaY = orgEvent.deltaY * -1;
	            delta  = deltaY;
	        }
	        if ( 'deltaX' in orgEvent ) {
	            deltaX = orgEvent.deltaX;
	            if ( deltaY === 0 ) { delta  = deltaX * -1; }
	        }

	        // No change actually happened, no reason to go any further
	        if ( deltaY === 0 && deltaX === 0 ) { return; }

	        // Need to convert lines and pages to pixels if we aren't already in pixels
	        // There are three delta modes:
	        //   * deltaMode 0 is by pixels, nothing to do
	        //   * deltaMode 1 is by lines
	        //   * deltaMode 2 is by pages
	        if ( orgEvent.deltaMode === 1 ) {
	            var lineHeight = $.data(this, 'mousewheel-line-height');
	            delta  *= lineHeight;
	            deltaY *= lineHeight;
	            deltaX *= lineHeight;
	        } else if ( orgEvent.deltaMode === 2 ) {
	            var pageHeight = $.data(this, 'mousewheel-page-height');
	            delta  *= pageHeight;
	            deltaY *= pageHeight;
	            deltaX *= pageHeight;
	        }

	        // Store lowest absolute delta to normalize the delta values
	        absDelta = Math.max( Math.abs(deltaY), Math.abs(deltaX) );

	        if ( !lowestDelta || absDelta < lowestDelta ) {
	            lowestDelta = absDelta;

	            // Adjust older deltas if necessary
	            if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {
	                lowestDelta /= 40;
	            }
	        }

	        // Adjust older deltas if necessary
	        if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {
	            // Divide all the things by 40!
	            delta  /= 40;
	            deltaX /= 40;
	            deltaY /= 40;
	        }

	        // Get a whole, normalized value for the deltas
	        delta  = Math[ delta  >= 1 ? 'floor' : 'ceil' ](delta  / lowestDelta);
	        deltaX = Math[ deltaX >= 1 ? 'floor' : 'ceil' ](deltaX / lowestDelta);
	        deltaY = Math[ deltaY >= 1 ? 'floor' : 'ceil' ](deltaY / lowestDelta);

	        // Normalise offsetX and offsetY properties
	        if ( special.settings.normalizeOffset && this.getBoundingClientRect ) {
	            var boundingRect = this.getBoundingClientRect();
	            offsetX = event.clientX - boundingRect.left;
	            offsetY = event.clientY - boundingRect.top;
	        }

	        // Add information to the event object
	        event.deltaX = deltaX;
	        event.deltaY = deltaY;
	        event.deltaFactor = lowestDelta;
	        event.offsetX = offsetX;
	        event.offsetY = offsetY;
	        // Go ahead and set deltaMode to 0 since we converted to pixels
	        // Although this is a little odd since we overwrite the deltaX/Y
	        // properties with normalized deltas.
	        event.deltaMode = 0;

	        // Add event and delta to the front of the arguments
	        args.unshift(event, delta, deltaX, deltaY);

	        // Clearout lowestDelta after sometime to better
	        // handle multiple device types that give different
	        // a different lowestDelta
	        // Ex: trackpad = 3 and mouse wheel = 120
	        if (nullLowestDeltaTimeout) { clearTimeout(nullLowestDeltaTimeout); }
	        nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);

	        return ($.event.dispatch || $.event.handle).apply(this, args);
	    }

	    function nullLowestDelta() {
	        lowestDelta = null;
	    }

	    function shouldAdjustOldDeltas(orgEvent, absDelta) {
	        // If this is an older event and the delta is divisable by 120,
	        // then we are assuming that the browser is treating this as an
	        // older mouse wheel event and that we should divide the deltas
	        // by 40 to try and get a more usable deltaFactor.
	        // Side note, this actually impacts the reported scroll distance
	        // in older browsers and can cause scrolling to be slower than native.
	        // Turn this off by setting $.event.special.mousewheel.settings.adjustOldDeltas to false.
	        return special.settings.adjustOldDeltas && orgEvent.type === 'mousewheel' && absDelta % 120 === 0;
	    }

	}));


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {'use strict';

	/*! Copyright (c) 2011 Brandon Aaron (http://brandonaaron.net)
	 * Licensed under the MIT License (LICENSE.txt).
	 *
	 * Thanks to: http://adomas.org/javascript-mouse-wheel/ for some pointers.
	 * Thanks to: Mathias Bank(http://www.mathias-bank.de) for a scope bug fix.
	 * Thanks to: Seamus Leahy for adding deltaX and deltaY
	 *
	 * Version: 3.0.6
	 * 
	 * Requires: 1.2.2+
	 */

	(function ($) {

	    var types = ['DOMMouseScroll', 'mousewheel'];

	    if ($.event.fixHooks) {
	        for (var i = types.length; i;) {
	            $.event.fixHooks[types[--i]] = $.event.mouseHooks;
	        }
	    }

	    $.event.special.mousewheel = {
	        setup: function setup() {
	            if (this.addEventListener) {
	                for (var i = types.length; i;) {
	                    this.addEventListener(types[--i], handler, false);
	                }
	            } else {
	                this.onmousewheel = handler;
	            }
	        },

	        teardown: function teardown() {
	            if (this.removeEventListener) {
	                for (var i = types.length; i;) {
	                    this.removeEventListener(types[--i], handler, false);
	                }
	            } else {
	                this.onmousewheel = null;
	            }
	        }
	    };

	    $.fn.extend({
	        mousewheel: function mousewheel(fn) {
	            return fn ? this.bind("mousewheel", fn) : this.trigger("mousewheel");
	        },

	        unmousewheel: function unmousewheel(fn) {
	            return this.unbind("mousewheel", fn);
	        }
	    });

	    function handler(event) {
	        var orgEvent = event || window.event,
	            args = [].slice.call(arguments, 1),
	            delta = 0,
	            returnValue = true,
	            deltaX = 0,
	            deltaY = 0;
	        event = $.event.fix(orgEvent);
	        event.type = "mousewheel";

	        // Old school scrollwheel delta
	        if (orgEvent.wheelDelta) {
	            delta = orgEvent.wheelDelta / 120;
	        }
	        if (orgEvent.detail) {
	            delta = -orgEvent.detail / 3;
	        }

	        // New school multidimensional scroll (touchpads) deltas
	        deltaY = delta;

	        // Gecko
	        if (orgEvent.axis !== undefined && orgEvent.axis === orgEvent.HORIZONTAL_AXIS) {
	            deltaY = 0;
	            deltaX = -1 * delta;
	        }

	        // Webkit
	        if (orgEvent.wheelDeltaY !== undefined) {
	            deltaY = orgEvent.wheelDeltaY / 120;
	        }
	        if (orgEvent.wheelDeltaX !== undefined) {
	            deltaX = -1 * orgEvent.wheelDeltaX / 120;
	        }

	        // Add event and delta to the front of the arguments
	        args.unshift(event, delta, deltaX, deltaY);

	        return ($.event.dispatch || $.event.handle).apply(this, args);
	    }
	})(jQuery);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/*! tooltipster v4.2.5 */!function (a, b) {
	   true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (a) {
	    return b(a);
	  }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) ? module.exports = b(require("jquery")) : b(jQuery);
	}(undefined, function (a) {
	  function b(a) {
	    this.$container, this.constraints = null, this.__$tooltip, this.__init(a);
	  }function c(b, c) {
	    var d = !0;return a.each(b, function (a, e) {
	      return void 0 === c[a] || b[a] !== c[a] ? (d = !1, !1) : void 0;
	    }), d;
	  }function d(b) {
	    var c = b.attr("id"),
	        d = c ? h.window.document.getElementById(c) : null;return d ? d === b[0] : a.contains(h.window.document.body, b[0]);
	  }function e() {
	    if (!g) return !1;var a = g.document.body || g.document.documentElement,
	        b = a.style,
	        c = "transition",
	        d = ["Moz", "Webkit", "Khtml", "O", "ms"];if ("string" == typeof b[c]) return !0;c = c.charAt(0).toUpperCase() + c.substr(1);for (var e = 0; e < d.length; e++) {
	      if ("string" == typeof b[d[e] + c]) return !0;
	    }return !1;
	  }var f = { animation: "fade", animationDuration: 350, content: null, contentAsHTML: !1, contentCloning: !1, debug: !0, delay: 300, delayTouch: [300, 500], functionInit: null, functionBefore: null, functionReady: null, functionAfter: null, functionFormat: null, IEmin: 6, interactive: !1, multiple: !1, parent: null, plugins: ["sideTip"], repositionOnScroll: !1, restoration: "none", selfDestruction: !0, theme: [], timer: 0, trackerInterval: 500, trackOrigin: !1, trackTooltip: !1, trigger: "hover", triggerClose: { click: !1, mouseleave: !1, originClick: !1, scroll: !1, tap: !1, touchleave: !1 }, triggerOpen: { click: !1, mouseenter: !1, tap: !1, touchstart: !1 }, updateAnimation: "rotate", zIndex: 9999999 },
	      g = "undefined" != typeof window ? window : null,
	      h = { hasTouchCapability: !(!g || !("ontouchstart" in g || g.DocumentTouch && g.document instanceof g.DocumentTouch || g.navigator.maxTouchPoints)), hasTransitions: e(), IE: !1, semVer: "4.2.5", window: g },
	      i = function i() {
	    this.__$emitterPrivate = a({}), this.__$emitterPublic = a({}), this.__instancesLatestArr = [], this.__plugins = {}, this._env = h;
	  };i.prototype = { __bridge: function __bridge(b, c, d) {
	      if (!c[d]) {
	        var e = function e() {};e.prototype = b;var g = new e();g.__init && g.__init(c), a.each(b, function (a, b) {
	          0 != a.indexOf("__") && (c[a] ? f.debug && console.log("The " + a + " method of the " + d + " plugin conflicts with another plugin or native methods") : (c[a] = function () {
	            return g[a].apply(g, Array.prototype.slice.apply(arguments));
	          }, c[a].bridged = g));
	        }), c[d] = g;
	      }return this;
	    }, __setWindow: function __setWindow(a) {
	      return h.window = a, this;
	    }, _getRuler: function _getRuler(a) {
	      return new b(a);
	    }, _off: function _off() {
	      return this.__$emitterPrivate.off.apply(this.__$emitterPrivate, Array.prototype.slice.apply(arguments)), this;
	    }, _on: function _on() {
	      return this.__$emitterPrivate.on.apply(this.__$emitterPrivate, Array.prototype.slice.apply(arguments)), this;
	    }, _one: function _one() {
	      return this.__$emitterPrivate.one.apply(this.__$emitterPrivate, Array.prototype.slice.apply(arguments)), this;
	    }, _plugin: function _plugin(b) {
	      var c = this;if ("string" == typeof b) {
	        var d = b,
	            e = null;return d.indexOf(".") > 0 ? e = c.__plugins[d] : a.each(c.__plugins, function (a, b) {
	          return b.name.substring(b.name.length - d.length - 1) == "." + d ? (e = b, !1) : void 0;
	        }), e;
	      }if (b.name.indexOf(".") < 0) throw new Error("Plugins must be namespaced");return c.__plugins[b.name] = b, b.core && c.__bridge(b.core, c, b.name), this;
	    }, _trigger: function _trigger() {
	      var a = Array.prototype.slice.apply(arguments);return "string" == typeof a[0] && (a[0] = { type: a[0] }), this.__$emitterPrivate.trigger.apply(this.__$emitterPrivate, a), this.__$emitterPublic.trigger.apply(this.__$emitterPublic, a), this;
	    }, instances: function instances(b) {
	      var c = [],
	          d = b || ".tooltipstered";return a(d).each(function () {
	        var b = a(this),
	            d = b.data("tooltipster-ns");d && a.each(d, function (a, d) {
	          c.push(b.data(d));
	        });
	      }), c;
	    }, instancesLatest: function instancesLatest() {
	      return this.__instancesLatestArr;
	    }, off: function off() {
	      return this.__$emitterPublic.off.apply(this.__$emitterPublic, Array.prototype.slice.apply(arguments)), this;
	    }, on: function on() {
	      return this.__$emitterPublic.on.apply(this.__$emitterPublic, Array.prototype.slice.apply(arguments)), this;
	    }, one: function one() {
	      return this.__$emitterPublic.one.apply(this.__$emitterPublic, Array.prototype.slice.apply(arguments)), this;
	    }, origins: function origins(b) {
	      var c = b ? b + " " : "";return a(c + ".tooltipstered").toArray();
	    }, setDefaults: function setDefaults(b) {
	      return a.extend(f, b), this;
	    }, triggerHandler: function triggerHandler() {
	      return this.__$emitterPublic.triggerHandler.apply(this.__$emitterPublic, Array.prototype.slice.apply(arguments)), this;
	    } }, a.tooltipster = new i(), a.Tooltipster = function (b, c) {
	    this.__callbacks = { close: [], open: [] }, this.__closingTime, this.__Content, this.__contentBcr, this.__destroyed = !1, this.__$emitterPrivate = a({}), this.__$emitterPublic = a({}), this.__enabled = !0, this.__garbageCollector, this.__Geometry, this.__lastPosition, this.__namespace = "tooltipster-" + Math.round(1e6 * Math.random()), this.__options, this.__$originParents, this.__pointerIsOverOrigin = !1, this.__previousThemes = [], this.__state = "closed", this.__timeouts = { close: [], open: null }, this.__touchEvents = [], this.__tracker = null, this._$origin, this._$tooltip, this.__init(b, c);
	  }, a.Tooltipster.prototype = { __init: function __init(b, c) {
	      var d = this;if (d._$origin = a(b), d.__options = a.extend(!0, {}, f, c), d.__optionsFormat(), !h.IE || h.IE >= d.__options.IEmin) {
	        var e = null;if (void 0 === d._$origin.data("tooltipster-initialTitle") && (e = d._$origin.attr("title"), void 0 === e && (e = null), d._$origin.data("tooltipster-initialTitle", e)), null !== d.__options.content) d.__contentSet(d.__options.content);else {
	          var g,
	              i = d._$origin.attr("data-tooltip-content");i && (g = a(i)), g && g[0] ? d.__contentSet(g.first()) : d.__contentSet(e);
	        }d._$origin.removeAttr("title").addClass("tooltipstered"), d.__prepareOrigin(), d.__prepareGC(), a.each(d.__options.plugins, function (a, b) {
	          d._plug(b);
	        }), h.hasTouchCapability && a(h.window.document.body).on("touchmove." + d.__namespace + "-triggerOpen", function (a) {
	          d._touchRecordEvent(a);
	        }), d._on("created", function () {
	          d.__prepareTooltip();
	        })._on("repositioned", function (a) {
	          d.__lastPosition = a.position;
	        });
	      } else d.__options.disabled = !0;
	    }, __contentInsert: function __contentInsert() {
	      var a = this,
	          b = a._$tooltip.find(".tooltipster-content"),
	          c = a.__Content,
	          d = function d(a) {
	        c = a;
	      };return a._trigger({ type: "format", content: a.__Content, format: d }), a.__options.functionFormat && (c = a.__options.functionFormat.call(a, a, { origin: a._$origin[0] }, a.__Content)), "string" != typeof c || a.__options.contentAsHTML ? b.empty().append(c) : b.text(c), a;
	    }, __contentSet: function __contentSet(b) {
	      return b instanceof a && this.__options.contentCloning && (b = b.clone(!0)), this.__Content = b, this._trigger({ type: "updated", content: b }), this;
	    }, __destroyError: function __destroyError() {
	      throw new Error("This tooltip has been destroyed and cannot execute your method call.");
	    }, __geometry: function __geometry() {
	      var b = this,
	          c = b._$origin,
	          d = b._$origin.is("area");if (d) {
	        var e = b._$origin.parent().attr("name");c = a('img[usemap="#' + e + '"]');
	      }var f = c[0].getBoundingClientRect(),
	          g = a(h.window.document),
	          i = a(h.window),
	          j = c,
	          k = { available: { document: null, window: null }, document: { size: { height: g.height(), width: g.width() } }, window: { scroll: { left: h.window.scrollX || h.window.document.documentElement.scrollLeft, top: h.window.scrollY || h.window.document.documentElement.scrollTop }, size: { height: i.height(), width: i.width() } }, origin: { fixedLineage: !1, offset: {}, size: { height: f.bottom - f.top, width: f.right - f.left }, usemapImage: d ? c[0] : null, windowOffset: { bottom: f.bottom, left: f.left, right: f.right, top: f.top } } };if (d) {
	        var l = b._$origin.attr("shape"),
	            m = b._$origin.attr("coords");if (m && (m = m.split(","), a.map(m, function (a, b) {
	          m[b] = parseInt(a);
	        })), "default" != l) switch (l) {case "circle":
	            var n = m[0],
	                o = m[1],
	                p = m[2],
	                q = o - p,
	                r = n - p;k.origin.size.height = 2 * p, k.origin.size.width = k.origin.size.height, k.origin.windowOffset.left += r, k.origin.windowOffset.top += q;break;case "rect":
	            var s = m[0],
	                t = m[1],
	                u = m[2],
	                v = m[3];k.origin.size.height = v - t, k.origin.size.width = u - s, k.origin.windowOffset.left += s, k.origin.windowOffset.top += t;break;case "poly":
	            for (var w = 0, x = 0, y = 0, z = 0, A = "even", B = 0; B < m.length; B++) {
	              var C = m[B];"even" == A ? (C > y && (y = C, 0 === B && (w = y)), w > C && (w = C), A = "odd") : (C > z && (z = C, 1 == B && (x = z)), x > C && (x = C), A = "even");
	            }k.origin.size.height = z - x, k.origin.size.width = y - w, k.origin.windowOffset.left += w, k.origin.windowOffset.top += x;}
	      }var D = function D(a) {
	        k.origin.size.height = a.height, k.origin.windowOffset.left = a.left, k.origin.windowOffset.top = a.top, k.origin.size.width = a.width;
	      };for (b._trigger({ type: "geometry", edit: D, geometry: { height: k.origin.size.height, left: k.origin.windowOffset.left, top: k.origin.windowOffset.top, width: k.origin.size.width } }), k.origin.windowOffset.right = k.origin.windowOffset.left + k.origin.size.width, k.origin.windowOffset.bottom = k.origin.windowOffset.top + k.origin.size.height, k.origin.offset.left = k.origin.windowOffset.left + k.window.scroll.left, k.origin.offset.top = k.origin.windowOffset.top + k.window.scroll.top, k.origin.offset.bottom = k.origin.offset.top + k.origin.size.height, k.origin.offset.right = k.origin.offset.left + k.origin.size.width, k.available.document = { bottom: { height: k.document.size.height - k.origin.offset.bottom, width: k.document.size.width }, left: { height: k.document.size.height, width: k.origin.offset.left }, right: { height: k.document.size.height, width: k.document.size.width - k.origin.offset.right }, top: { height: k.origin.offset.top, width: k.document.size.width } }, k.available.window = { bottom: { height: Math.max(k.window.size.height - Math.max(k.origin.windowOffset.bottom, 0), 0), width: k.window.size.width }, left: { height: k.window.size.height, width: Math.max(k.origin.windowOffset.left, 0) }, right: { height: k.window.size.height, width: Math.max(k.window.size.width - Math.max(k.origin.windowOffset.right, 0), 0) }, top: { height: Math.max(k.origin.windowOffset.top, 0), width: k.window.size.width } }; "html" != j[0].tagName.toLowerCase();) {
	        if ("fixed" == j.css("position")) {
	          k.origin.fixedLineage = !0;break;
	        }j = j.parent();
	      }return k;
	    }, __optionsFormat: function __optionsFormat() {
	      return "number" == typeof this.__options.animationDuration && (this.__options.animationDuration = [this.__options.animationDuration, this.__options.animationDuration]), "number" == typeof this.__options.delay && (this.__options.delay = [this.__options.delay, this.__options.delay]), "number" == typeof this.__options.delayTouch && (this.__options.delayTouch = [this.__options.delayTouch, this.__options.delayTouch]), "string" == typeof this.__options.theme && (this.__options.theme = [this.__options.theme]), null === this.__options.parent ? this.__options.parent = a(h.window.document.body) : "string" == typeof this.__options.parent && (this.__options.parent = a(this.__options.parent)), "hover" == this.__options.trigger ? (this.__options.triggerOpen = { mouseenter: !0, touchstart: !0 }, this.__options.triggerClose = { mouseleave: !0, originClick: !0, touchleave: !0 }) : "click" == this.__options.trigger && (this.__options.triggerOpen = { click: !0, tap: !0 }, this.__options.triggerClose = { click: !0, tap: !0 }), this._trigger("options"), this;
	    }, __prepareGC: function __prepareGC() {
	      var b = this;return b.__options.selfDestruction ? b.__garbageCollector = setInterval(function () {
	        var c = new Date().getTime();b.__touchEvents = a.grep(b.__touchEvents, function (a, b) {
	          return c - a.time > 6e4;
	        }), d(b._$origin) || b.close(function () {
	          b.destroy();
	        });
	      }, 2e4) : clearInterval(b.__garbageCollector), b;
	    }, __prepareOrigin: function __prepareOrigin() {
	      var a = this;if (a._$origin.off("." + a.__namespace + "-triggerOpen"), h.hasTouchCapability && a._$origin.on("touchstart." + a.__namespace + "-triggerOpen touchend." + a.__namespace + "-triggerOpen touchcancel." + a.__namespace + "-triggerOpen", function (b) {
	        a._touchRecordEvent(b);
	      }), a.__options.triggerOpen.click || a.__options.triggerOpen.tap && h.hasTouchCapability) {
	        var b = "";a.__options.triggerOpen.click && (b += "click." + a.__namespace + "-triggerOpen "), a.__options.triggerOpen.tap && h.hasTouchCapability && (b += "touchend." + a.__namespace + "-triggerOpen"), a._$origin.on(b, function (b) {
	          a._touchIsMeaningfulEvent(b) && a._open(b);
	        });
	      }if (a.__options.triggerOpen.mouseenter || a.__options.triggerOpen.touchstart && h.hasTouchCapability) {
	        var b = "";a.__options.triggerOpen.mouseenter && (b += "mouseenter." + a.__namespace + "-triggerOpen "), a.__options.triggerOpen.touchstart && h.hasTouchCapability && (b += "touchstart." + a.__namespace + "-triggerOpen"), a._$origin.on(b, function (b) {
	          !a._touchIsTouchEvent(b) && a._touchIsEmulatedEvent(b) || (a.__pointerIsOverOrigin = !0, a._openShortly(b));
	        });
	      }if (a.__options.triggerClose.mouseleave || a.__options.triggerClose.touchleave && h.hasTouchCapability) {
	        var b = "";a.__options.triggerClose.mouseleave && (b += "mouseleave." + a.__namespace + "-triggerOpen "), a.__options.triggerClose.touchleave && h.hasTouchCapability && (b += "touchend." + a.__namespace + "-triggerOpen touchcancel." + a.__namespace + "-triggerOpen"), a._$origin.on(b, function (b) {
	          a._touchIsMeaningfulEvent(b) && (a.__pointerIsOverOrigin = !1);
	        });
	      }return a;
	    }, __prepareTooltip: function __prepareTooltip() {
	      var b = this,
	          c = b.__options.interactive ? "auto" : "";return b._$tooltip.attr("id", b.__namespace).css({ "pointer-events": c, zIndex: b.__options.zIndex }), a.each(b.__previousThemes, function (a, c) {
	        b._$tooltip.removeClass(c);
	      }), a.each(b.__options.theme, function (a, c) {
	        b._$tooltip.addClass(c);
	      }), b.__previousThemes = a.merge([], b.__options.theme), b;
	    }, __scrollHandler: function __scrollHandler(b) {
	      var c = this;if (c.__options.triggerClose.scroll) c._close(b);else if (d(c._$origin) && d(c._$tooltip)) {
	        var e = null;if (b.target === h.window.document) c.__Geometry.origin.fixedLineage || c.__options.repositionOnScroll && c.reposition(b);else {
	          e = c.__geometry();var f = !1;if ("fixed" != c._$origin.css("position") && c.__$originParents.each(function (b, c) {
	            var d = a(c),
	                g = d.css("overflow-x"),
	                h = d.css("overflow-y");if ("visible" != g || "visible" != h) {
	              var i = c.getBoundingClientRect();if ("visible" != g && (e.origin.windowOffset.left < i.left || e.origin.windowOffset.right > i.right)) return f = !0, !1;if ("visible" != h && (e.origin.windowOffset.top < i.top || e.origin.windowOffset.bottom > i.bottom)) return f = !0, !1;
	            }return "fixed" == d.css("position") ? !1 : void 0;
	          }), f) c._$tooltip.css("visibility", "hidden");else if (c._$tooltip.css("visibility", "visible"), c.__options.repositionOnScroll) c.reposition(b);else {
	            var g = e.origin.offset.left - c.__Geometry.origin.offset.left,
	                i = e.origin.offset.top - c.__Geometry.origin.offset.top;c._$tooltip.css({ left: c.__lastPosition.coord.left + g, top: c.__lastPosition.coord.top + i });
	          }
	        }c._trigger({ type: "scroll", event: b, geo: e });
	      }return c;
	    }, __stateSet: function __stateSet(a) {
	      return this.__state = a, this._trigger({ type: "state", state: a }), this;
	    }, __timeoutsClear: function __timeoutsClear() {
	      return clearTimeout(this.__timeouts.open), this.__timeouts.open = null, a.each(this.__timeouts.close, function (a, b) {
	        clearTimeout(b);
	      }), this.__timeouts.close = [], this;
	    }, __trackerStart: function __trackerStart() {
	      var a = this,
	          b = a._$tooltip.find(".tooltipster-content");return a.__options.trackTooltip && (a.__contentBcr = b[0].getBoundingClientRect()), a.__tracker = setInterval(function () {
	        if (d(a._$origin) && d(a._$tooltip)) {
	          if (a.__options.trackOrigin) {
	            var e = a.__geometry(),
	                f = !1;c(e.origin.size, a.__Geometry.origin.size) && (a.__Geometry.origin.fixedLineage ? c(e.origin.windowOffset, a.__Geometry.origin.windowOffset) && (f = !0) : c(e.origin.offset, a.__Geometry.origin.offset) && (f = !0)), f || (a.__options.triggerClose.mouseleave ? a._close() : a.reposition());
	          }if (a.__options.trackTooltip) {
	            var g = b[0].getBoundingClientRect();g.height === a.__contentBcr.height && g.width === a.__contentBcr.width || (a.reposition(), a.__contentBcr = g);
	          }
	        } else a._close();
	      }, a.__options.trackerInterval), a;
	    }, _close: function _close(b, c, d) {
	      var e = this,
	          f = !0;if (e._trigger({ type: "close", event: b, stop: function stop() {
	          f = !1;
	        } }), f || d) {
	        c && e.__callbacks.close.push(c), e.__callbacks.open = [], e.__timeoutsClear();var g = function g() {
	          a.each(e.__callbacks.close, function (a, c) {
	            c.call(e, e, { event: b, origin: e._$origin[0] });
	          }), e.__callbacks.close = [];
	        };if ("closed" != e.__state) {
	          var i = !0,
	              j = new Date(),
	              k = j.getTime(),
	              l = k + e.__options.animationDuration[1];if ("disappearing" == e.__state && l > e.__closingTime && e.__options.animationDuration[1] > 0 && (i = !1), i) {
	            e.__closingTime = l, "disappearing" != e.__state && e.__stateSet("disappearing");var m = function m() {
	              clearInterval(e.__tracker), e._trigger({ type: "closing", event: b }), e._$tooltip.off("." + e.__namespace + "-triggerClose").removeClass("tooltipster-dying"), a(h.window).off("." + e.__namespace + "-triggerClose"), e.__$originParents.each(function (b, c) {
	                a(c).off("scroll." + e.__namespace + "-triggerClose");
	              }), e.__$originParents = null, a(h.window.document.body).off("." + e.__namespace + "-triggerClose"), e._$origin.off("." + e.__namespace + "-triggerClose"), e._off("dismissable"), e.__stateSet("closed"), e._trigger({ type: "after", event: b }), e.__options.functionAfter && e.__options.functionAfter.call(e, e, { event: b, origin: e._$origin[0] }), g();
	            };h.hasTransitions ? (e._$tooltip.css({ "-moz-animation-duration": e.__options.animationDuration[1] + "ms", "-ms-animation-duration": e.__options.animationDuration[1] + "ms", "-o-animation-duration": e.__options.animationDuration[1] + "ms", "-webkit-animation-duration": e.__options.animationDuration[1] + "ms", "animation-duration": e.__options.animationDuration[1] + "ms", "transition-duration": e.__options.animationDuration[1] + "ms" }), e._$tooltip.clearQueue().removeClass("tooltipster-show").addClass("tooltipster-dying"), e.__options.animationDuration[1] > 0 && e._$tooltip.delay(e.__options.animationDuration[1]), e._$tooltip.queue(m)) : e._$tooltip.stop().fadeOut(e.__options.animationDuration[1], m);
	          }
	        } else g();
	      }return e;
	    }, _off: function _off() {
	      return this.__$emitterPrivate.off.apply(this.__$emitterPrivate, Array.prototype.slice.apply(arguments)), this;
	    }, _on: function _on() {
	      return this.__$emitterPrivate.on.apply(this.__$emitterPrivate, Array.prototype.slice.apply(arguments)), this;
	    }, _one: function _one() {
	      return this.__$emitterPrivate.one.apply(this.__$emitterPrivate, Array.prototype.slice.apply(arguments)), this;
	    }, _open: function _open(b, c) {
	      var e = this;if (!e.__destroying && d(e._$origin) && e.__enabled) {
	        var f = !0;if ("closed" == e.__state && (e._trigger({ type: "before", event: b, stop: function stop() {
	            f = !1;
	          } }), f && e.__options.functionBefore && (f = e.__options.functionBefore.call(e, e, { event: b, origin: e._$origin[0] }))), f !== !1 && null !== e.__Content) {
	          c && e.__callbacks.open.push(c), e.__callbacks.close = [], e.__timeoutsClear();var g,
	              i = function i() {
	            "stable" != e.__state && e.__stateSet("stable"), a.each(e.__callbacks.open, function (a, b) {
	              b.call(e, e, { origin: e._$origin[0], tooltip: e._$tooltip[0] });
	            }), e.__callbacks.open = [];
	          };if ("closed" !== e.__state) g = 0, "disappearing" === e.__state ? (e.__stateSet("appearing"), h.hasTransitions ? (e._$tooltip.clearQueue().removeClass("tooltipster-dying").addClass("tooltipster-show"), e.__options.animationDuration[0] > 0 && e._$tooltip.delay(e.__options.animationDuration[0]), e._$tooltip.queue(i)) : e._$tooltip.stop().fadeIn(i)) : "stable" == e.__state && i();else {
	            if (e.__stateSet("appearing"), g = e.__options.animationDuration[0], e.__contentInsert(), e.reposition(b, !0), h.hasTransitions ? (e._$tooltip.addClass("tooltipster-" + e.__options.animation).addClass("tooltipster-initial").css({ "-moz-animation-duration": e.__options.animationDuration[0] + "ms", "-ms-animation-duration": e.__options.animationDuration[0] + "ms", "-o-animation-duration": e.__options.animationDuration[0] + "ms", "-webkit-animation-duration": e.__options.animationDuration[0] + "ms", "animation-duration": e.__options.animationDuration[0] + "ms", "transition-duration": e.__options.animationDuration[0] + "ms" }), setTimeout(function () {
	              "closed" != e.__state && (e._$tooltip.addClass("tooltipster-show").removeClass("tooltipster-initial"), e.__options.animationDuration[0] > 0 && e._$tooltip.delay(e.__options.animationDuration[0]), e._$tooltip.queue(i));
	            }, 0)) : e._$tooltip.css("display", "none").fadeIn(e.__options.animationDuration[0], i), e.__trackerStart(), a(h.window).on("resize." + e.__namespace + "-triggerClose", function (b) {
	              var c = a(document.activeElement);(c.is("input") || c.is("textarea")) && a.contains(e._$tooltip[0], c[0]) || e.reposition(b);
	            }).on("scroll." + e.__namespace + "-triggerClose", function (a) {
	              e.__scrollHandler(a);
	            }), e.__$originParents = e._$origin.parents(), e.__$originParents.each(function (b, c) {
	              a(c).on("scroll." + e.__namespace + "-triggerClose", function (a) {
	                e.__scrollHandler(a);
	              });
	            }), e.__options.triggerClose.mouseleave || e.__options.triggerClose.touchleave && h.hasTouchCapability) {
	              e._on("dismissable", function (a) {
	                a.dismissable ? a.delay ? (m = setTimeout(function () {
	                  e._close(a.event);
	                }, a.delay), e.__timeouts.close.push(m)) : e._close(a) : clearTimeout(m);
	              });var j = e._$origin,
	                  k = "",
	                  l = "",
	                  m = null;e.__options.interactive && (j = j.add(e._$tooltip)), e.__options.triggerClose.mouseleave && (k += "mouseenter." + e.__namespace + "-triggerClose ", l += "mouseleave." + e.__namespace + "-triggerClose "), e.__options.triggerClose.touchleave && h.hasTouchCapability && (k += "touchstart." + e.__namespace + "-triggerClose", l += "touchend." + e.__namespace + "-triggerClose touchcancel." + e.__namespace + "-triggerClose"), j.on(l, function (a) {
	                if (e._touchIsTouchEvent(a) || !e._touchIsEmulatedEvent(a)) {
	                  var b = "mouseleave" == a.type ? e.__options.delay : e.__options.delayTouch;e._trigger({ delay: b[1], dismissable: !0, event: a, type: "dismissable" });
	                }
	              }).on(k, function (a) {
	                !e._touchIsTouchEvent(a) && e._touchIsEmulatedEvent(a) || e._trigger({ dismissable: !1, event: a, type: "dismissable" });
	              });
	            }e.__options.triggerClose.originClick && e._$origin.on("click." + e.__namespace + "-triggerClose", function (a) {
	              e._touchIsTouchEvent(a) || e._touchIsEmulatedEvent(a) || e._close(a);
	            }), (e.__options.triggerClose.click || e.__options.triggerClose.tap && h.hasTouchCapability) && setTimeout(function () {
	              if ("closed" != e.__state) {
	                var b = "",
	                    c = a(h.window.document.body);e.__options.triggerClose.click && (b += "click." + e.__namespace + "-triggerClose "), e.__options.triggerClose.tap && h.hasTouchCapability && (b += "touchend." + e.__namespace + "-triggerClose"), c.on(b, function (b) {
	                  e._touchIsMeaningfulEvent(b) && (e._touchRecordEvent(b), e.__options.interactive && a.contains(e._$tooltip[0], b.target) || e._close(b));
	                }), e.__options.triggerClose.tap && h.hasTouchCapability && c.on("touchstart." + e.__namespace + "-triggerClose", function (a) {
	                  e._touchRecordEvent(a);
	                });
	              }
	            }, 0), e._trigger("ready"), e.__options.functionReady && e.__options.functionReady.call(e, e, { origin: e._$origin[0], tooltip: e._$tooltip[0] });
	          }if (e.__options.timer > 0) {
	            var m = setTimeout(function () {
	              e._close();
	            }, e.__options.timer + g);e.__timeouts.close.push(m);
	          }
	        }
	      }return e;
	    }, _openShortly: function _openShortly(a) {
	      var b = this,
	          c = !0;if ("stable" != b.__state && "appearing" != b.__state && !b.__timeouts.open && (b._trigger({ type: "start", event: a, stop: function stop() {
	          c = !1;
	        } }), c)) {
	        var d = 0 == a.type.indexOf("touch") ? b.__options.delayTouch : b.__options.delay;d[0] ? b.__timeouts.open = setTimeout(function () {
	          b.__timeouts.open = null, b.__pointerIsOverOrigin && b._touchIsMeaningfulEvent(a) ? (b._trigger("startend"), b._open(a)) : b._trigger("startcancel");
	        }, d[0]) : (b._trigger("startend"), b._open(a));
	      }return b;
	    }, _optionsExtract: function _optionsExtract(b, c) {
	      var d = this,
	          e = a.extend(!0, {}, c),
	          f = d.__options[b];return f || (f = {}, a.each(c, function (a, b) {
	        var c = d.__options[a];void 0 !== c && (f[a] = c);
	      })), a.each(e, function (b, c) {
	        void 0 !== f[b] && ("object" != (typeof c === "undefined" ? "undefined" : _typeof(c)) || c instanceof Array || null == c || "object" != _typeof(f[b]) || f[b] instanceof Array || null == f[b] ? e[b] = f[b] : a.extend(e[b], f[b]));
	      }), e;
	    }, _plug: function _plug(b) {
	      var c = a.tooltipster._plugin(b);if (!c) throw new Error('The "' + b + '" plugin is not defined');return c.instance && a.tooltipster.__bridge(c.instance, this, c.name), this;
	    }, _touchIsEmulatedEvent: function _touchIsEmulatedEvent(a) {
	      for (var b = !1, c = new Date().getTime(), d = this.__touchEvents.length - 1; d >= 0; d--) {
	        var e = this.__touchEvents[d];if (!(c - e.time < 500)) break;e.target === a.target && (b = !0);
	      }return b;
	    }, _touchIsMeaningfulEvent: function _touchIsMeaningfulEvent(a) {
	      return this._touchIsTouchEvent(a) && !this._touchSwiped(a.target) || !this._touchIsTouchEvent(a) && !this._touchIsEmulatedEvent(a);
	    }, _touchIsTouchEvent: function _touchIsTouchEvent(a) {
	      return 0 == a.type.indexOf("touch");
	    }, _touchRecordEvent: function _touchRecordEvent(a) {
	      return this._touchIsTouchEvent(a) && (a.time = new Date().getTime(), this.__touchEvents.push(a)), this;
	    }, _touchSwiped: function _touchSwiped(a) {
	      for (var b = !1, c = this.__touchEvents.length - 1; c >= 0; c--) {
	        var d = this.__touchEvents[c];if ("touchmove" == d.type) {
	          b = !0;break;
	        }if ("touchstart" == d.type && a === d.target) break;
	      }return b;
	    }, _trigger: function _trigger() {
	      var b = Array.prototype.slice.apply(arguments);return "string" == typeof b[0] && (b[0] = { type: b[0] }), b[0].instance = this, b[0].origin = this._$origin ? this._$origin[0] : null, b[0].tooltip = this._$tooltip ? this._$tooltip[0] : null, this.__$emitterPrivate.trigger.apply(this.__$emitterPrivate, b), a.tooltipster._trigger.apply(a.tooltipster, b), this.__$emitterPublic.trigger.apply(this.__$emitterPublic, b), this;
	    }, _unplug: function _unplug(b) {
	      var c = this;if (c[b]) {
	        var d = a.tooltipster._plugin(b);d.instance && a.each(d.instance, function (a, d) {
	          c[a] && c[a].bridged === c[b] && delete c[a];
	        }), c[b].__destroy && c[b].__destroy(), delete c[b];
	      }return c;
	    }, close: function close(a) {
	      return this.__destroyed ? this.__destroyError() : this._close(null, a), this;
	    }, content: function content(a) {
	      var b = this;if (void 0 === a) return b.__Content;if (b.__destroyed) b.__destroyError();else if (b.__contentSet(a), null !== b.__Content) {
	        if ("closed" !== b.__state && (b.__contentInsert(), b.reposition(), b.__options.updateAnimation)) if (h.hasTransitions) {
	          var c = b.__options.updateAnimation;b._$tooltip.addClass("tooltipster-update-" + c), setTimeout(function () {
	            "closed" != b.__state && b._$tooltip.removeClass("tooltipster-update-" + c);
	          }, 1e3);
	        } else b._$tooltip.fadeTo(200, .5, function () {
	          "closed" != b.__state && b._$tooltip.fadeTo(200, 1);
	        });
	      } else b._close();return b;
	    }, destroy: function destroy() {
	      var b = this;if (b.__destroyed) b.__destroyError();else {
	        "closed" != b.__state ? b.option("animationDuration", 0)._close(null, null, !0) : b.__timeoutsClear(), b._trigger("destroy"), b.__destroyed = !0, b._$origin.removeData(b.__namespace).off("." + b.__namespace + "-triggerOpen"), a(h.window.document.body).off("." + b.__namespace + "-triggerOpen");var c = b._$origin.data("tooltipster-ns");if (c) if (1 === c.length) {
	          var d = null;"previous" == b.__options.restoration ? d = b._$origin.data("tooltipster-initialTitle") : "current" == b.__options.restoration && (d = "string" == typeof b.__Content ? b.__Content : a("<div></div>").append(b.__Content).html()), d && b._$origin.attr("title", d), b._$origin.removeClass("tooltipstered"), b._$origin.removeData("tooltipster-ns").removeData("tooltipster-initialTitle");
	        } else c = a.grep(c, function (a, c) {
	          return a !== b.__namespace;
	        }), b._$origin.data("tooltipster-ns", c);b._trigger("destroyed"), b._off(), b.off(), b.__Content = null, b.__$emitterPrivate = null, b.__$emitterPublic = null, b.__options.parent = null, b._$origin = null, b._$tooltip = null, a.tooltipster.__instancesLatestArr = a.grep(a.tooltipster.__instancesLatestArr, function (a, c) {
	          return b !== a;
	        }), clearInterval(b.__garbageCollector);
	      }return b;
	    }, disable: function disable() {
	      return this.__destroyed ? (this.__destroyError(), this) : (this._close(), this.__enabled = !1, this);
	    }, elementOrigin: function elementOrigin() {
	      return this.__destroyed ? void this.__destroyError() : this._$origin[0];
	    }, elementTooltip: function elementTooltip() {
	      return this._$tooltip ? this._$tooltip[0] : null;
	    }, enable: function enable() {
	      return this.__enabled = !0, this;
	    }, hide: function hide(a) {
	      return this.close(a);
	    }, instance: function instance() {
	      return this;
	    }, off: function off() {
	      return this.__destroyed || this.__$emitterPublic.off.apply(this.__$emitterPublic, Array.prototype.slice.apply(arguments)), this;
	    }, on: function on() {
	      return this.__destroyed ? this.__destroyError() : this.__$emitterPublic.on.apply(this.__$emitterPublic, Array.prototype.slice.apply(arguments)), this;
	    }, one: function one() {
	      return this.__destroyed ? this.__destroyError() : this.__$emitterPublic.one.apply(this.__$emitterPublic, Array.prototype.slice.apply(arguments)), this;
	    }, open: function open(a) {
	      return this.__destroyed ? this.__destroyError() : this._open(null, a), this;
	    }, option: function option(b, c) {
	      return void 0 === c ? this.__options[b] : (this.__destroyed ? this.__destroyError() : (this.__options[b] = c, this.__optionsFormat(), a.inArray(b, ["trigger", "triggerClose", "triggerOpen"]) >= 0 && this.__prepareOrigin(), "selfDestruction" === b && this.__prepareGC()), this);
	    }, reposition: function reposition(a, b) {
	      var c = this;return c.__destroyed ? c.__destroyError() : "closed" != c.__state && d(c._$origin) && (b || d(c._$tooltip)) && (b || c._$tooltip.detach(), c.__Geometry = c.__geometry(), c._trigger({ type: "reposition", event: a, helper: { geo: c.__Geometry } })), c;
	    }, show: function show(a) {
	      return this.open(a);
	    }, status: function status() {
	      return { destroyed: this.__destroyed, enabled: this.__enabled, open: "closed" !== this.__state, state: this.__state };
	    }, triggerHandler: function triggerHandler() {
	      return this.__destroyed ? this.__destroyError() : this.__$emitterPublic.triggerHandler.apply(this.__$emitterPublic, Array.prototype.slice.apply(arguments)), this;
	    } }, a.fn.tooltipster = function () {
	    var b = Array.prototype.slice.apply(arguments),
	        c = "You are using a single HTML element as content for several tooltips. You probably want to set the contentCloning option to TRUE.";if (0 === this.length) return this;if ("string" == typeof b[0]) {
	      var d = "#*$~&";return this.each(function () {
	        var e = a(this).data("tooltipster-ns"),
	            f = e ? a(this).data(e[0]) : null;if (!f) throw new Error("You called Tooltipster's \"" + b[0] + '" method on an uninitialized element');if ("function" != typeof f[b[0]]) throw new Error('Unknown method "' + b[0] + '"');this.length > 1 && "content" == b[0] && (b[1] instanceof a || "object" == _typeof(b[1]) && null != b[1] && b[1].tagName) && !f.__options.contentCloning && f.__options.debug && console.log(c);var g = f[b[0]](b[1], b[2]);return g !== f || "instance" === b[0] ? (d = g, !1) : void 0;
	      }), "#*$~&" !== d ? d : this;
	    }a.tooltipster.__instancesLatestArr = [];var e = b[0] && void 0 !== b[0].multiple,
	        g = e && b[0].multiple || !e && f.multiple,
	        h = b[0] && void 0 !== b[0].content,
	        i = h && b[0].content || !h && f.content,
	        j = b[0] && void 0 !== b[0].contentCloning,
	        k = j && b[0].contentCloning || !j && f.contentCloning,
	        l = b[0] && void 0 !== b[0].debug,
	        m = l && b[0].debug || !l && f.debug;return this.length > 1 && (i instanceof a || "object" == (typeof i === "undefined" ? "undefined" : _typeof(i)) && null != i && i.tagName) && !k && m && console.log(c), this.each(function () {
	      var c = !1,
	          d = a(this),
	          e = d.data("tooltipster-ns"),
	          f = null;e ? g ? c = !0 : m && (console.log("Tooltipster: one or more tooltips are already attached to the element below. Ignoring."), console.log(this)) : c = !0, c && (f = new a.Tooltipster(this, b[0]), e || (e = []), e.push(f.__namespace), d.data("tooltipster-ns", e), d.data(f.__namespace, f), f.__options.functionInit && f.__options.functionInit.call(f, f, { origin: this }), f._trigger("init")), a.tooltipster.__instancesLatestArr.push(f);
	    }), this;
	  }, b.prototype = { __init: function __init(b) {
	      this.__$tooltip = b, this.__$tooltip.css({ left: 0, overflow: "hidden", position: "absolute", top: 0 }).find(".tooltipster-content").css("overflow", "auto"), this.$container = a('<div class="tooltipster-ruler"></div>').append(this.__$tooltip).appendTo(h.window.document.body);
	    }, __forceRedraw: function __forceRedraw() {
	      var a = this.__$tooltip.parent();this.__$tooltip.detach(), this.__$tooltip.appendTo(a);
	    }, constrain: function constrain(a, b) {
	      return this.constraints = { width: a, height: b }, this.__$tooltip.css({ display: "block", height: "", overflow: "auto", width: a }), this;
	    }, destroy: function destroy() {
	      this.__$tooltip.detach().find(".tooltipster-content").css({ display: "", overflow: "" }), this.$container.remove();
	    }, free: function free() {
	      return this.constraints = null, this.__$tooltip.css({ display: "", height: "", overflow: "visible", width: "" }), this;
	    }, measure: function measure() {
	      this.__forceRedraw();var a = this.__$tooltip[0].getBoundingClientRect(),
	          b = { size: { height: a.height || a.bottom - a.top, width: a.width || a.right - a.left } };if (this.constraints) {
	        var c = this.__$tooltip.find(".tooltipster-content"),
	            d = this.__$tooltip.outerHeight(),
	            e = c[0].getBoundingClientRect(),
	            f = { height: d <= this.constraints.height, width: a.width <= this.constraints.width && e.width >= c[0].scrollWidth - 1 };b.fits = f.height && f.width;
	      }return h.IE && h.IE <= 11 && b.size.width !== h.window.document.documentElement.clientWidth && (b.size.width = Math.ceil(b.size.width) + 1), b;
	    } };var j = navigator.userAgent.toLowerCase();-1 != j.indexOf("msie") ? h.IE = parseInt(j.split("msie")[1]) : -1 !== j.toLowerCase().indexOf("trident") && -1 !== j.indexOf(" rv:11") ? h.IE = 11 : -1 != j.toLowerCase().indexOf("edge/") && (h.IE = parseInt(j.toLowerCase().split("edge/")[1]));var k = "tooltipster.sideTip";return a.tooltipster._plugin({ name: k, instance: { __defaults: function __defaults() {
	        return { arrow: !0, distance: 6, functionPosition: null, maxWidth: null, minIntersection: 16, minWidth: 0, position: null, side: "top", viewportAware: !0 };
	      }, __init: function __init(a) {
	        var b = this;b.__instance = a, b.__namespace = "tooltipster-sideTip-" + Math.round(1e6 * Math.random()), b.__previousState = "closed", b.__options, b.__optionsFormat(), b.__instance._on("state." + b.__namespace, function (a) {
	          "closed" == a.state ? b.__close() : "appearing" == a.state && "closed" == b.__previousState && b.__create(), b.__previousState = a.state;
	        }), b.__instance._on("options." + b.__namespace, function () {
	          b.__optionsFormat();
	        }), b.__instance._on("reposition." + b.__namespace, function (a) {
	          b.__reposition(a.event, a.helper);
	        });
	      }, __close: function __close() {
	        this.__instance.content() instanceof a && this.__instance.content().detach(), this.__instance._$tooltip.remove(), this.__instance._$tooltip = null;
	      }, __create: function __create() {
	        var b = a('<div class="tooltipster-base tooltipster-sidetip"><div class="tooltipster-box"><div class="tooltipster-content"></div></div><div class="tooltipster-arrow"><div class="tooltipster-arrow-uncropped"><div class="tooltipster-arrow-border"></div><div class="tooltipster-arrow-background"></div></div></div></div>');this.__options.arrow || b.find(".tooltipster-box").css("margin", 0).end().find(".tooltipster-arrow").hide(), this.__options.minWidth && b.css("min-width", this.__options.minWidth + "px"), this.__options.maxWidth && b.css("max-width", this.__options.maxWidth + "px"), this.__instance._$tooltip = b, this.__instance._trigger("created");
	      }, __destroy: function __destroy() {
	        this.__instance._off("." + self.__namespace);
	      }, __optionsFormat: function __optionsFormat() {
	        var b = this;if (b.__options = b.__instance._optionsExtract(k, b.__defaults()), b.__options.position && (b.__options.side = b.__options.position), "object" != _typeof(b.__options.distance) && (b.__options.distance = [b.__options.distance]), b.__options.distance.length < 4 && (void 0 === b.__options.distance[1] && (b.__options.distance[1] = b.__options.distance[0]), void 0 === b.__options.distance[2] && (b.__options.distance[2] = b.__options.distance[0]), void 0 === b.__options.distance[3] && (b.__options.distance[3] = b.__options.distance[1]), b.__options.distance = { top: b.__options.distance[0], right: b.__options.distance[1], bottom: b.__options.distance[2], left: b.__options.distance[3] }), "string" == typeof b.__options.side) {
	          var c = { top: "bottom", right: "left", bottom: "top", left: "right" };b.__options.side = [b.__options.side, c[b.__options.side]], "left" == b.__options.side[0] || "right" == b.__options.side[0] ? b.__options.side.push("top", "bottom") : b.__options.side.push("right", "left");
	        }6 === a.tooltipster._env.IE && b.__options.arrow !== !0 && (b.__options.arrow = !1);
	      }, __reposition: function __reposition(b, c) {
	        var d,
	            e = this,
	            f = e.__targetFind(c),
	            g = [];e.__instance._$tooltip.detach();var h = e.__instance._$tooltip.clone(),
	            i = a.tooltipster._getRuler(h),
	            j = !1,
	            k = e.__instance.option("animation");switch (k && h.removeClass("tooltipster-" + k), a.each(["window", "document"], function (d, k) {
	          var l = null;if (e.__instance._trigger({ container: k, helper: c, satisfied: j, takeTest: function takeTest(a) {
	              l = a;
	            }, results: g, type: "positionTest" }), 1 == l || 0 != l && 0 == j && ("window" != k || e.__options.viewportAware)) for (var d = 0; d < e.__options.side.length; d++) {
	            var m = { horizontal: 0, vertical: 0 },
	                n = e.__options.side[d];"top" == n || "bottom" == n ? m.vertical = e.__options.distance[n] : m.horizontal = e.__options.distance[n], e.__sideChange(h, n), a.each(["natural", "constrained"], function (a, d) {
	              if (l = null, e.__instance._trigger({ container: k, event: b, helper: c, mode: d, results: g, satisfied: j, side: n, takeTest: function takeTest(a) {
	                  l = a;
	                }, type: "positionTest" }), 1 == l || 0 != l && 0 == j) {
	                var h = { container: k, distance: m, fits: null, mode: d, outerSize: null, side: n, size: null, target: f[n], whole: null },
	                    o = "natural" == d ? i.free() : i.constrain(c.geo.available[k][n].width - m.horizontal, c.geo.available[k][n].height - m.vertical),
	                    p = o.measure();if (h.size = p.size, h.outerSize = { height: p.size.height + m.vertical, width: p.size.width + m.horizontal }, "natural" == d ? c.geo.available[k][n].width >= h.outerSize.width && c.geo.available[k][n].height >= h.outerSize.height ? h.fits = !0 : h.fits = !1 : h.fits = p.fits, "window" == k && (h.fits ? "top" == n || "bottom" == n ? h.whole = c.geo.origin.windowOffset.right >= e.__options.minIntersection && c.geo.window.size.width - c.geo.origin.windowOffset.left >= e.__options.minIntersection : h.whole = c.geo.origin.windowOffset.bottom >= e.__options.minIntersection && c.geo.window.size.height - c.geo.origin.windowOffset.top >= e.__options.minIntersection : h.whole = !1), g.push(h), h.whole) j = !0;else if ("natural" == h.mode && (h.fits || h.size.width <= c.geo.available[k][n].width)) return !1;
	              }
	            });
	          }
	        }), e.__instance._trigger({ edit: function edit(a) {
	            g = a;
	          }, event: b, helper: c, results: g, type: "positionTested" }), g.sort(function (a, b) {
	          if (a.whole && !b.whole) return -1;if (!a.whole && b.whole) return 1;if (a.whole && b.whole) {
	            var c = e.__options.side.indexOf(a.side),
	                d = e.__options.side.indexOf(b.side);return d > c ? -1 : c > d ? 1 : "natural" == a.mode ? -1 : 1;
	          }if (a.fits && !b.fits) return -1;if (!a.fits && b.fits) return 1;if (a.fits && b.fits) {
	            var c = e.__options.side.indexOf(a.side),
	                d = e.__options.side.indexOf(b.side);return d > c ? -1 : c > d ? 1 : "natural" == a.mode ? -1 : 1;
	          }return "document" == a.container && "bottom" == a.side && "natural" == a.mode ? -1 : 1;
	        }), d = g[0], d.coord = {}, d.side) {case "left":case "right":
	            d.coord.top = Math.floor(d.target - d.size.height / 2);break;case "bottom":case "top":
	            d.coord.left = Math.floor(d.target - d.size.width / 2);}switch (d.side) {case "left":
	            d.coord.left = c.geo.origin.windowOffset.left - d.outerSize.width;break;case "right":
	            d.coord.left = c.geo.origin.windowOffset.right + d.distance.horizontal;break;case "top":
	            d.coord.top = c.geo.origin.windowOffset.top - d.outerSize.height;break;case "bottom":
	            d.coord.top = c.geo.origin.windowOffset.bottom + d.distance.vertical;}"window" == d.container ? "top" == d.side || "bottom" == d.side ? d.coord.left < 0 ? c.geo.origin.windowOffset.right - this.__options.minIntersection >= 0 ? d.coord.left = 0 : d.coord.left = c.geo.origin.windowOffset.right - this.__options.minIntersection - 1 : d.coord.left > c.geo.window.size.width - d.size.width && (c.geo.origin.windowOffset.left + this.__options.minIntersection <= c.geo.window.size.width ? d.coord.left = c.geo.window.size.width - d.size.width : d.coord.left = c.geo.origin.windowOffset.left + this.__options.minIntersection + 1 - d.size.width) : d.coord.top < 0 ? c.geo.origin.windowOffset.bottom - this.__options.minIntersection >= 0 ? d.coord.top = 0 : d.coord.top = c.geo.origin.windowOffset.bottom - this.__options.minIntersection - 1 : d.coord.top > c.geo.window.size.height - d.size.height && (c.geo.origin.windowOffset.top + this.__options.minIntersection <= c.geo.window.size.height ? d.coord.top = c.geo.window.size.height - d.size.height : d.coord.top = c.geo.origin.windowOffset.top + this.__options.minIntersection + 1 - d.size.height) : (d.coord.left > c.geo.window.size.width - d.size.width && (d.coord.left = c.geo.window.size.width - d.size.width), d.coord.left < 0 && (d.coord.left = 0)), e.__sideChange(h, d.side), c.tooltipClone = h[0], c.tooltipParent = e.__instance.option("parent").parent[0], c.mode = d.mode, c.whole = d.whole, c.origin = e.__instance._$origin[0], c.tooltip = e.__instance._$tooltip[0], delete d.container, delete d.fits, delete d.mode, delete d.outerSize, delete d.whole, d.distance = d.distance.horizontal || d.distance.vertical;var l = a.extend(!0, {}, d);if (e.__instance._trigger({ edit: function edit(a) {
	            d = a;
	          }, event: b, helper: c, position: l, type: "position" }), e.__options.functionPosition) {
	          var m = e.__options.functionPosition.call(e, e.__instance, c, l);m && (d = m);
	        }i.destroy();var n, o;"top" == d.side || "bottom" == d.side ? (n = { prop: "left", val: d.target - d.coord.left }, o = d.size.width - this.__options.minIntersection) : (n = { prop: "top", val: d.target - d.coord.top }, o = d.size.height - this.__options.minIntersection), n.val < this.__options.minIntersection ? n.val = this.__options.minIntersection : n.val > o && (n.val = o);var p;p = c.geo.origin.fixedLineage ? c.geo.origin.windowOffset : { left: c.geo.origin.windowOffset.left + c.geo.window.scroll.left, top: c.geo.origin.windowOffset.top + c.geo.window.scroll.top }, d.coord = { left: p.left + (d.coord.left - c.geo.origin.windowOffset.left), top: p.top + (d.coord.top - c.geo.origin.windowOffset.top) }, e.__sideChange(e.__instance._$tooltip, d.side), c.geo.origin.fixedLineage ? e.__instance._$tooltip.css("position", "fixed") : e.__instance._$tooltip.css("position", ""), e.__instance._$tooltip.css({ left: d.coord.left, top: d.coord.top, height: d.size.height, width: d.size.width }).find(".tooltipster-arrow").css({ left: "", top: "" }).css(n.prop, n.val), e.__instance._$tooltip.appendTo(e.__instance.option("parent")), e.__instance._trigger({ type: "repositioned", event: b, position: d });
	      }, __sideChange: function __sideChange(a, b) {
	        a.removeClass("tooltipster-bottom").removeClass("tooltipster-left").removeClass("tooltipster-right").removeClass("tooltipster-top").addClass("tooltipster-" + b);
	      }, __targetFind: function __targetFind(a) {
	        var b = {},
	            c = this.__instance._$origin[0].getClientRects();if (c.length > 1) {
	          var d = this.__instance._$origin.css("opacity");1 == d && (this.__instance._$origin.css("opacity", .99), c = this.__instance._$origin[0].getClientRects(), this.__instance._$origin.css("opacity", 1));
	        }if (c.length < 2) b.top = Math.floor(a.geo.origin.windowOffset.left + a.geo.origin.size.width / 2), b.bottom = b.top, b.left = Math.floor(a.geo.origin.windowOffset.top + a.geo.origin.size.height / 2), b.right = b.left;else {
	          var e = c[0];b.top = Math.floor(e.left + (e.right - e.left) / 2), e = c.length > 2 ? c[Math.ceil(c.length / 2) - 1] : c[0], b.right = Math.floor(e.top + (e.bottom - e.top) / 2), e = c[c.length - 1], b.bottom = Math.floor(e.left + (e.right - e.left) / 2), e = c.length > 2 ? c[Math.ceil((c.length + 1) / 2) - 1] : c[c.length - 1], b.left = Math.floor(e.top + (e.bottom - e.top) / 2);
	        }return b;
	      } } }), a;
	});

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var require;var require;/* WEBPACK VAR INJECTION */(function($) {/*!
	 * Select2 4.0.3
	 * https://select2.github.io
	 *
	 * Released under the MIT license
	 * https://github.com/select2/select2/blob/master/LICENSE.md
	 */
	(function (factory) {
	  if (true) {
	    // AMD. Register as an anonymous module.
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof exports === 'object') {
	    // Node/CommonJS
	    factory(require('jquery'));
	  } else {
	    // Browser globals
	    factory(jQuery);
	  }
	}(function (jQuery) {
	  // This is needed so we can catch the AMD loader configuration and use it
	  // The inner file should be wrapped (by `banner.start.js`) in a function that
	  // returns the AMD loader references.
	  var S2 =
	(function () {
	  // Restore the Select2 AMD loader so it can be used
	  // Needed mostly in the language files, where the loader is not inserted
	  if (jQuery && jQuery.fn && jQuery.fn.select2 && jQuery.fn.select2.amd) {
	    var S2 = jQuery.fn.select2.amd;
	  }
	var S2;(function () { if (!S2 || !S2.requirejs) {
	if (!S2) { S2 = {}; } else { require = S2; }
	/**
	 * @license almond 0.3.1 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.
	 * Available via the MIT or new BSD license.
	 * see: http://github.com/jrburke/almond for details
	 */
	//Going sloppy to avoid 'use strict' string cost, but strict practices should
	//be followed.
	/*jslint sloppy: true */
	/*global setTimeout: false */

	var requirejs, require, define;
	(function (undef) {
	    var main, req, makeMap, handlers,
	        defined = {},
	        waiting = {},
	        config = {},
	        defining = {},
	        hasOwn = Object.prototype.hasOwnProperty,
	        aps = [].slice,
	        jsSuffixRegExp = /\.js$/;

	    function hasProp(obj, prop) {
	        return hasOwn.call(obj, prop);
	    }

	    /**
	     * Given a relative module name, like ./something, normalize it to
	     * a real name that can be mapped to a path.
	     * @param {String} name the relative name
	     * @param {String} baseName a real name that the name arg is relative
	     * to.
	     * @returns {String} normalized name
	     */
	    function normalize(name, baseName) {
	        var nameParts, nameSegment, mapValue, foundMap, lastIndex,
	            foundI, foundStarMap, starI, i, j, part,
	            baseParts = baseName && baseName.split("/"),
	            map = config.map,
	            starMap = (map && map['*']) || {};

	        //Adjust any relative paths.
	        if (name && name.charAt(0) === ".") {
	            //If have a base name, try to normalize against it,
	            //otherwise, assume it is a top-level require that will
	            //be relative to baseUrl in the end.
	            if (baseName) {
	                name = name.split('/');
	                lastIndex = name.length - 1;

	                // Node .js allowance:
	                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
	                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
	                }

	                //Lop off the last part of baseParts, so that . matches the
	                //"directory" and not name of the baseName's module. For instance,
	                //baseName of "one/two/three", maps to "one/two/three.js", but we
	                //want the directory, "one/two" for this normalization.
	                name = baseParts.slice(0, baseParts.length - 1).concat(name);

	                //start trimDots
	                for (i = 0; i < name.length; i += 1) {
	                    part = name[i];
	                    if (part === ".") {
	                        name.splice(i, 1);
	                        i -= 1;
	                    } else if (part === "..") {
	                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {
	                            //End of the line. Keep at least one non-dot
	                            //path segment at the front so it can be mapped
	                            //correctly to disk. Otherwise, there is likely
	                            //no path mapping for a path starting with '..'.
	                            //This can still fail, but catches the most reasonable
	                            //uses of ..
	                            break;
	                        } else if (i > 0) {
	                            name.splice(i - 1, 2);
	                            i -= 2;
	                        }
	                    }
	                }
	                //end trimDots

	                name = name.join("/");
	            } else if (name.indexOf('./') === 0) {
	                // No baseName, so this is ID is resolved relative
	                // to baseUrl, pull off the leading dot.
	                name = name.substring(2);
	            }
	        }

	        //Apply map config if available.
	        if ((baseParts || starMap) && map) {
	            nameParts = name.split('/');

	            for (i = nameParts.length; i > 0; i -= 1) {
	                nameSegment = nameParts.slice(0, i).join("/");

	                if (baseParts) {
	                    //Find the longest baseName segment match in the config.
	                    //So, do joins on the biggest to smallest lengths of baseParts.
	                    for (j = baseParts.length; j > 0; j -= 1) {
	                        mapValue = map[baseParts.slice(0, j).join('/')];

	                        //baseName segment has  config, find if it has one for
	                        //this name.
	                        if (mapValue) {
	                            mapValue = mapValue[nameSegment];
	                            if (mapValue) {
	                                //Match, update name to the new value.
	                                foundMap = mapValue;
	                                foundI = i;
	                                break;
	                            }
	                        }
	                    }
	                }

	                if (foundMap) {
	                    break;
	                }

	                //Check for a star map match, but just hold on to it,
	                //if there is a shorter segment match later in a matching
	                //config, then favor over this star map.
	                if (!foundStarMap && starMap && starMap[nameSegment]) {
	                    foundStarMap = starMap[nameSegment];
	                    starI = i;
	                }
	            }

	            if (!foundMap && foundStarMap) {
	                foundMap = foundStarMap;
	                foundI = starI;
	            }

	            if (foundMap) {
	                nameParts.splice(0, foundI, foundMap);
	                name = nameParts.join('/');
	            }
	        }

	        return name;
	    }

	    function makeRequire(relName, forceSync) {
	        return function () {
	            //A version of a require function that passes a moduleName
	            //value for items that may need to
	            //look up paths relative to the moduleName
	            var args = aps.call(arguments, 0);

	            //If first arg is not require('string'), and there is only
	            //one arg, it is the array form without a callback. Insert
	            //a null so that the following concat is correct.
	            if (typeof args[0] !== 'string' && args.length === 1) {
	                args.push(null);
	            }
	            return req.apply(undef, args.concat([relName, forceSync]));
	        };
	    }

	    function makeNormalize(relName) {
	        return function (name) {
	            return normalize(name, relName);
	        };
	    }

	    function makeLoad(depName) {
	        return function (value) {
	            defined[depName] = value;
	        };
	    }

	    function callDep(name) {
	        if (hasProp(waiting, name)) {
	            var args = waiting[name];
	            delete waiting[name];
	            defining[name] = true;
	            main.apply(undef, args);
	        }

	        if (!hasProp(defined, name) && !hasProp(defining, name)) {
	            throw new Error('No ' + name);
	        }
	        return defined[name];
	    }

	    //Turns a plugin!resource to [plugin, resource]
	    //with the plugin being undefined if the name
	    //did not have a plugin prefix.
	    function splitPrefix(name) {
	        var prefix,
	            index = name ? name.indexOf('!') : -1;
	        if (index > -1) {
	            prefix = name.substring(0, index);
	            name = name.substring(index + 1, name.length);
	        }
	        return [prefix, name];
	    }

	    /**
	     * Makes a name map, normalizing the name, and using a plugin
	     * for normalization if necessary. Grabs a ref to plugin
	     * too, as an optimization.
	     */
	    makeMap = function (name, relName) {
	        var plugin,
	            parts = splitPrefix(name),
	            prefix = parts[0];

	        name = parts[1];

	        if (prefix) {
	            prefix = normalize(prefix, relName);
	            plugin = callDep(prefix);
	        }

	        //Normalize according
	        if (prefix) {
	            if (plugin && plugin.normalize) {
	                name = plugin.normalize(name, makeNormalize(relName));
	            } else {
	                name = normalize(name, relName);
	            }
	        } else {
	            name = normalize(name, relName);
	            parts = splitPrefix(name);
	            prefix = parts[0];
	            name = parts[1];
	            if (prefix) {
	                plugin = callDep(prefix);
	            }
	        }

	        //Using ridiculous property names for space reasons
	        return {
	            f: prefix ? prefix + '!' + name : name, //fullName
	            n: name,
	            pr: prefix,
	            p: plugin
	        };
	    };

	    function makeConfig(name) {
	        return function () {
	            return (config && config.config && config.config[name]) || {};
	        };
	    }

	    handlers = {
	        require: function (name) {
	            return makeRequire(name);
	        },
	        exports: function (name) {
	            var e = defined[name];
	            if (typeof e !== 'undefined') {
	                return e;
	            } else {
	                return (defined[name] = {});
	            }
	        },
	        module: function (name) {
	            return {
	                id: name,
	                uri: '',
	                exports: defined[name],
	                config: makeConfig(name)
	            };
	        }
	    };

	    main = function (name, deps, callback, relName) {
	        var cjsModule, depName, ret, map, i,
	            args = [],
	            callbackType = typeof callback,
	            usingExports;

	        //Use name if no relName
	        relName = relName || name;

	        //Call the callback to define the module, if necessary.
	        if (callbackType === 'undefined' || callbackType === 'function') {
	            //Pull out the defined dependencies and pass the ordered
	            //values to the callback.
	            //Default to [require, exports, module] if no deps
	            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
	            for (i = 0; i < deps.length; i += 1) {
	                map = makeMap(deps[i], relName);
	                depName = map.f;

	                //Fast path CommonJS standard dependencies.
	                if (depName === "require") {
	                    args[i] = handlers.require(name);
	                } else if (depName === "exports") {
	                    //CommonJS module spec 1.1
	                    args[i] = handlers.exports(name);
	                    usingExports = true;
	                } else if (depName === "module") {
	                    //CommonJS module spec 1.1
	                    cjsModule = args[i] = handlers.module(name);
	                } else if (hasProp(defined, depName) ||
	                           hasProp(waiting, depName) ||
	                           hasProp(defining, depName)) {
	                    args[i] = callDep(depName);
	                } else if (map.p) {
	                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
	                    args[i] = defined[depName];
	                } else {
	                    throw new Error(name + ' missing ' + depName);
	                }
	            }

	            ret = callback ? callback.apply(defined[name], args) : undefined;

	            if (name) {
	                //If setting exports via "module" is in play,
	                //favor that over return value and exports. After that,
	                //favor a non-undefined return value over exports use.
	                if (cjsModule && cjsModule.exports !== undef &&
	                        cjsModule.exports !== defined[name]) {
	                    defined[name] = cjsModule.exports;
	                } else if (ret !== undef || !usingExports) {
	                    //Use the return value from the function.
	                    defined[name] = ret;
	                }
	            }
	        } else if (name) {
	            //May just be an object definition for the module. Only
	            //worry about defining if have a module name.
	            defined[name] = callback;
	        }
	    };

	    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
	        if (typeof deps === "string") {
	            if (handlers[deps]) {
	                //callback in this case is really relName
	                return handlers[deps](callback);
	            }
	            //Just return the module wanted. In this scenario, the
	            //deps arg is the module name, and second arg (if passed)
	            //is just the relName.
	            //Normalize module name, if it contains . or ..
	            return callDep(makeMap(deps, callback).f);
	        } else if (!deps.splice) {
	            //deps is a config object, not an array.
	            config = deps;
	            if (config.deps) {
	                req(config.deps, config.callback);
	            }
	            if (!callback) {
	                return;
	            }

	            if (callback.splice) {
	                //callback is an array, which means it is a dependency list.
	                //Adjust args if there are dependencies
	                deps = callback;
	                callback = relName;
	                relName = null;
	            } else {
	                deps = undef;
	            }
	        }

	        //Support require(['a'])
	        callback = callback || function () {};

	        //If relName is a function, it is an errback handler,
	        //so remove it.
	        if (typeof relName === 'function') {
	            relName = forceSync;
	            forceSync = alt;
	        }

	        //Simulate async callback;
	        if (forceSync) {
	            main(undef, deps, callback, relName);
	        } else {
	            //Using a non-zero value because of concern for what old browsers
	            //do, and latest browsers "upgrade" to 4 if lower value is used:
	            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
	            //If want a value immediately, use require('id') instead -- something
	            //that works in almond on the global level, but not guaranteed and
	            //unlikely to work in other AMD implementations.
	            setTimeout(function () {
	                main(undef, deps, callback, relName);
	            }, 4);
	        }

	        return req;
	    };

	    /**
	     * Just drops the config on the floor, but returns req in case
	     * the config return value is used.
	     */
	    req.config = function (cfg) {
	        return req(cfg);
	    };

	    /**
	     * Expose module registry for debugging and tooling
	     */
	    requirejs._defined = defined;

	    define = function (name, deps, callback) {
	        if (typeof name !== 'string') {
	            throw new Error('See almond README: incorrect module build, no module name');
	        }

	        //This module may not have dependencies
	        if (!deps.splice) {
	            //deps is not an array, so probably means
	            //an object literal or factory function for
	            //the value. Adjust args.
	            callback = deps;
	            deps = [];
	        }

	        if (!hasProp(defined, name) && !hasProp(waiting, name)) {
	            waiting[name] = [name, deps, callback];
	        }
	    };

	    define.amd = {
	        jQuery: true
	    };
	}());

	S2.requirejs = requirejs;S2.require = require;S2.define = define;
	}
	}());
	S2.define("almond", function(){});

	/* global jQuery:false, $:false */
	S2.define('jquery',[],function () {
	  var _$ = jQuery || $;

	  if (_$ == null && console && console.error) {
	    console.error(
	      'Select2: An instance of jQuery or a jQuery-compatible library was not ' +
	      'found. Make sure that you are including jQuery before Select2 on your ' +
	      'web page.'
	    );
	  }

	  return _$;
	});

	S2.define('select2/utils',[
	  'jquery'
	], function ($) {
	  var Utils = {};

	  Utils.Extend = function (ChildClass, SuperClass) {
	    var __hasProp = {}.hasOwnProperty;

	    function BaseConstructor () {
	      this.constructor = ChildClass;
	    }

	    for (var key in SuperClass) {
	      if (__hasProp.call(SuperClass, key)) {
	        ChildClass[key] = SuperClass[key];
	      }
	    }

	    BaseConstructor.prototype = SuperClass.prototype;
	    ChildClass.prototype = new BaseConstructor();
	    ChildClass.__super__ = SuperClass.prototype;

	    return ChildClass;
	  };

	  function getMethods (theClass) {
	    var proto = theClass.prototype;

	    var methods = [];

	    for (var methodName in proto) {
	      var m = proto[methodName];

	      if (typeof m !== 'function') {
	        continue;
	      }

	      if (methodName === 'constructor') {
	        continue;
	      }

	      methods.push(methodName);
	    }

	    return methods;
	  }

	  Utils.Decorate = function (SuperClass, DecoratorClass) {
	    var decoratedMethods = getMethods(DecoratorClass);
	    var superMethods = getMethods(SuperClass);

	    function DecoratedClass () {
	      var unshift = Array.prototype.unshift;

	      var argCount = DecoratorClass.prototype.constructor.length;

	      var calledConstructor = SuperClass.prototype.constructor;

	      if (argCount > 0) {
	        unshift.call(arguments, SuperClass.prototype.constructor);

	        calledConstructor = DecoratorClass.prototype.constructor;
	      }

	      calledConstructor.apply(this, arguments);
	    }

	    DecoratorClass.displayName = SuperClass.displayName;

	    function ctr () {
	      this.constructor = DecoratedClass;
	    }

	    DecoratedClass.prototype = new ctr();

	    for (var m = 0; m < superMethods.length; m++) {
	        var superMethod = superMethods[m];

	        DecoratedClass.prototype[superMethod] =
	          SuperClass.prototype[superMethod];
	    }

	    var calledMethod = function (methodName) {
	      // Stub out the original method if it's not decorating an actual method
	      var originalMethod = function () {};

	      if (methodName in DecoratedClass.prototype) {
	        originalMethod = DecoratedClass.prototype[methodName];
	      }

	      var decoratedMethod = DecoratorClass.prototype[methodName];

	      return function () {
	        var unshift = Array.prototype.unshift;

	        unshift.call(arguments, originalMethod);

	        return decoratedMethod.apply(this, arguments);
	      };
	    };

	    for (var d = 0; d < decoratedMethods.length; d++) {
	      var decoratedMethod = decoratedMethods[d];

	      DecoratedClass.prototype[decoratedMethod] = calledMethod(decoratedMethod);
	    }

	    return DecoratedClass;
	  };

	  var Observable = function () {
	    this.listeners = {};
	  };

	  Observable.prototype.on = function (event, callback) {
	    this.listeners = this.listeners || {};

	    if (event in this.listeners) {
	      this.listeners[event].push(callback);
	    } else {
	      this.listeners[event] = [callback];
	    }
	  };

	  Observable.prototype.trigger = function (event) {
	    var slice = Array.prototype.slice;
	    var params = slice.call(arguments, 1);

	    this.listeners = this.listeners || {};

	    // Params should always come in as an array
	    if (params == null) {
	      params = [];
	    }

	    // If there are no arguments to the event, use a temporary object
	    if (params.length === 0) {
	      params.push({});
	    }

	    // Set the `_type` of the first object to the event
	    params[0]._type = event;

	    if (event in this.listeners) {
	      this.invoke(this.listeners[event], slice.call(arguments, 1));
	    }

	    if ('*' in this.listeners) {
	      this.invoke(this.listeners['*'], arguments);
	    }
	  };

	  Observable.prototype.invoke = function (listeners, params) {
	    for (var i = 0, len = listeners.length; i < len; i++) {
	      listeners[i].apply(this, params);
	    }
	  };

	  Utils.Observable = Observable;

	  Utils.generateChars = function (length) {
	    var chars = '';

	    for (var i = 0; i < length; i++) {
	      var randomChar = Math.floor(Math.random() * 36);
	      chars += randomChar.toString(36);
	    }

	    return chars;
	  };

	  Utils.bind = function (func, context) {
	    return function () {
	      func.apply(context, arguments);
	    };
	  };

	  Utils._convertData = function (data) {
	    for (var originalKey in data) {
	      var keys = originalKey.split('-');

	      var dataLevel = data;

	      if (keys.length === 1) {
	        continue;
	      }

	      for (var k = 0; k < keys.length; k++) {
	        var key = keys[k];

	        // Lowercase the first letter
	        // By default, dash-separated becomes camelCase
	        key = key.substring(0, 1).toLowerCase() + key.substring(1);

	        if (!(key in dataLevel)) {
	          dataLevel[key] = {};
	        }

	        if (k == keys.length - 1) {
	          dataLevel[key] = data[originalKey];
	        }

	        dataLevel = dataLevel[key];
	      }

	      delete data[originalKey];
	    }

	    return data;
	  };

	  Utils.hasScroll = function (index, el) {
	    // Adapted from the function created by @ShadowScripter
	    // and adapted by @BillBarry on the Stack Exchange Code Review website.
	    // The original code can be found at
	    // http://codereview.stackexchange.com/q/13338
	    // and was designed to be used with the Sizzle selector engine.

	    var $el = $(el);
	    var overflowX = el.style.overflowX;
	    var overflowY = el.style.overflowY;

	    //Check both x and y declarations
	    if (overflowX === overflowY &&
	        (overflowY === 'hidden' || overflowY === 'visible')) {
	      return false;
	    }

	    if (overflowX === 'scroll' || overflowY === 'scroll') {
	      return true;
	    }

	    return ($el.innerHeight() < el.scrollHeight ||
	      $el.innerWidth() < el.scrollWidth);
	  };

	  Utils.escapeMarkup = function (markup) {
	    var replaceMap = {
	      '\\': '&#92;',
	      '&': '&amp;',
	      '<': '&lt;',
	      '>': '&gt;',
	      '"': '&quot;',
	      '\'': '&#39;',
	      '/': '&#47;'
	    };

	    // Do not try to escape the markup if it's not a string
	    if (typeof markup !== 'string') {
	      return markup;
	    }

	    return String(markup).replace(/[&<>"'\/\\]/g, function (match) {
	      return replaceMap[match];
	    });
	  };

	  // Append an array of jQuery nodes to a given element.
	  Utils.appendMany = function ($element, $nodes) {
	    // jQuery 1.7.x does not support $.fn.append() with an array
	    // Fall back to a jQuery object collection using $.fn.add()
	    if ($.fn.jquery.substr(0, 3) === '1.7') {
	      var $jqNodes = $();

	      $.map($nodes, function (node) {
	        $jqNodes = $jqNodes.add(node);
	      });

	      $nodes = $jqNodes;
	    }

	    $element.append($nodes);
	  };

	  return Utils;
	});

	S2.define('select2/results',[
	  'jquery',
	  './utils'
	], function ($, Utils) {
	  function Results ($element, options, dataAdapter) {
	    this.$element = $element;
	    this.data = dataAdapter;
	    this.options = options;

	    Results.__super__.constructor.call(this);
	  }

	  Utils.Extend(Results, Utils.Observable);

	  Results.prototype.render = function () {
	    var $results = $(
	      '<ul class="select2-results__options" role="tree"></ul>'
	    );

	    if (this.options.get('multiple')) {
	      $results.attr('aria-multiselectable', 'true');
	    }

	    this.$results = $results;

	    return $results;
	  };

	  Results.prototype.clear = function () {
	    this.$results.empty();
	  };

	  Results.prototype.displayMessage = function (params) {
	    var escapeMarkup = this.options.get('escapeMarkup');

	    this.clear();
	    this.hideLoading();

	    var $message = $(
	      '<li role="treeitem" aria-live="assertive"' +
	      ' class="select2-results__option"></li>'
	    );

	    var message = this.options.get('translations').get(params.message);

	    $message.append(
	      escapeMarkup(
	        message(params.args)
	      )
	    );

	    $message[0].className += ' select2-results__message';

	    this.$results.append($message);
	  };

	  Results.prototype.hideMessages = function () {
	    this.$results.find('.select2-results__message').remove();
	  };

	  Results.prototype.append = function (data) {
	    this.hideLoading();

	    var $options = [];

	    if (data.results == null || data.results.length === 0) {
	      if (this.$results.children().length === 0) {
	        this.trigger('results:message', {
	          message: 'noResults'
	        });
	      }

	      return;
	    }

	    data.results = this.sort(data.results);

	    for (var d = 0; d < data.results.length; d++) {
	      var item = data.results[d];

	      var $option = this.option(item);

	      $options.push($option);
	    }

	    this.$results.append($options);
	  };

	  Results.prototype.position = function ($results, $dropdown) {
	    var $resultsContainer = $dropdown.find('.select2-results');
	    $resultsContainer.append($results);
	  };

	  Results.prototype.sort = function (data) {
	    var sorter = this.options.get('sorter');

	    return sorter(data);
	  };

	  Results.prototype.highlightFirstItem = function () {
	    var $options = this.$results
	      .find('.select2-results__option[aria-selected]');

	    var $selected = $options.filter('[aria-selected=true]');

	    // Check if there are any selected options
	    if ($selected.length > 0) {
	      // If there are selected options, highlight the first
	      $selected.first().trigger('mouseenter');
	    } else {
	      // If there are no selected options, highlight the first option
	      // in the dropdown
	      $options.first().trigger('mouseenter');
	    }

	    this.ensureHighlightVisible();
	  };

	  Results.prototype.setClasses = function () {
	    var self = this;

	    this.data.current(function (selected) {
	      var selectedIds = $.map(selected, function (s) {
	        return s.id.toString();
	      });

	      var $options = self.$results
	        .find('.select2-results__option[aria-selected]');

	      $options.each(function () {
	        var $option = $(this);

	        var item = $.data(this, 'data');

	        // id needs to be converted to a string when comparing
	        var id = '' + item.id;

	        if ((item.element != null && item.element.selected) ||
	            (item.element == null && $.inArray(id, selectedIds) > -1)) {
	          $option.attr('aria-selected', 'true');
	        } else {
	          $option.attr('aria-selected', 'false');
	        }
	      });

	    });
	  };

	  Results.prototype.showLoading = function (params) {
	    this.hideLoading();

	    var loadingMore = this.options.get('translations').get('searching');

	    var loading = {
	      disabled: true,
	      loading: true,
	      text: loadingMore(params)
	    };
	    var $loading = this.option(loading);
	    $loading.className += ' loading-results';

	    this.$results.prepend($loading);
	  };

	  Results.prototype.hideLoading = function () {
	    this.$results.find('.loading-results').remove();
	  };

	  Results.prototype.option = function (data) {
	    var option = document.createElement('li');
	    option.className = 'select2-results__option';

	    var attrs = {
	      'role': 'treeitem',
	      'aria-selected': 'false'
	    };

	    if (data.disabled) {
	      delete attrs['aria-selected'];
	      attrs['aria-disabled'] = 'true';
	    }

	    if (data.id == null) {
	      delete attrs['aria-selected'];
	    }

	    if (data._resultId != null) {
	      option.id = data._resultId;
	    }

	    if (data.title) {
	      option.title = data.title;
	    }

	    if (data.children) {
	      attrs.role = 'group';
	      attrs['aria-label'] = data.text;
	      delete attrs['aria-selected'];
	    }

	    for (var attr in attrs) {
	      var val = attrs[attr];

	      option.setAttribute(attr, val);
	    }

	    if (data.children) {
	      var $option = $(option);

	      var label = document.createElement('strong');
	      label.className = 'select2-results__group';

	      var $label = $(label);
	      this.template(data, label);

	      var $children = [];

	      for (var c = 0; c < data.children.length; c++) {
	        var child = data.children[c];

	        var $child = this.option(child);

	        $children.push($child);
	      }

	      var $childrenContainer = $('<ul></ul>', {
	        'class': 'select2-results__options select2-results__options--nested'
	      });

	      $childrenContainer.append($children);

	      $option.append(label);
	      $option.append($childrenContainer);
	    } else {
	      this.template(data, option);
	    }

	    $.data(option, 'data', data);

	    return option;
	  };

	  Results.prototype.bind = function (container, $container) {
	    var self = this;

	    var id = container.id + '-results';

	    this.$results.attr('id', id);

	    container.on('results:all', function (params) {
	      self.clear();
	      self.append(params.data);

	      if (container.isOpen()) {
	        self.setClasses();
	        self.highlightFirstItem();
	      }
	    });

	    container.on('results:append', function (params) {
	      self.append(params.data);

	      if (container.isOpen()) {
	        self.setClasses();
	      }
	    });

	    container.on('query', function (params) {
	      self.hideMessages();
	      self.showLoading(params);
	    });

	    container.on('select', function () {
	      if (!container.isOpen()) {
	        return;
	      }

	      self.setClasses();
	      self.highlightFirstItem();
	    });

	    container.on('unselect', function () {
	      if (!container.isOpen()) {
	        return;
	      }

	      self.setClasses();
	      self.highlightFirstItem();
	    });

	    container.on('open', function () {
	      // When the dropdown is open, aria-expended="true"
	      self.$results.attr('aria-expanded', 'true');
	      self.$results.attr('aria-hidden', 'false');

	      self.setClasses();
	      self.ensureHighlightVisible();
	    });

	    container.on('close', function () {
	      // When the dropdown is closed, aria-expended="false"
	      self.$results.attr('aria-expanded', 'false');
	      self.$results.attr('aria-hidden', 'true');
	      self.$results.removeAttr('aria-activedescendant');
	    });

	    container.on('results:toggle', function () {
	      var $highlighted = self.getHighlightedResults();

	      if ($highlighted.length === 0) {
	        return;
	      }

	      $highlighted.trigger('mouseup');
	    });

	    container.on('results:select', function () {
	      var $highlighted = self.getHighlightedResults();

	      if ($highlighted.length === 0) {
	        return;
	      }

	      var data = $highlighted.data('data');

	      if ($highlighted.attr('aria-selected') == 'true') {
	        self.trigger('close', {});
	      } else {
	        self.trigger('select', {
	          data: data
	        });
	      }
	    });

	    container.on('results:previous', function () {
	      var $highlighted = self.getHighlightedResults();

	      var $options = self.$results.find('[aria-selected]');

	      var currentIndex = $options.index($highlighted);

	      // If we are already at te top, don't move further
	      if (currentIndex === 0) {
	        return;
	      }

	      var nextIndex = currentIndex - 1;

	      // If none are highlighted, highlight the first
	      if ($highlighted.length === 0) {
	        nextIndex = 0;
	      }

	      var $next = $options.eq(nextIndex);

	      $next.trigger('mouseenter');

	      var currentOffset = self.$results.offset().top;
	      var nextTop = $next.offset().top;
	      var nextOffset = self.$results.scrollTop() + (nextTop - currentOffset);

	      if (nextIndex === 0) {
	        self.$results.scrollTop(0);
	      } else if (nextTop - currentOffset < 0) {
	        self.$results.scrollTop(nextOffset);
	      }
	    });

	    container.on('results:next', function () {
	      var $highlighted = self.getHighlightedResults();

	      var $options = self.$results.find('[aria-selected]');

	      var currentIndex = $options.index($highlighted);

	      var nextIndex = currentIndex + 1;

	      // If we are at the last option, stay there
	      if (nextIndex >= $options.length) {
	        return;
	      }

	      var $next = $options.eq(nextIndex);

	      $next.trigger('mouseenter');

	      var currentOffset = self.$results.offset().top +
	        self.$results.outerHeight(false);
	      var nextBottom = $next.offset().top + $next.outerHeight(false);
	      var nextOffset = self.$results.scrollTop() + nextBottom - currentOffset;

	      if (nextIndex === 0) {
	        self.$results.scrollTop(0);
	      } else if (nextBottom > currentOffset) {
	        self.$results.scrollTop(nextOffset);
	      }
	    });

	    container.on('results:focus', function (params) {
	      params.element.addClass('select2-results__option--highlighted');
	    });

	    container.on('results:message', function (params) {
	      self.displayMessage(params);
	    });

	    if ($.fn.mousewheel) {
	      this.$results.on('mousewheel', function (e) {
	        var top = self.$results.scrollTop();

	        var bottom = self.$results.get(0).scrollHeight - top + e.deltaY;

	        var isAtTop = e.deltaY > 0 && top - e.deltaY <= 0;
	        var isAtBottom = e.deltaY < 0 && bottom <= self.$results.height();

	        if (isAtTop) {
	          self.$results.scrollTop(0);

	          e.preventDefault();
	          e.stopPropagation();
	        } else if (isAtBottom) {
	          self.$results.scrollTop(
	            self.$results.get(0).scrollHeight - self.$results.height()
	          );

	          e.preventDefault();
	          e.stopPropagation();
	        }
	      });
	    }

	    this.$results.on('mouseup', '.select2-results__option[aria-selected]',
	      function (evt) {
	      var $this = $(this);

	      var data = $this.data('data');

	      if ($this.attr('aria-selected') === 'true') {
	        if (self.options.get('multiple')) {
	          self.trigger('unselect', {
	            originalEvent: evt,
	            data: data
	          });
	        } else {
	          self.trigger('close', {});
	        }

	        return;
	      }

	      self.trigger('select', {
	        originalEvent: evt,
	        data: data
	      });
	    });

	    this.$results.on('mouseenter', '.select2-results__option[aria-selected]',
	      function (evt) {
	      var data = $(this).data('data');

	      self.getHighlightedResults()
	          .removeClass('select2-results__option--highlighted');

	      self.trigger('results:focus', {
	        data: data,
	        element: $(this)
	      });
	    });
	  };

	  Results.prototype.getHighlightedResults = function () {
	    var $highlighted = this.$results
	    .find('.select2-results__option--highlighted');

	    return $highlighted;
	  };

	  Results.prototype.destroy = function () {
	    this.$results.remove();
	  };

	  Results.prototype.ensureHighlightVisible = function () {
	    var $highlighted = this.getHighlightedResults();

	    if ($highlighted.length === 0) {
	      return;
	    }

	    var $options = this.$results.find('[aria-selected]');

	    var currentIndex = $options.index($highlighted);

	    var currentOffset = this.$results.offset().top;
	    var nextTop = $highlighted.offset().top;
	    var nextOffset = this.$results.scrollTop() + (nextTop - currentOffset);

	    var offsetDelta = nextTop - currentOffset;
	    nextOffset -= $highlighted.outerHeight(false) * 2;

	    if (currentIndex <= 2) {
	      this.$results.scrollTop(0);
	    } else if (offsetDelta > this.$results.outerHeight() || offsetDelta < 0) {
	      this.$results.scrollTop(nextOffset);
	    }
	  };

	  Results.prototype.template = function (result, container) {
	    var template = this.options.get('templateResult');
	    var escapeMarkup = this.options.get('escapeMarkup');

	    var content = template(result, container);

	    if (content == null) {
	      container.style.display = 'none';
	    } else if (typeof content === 'string') {
	      container.innerHTML = escapeMarkup(content);
	    } else {
	      $(container).append(content);
	    }
	  };

	  return Results;
	});

	S2.define('select2/keys',[

	], function () {
	  var KEYS = {
	    BACKSPACE: 8,
	    TAB: 9,
	    ENTER: 13,
	    SHIFT: 16,
	    CTRL: 17,
	    ALT: 18,
	    ESC: 27,
	    SPACE: 32,
	    PAGE_UP: 33,
	    PAGE_DOWN: 34,
	    END: 35,
	    HOME: 36,
	    LEFT: 37,
	    UP: 38,
	    RIGHT: 39,
	    DOWN: 40,
	    DELETE: 46
	  };

	  return KEYS;
	});

	S2.define('select2/selection/base',[
	  'jquery',
	  '../utils',
	  '../keys'
	], function ($, Utils, KEYS) {
	  function BaseSelection ($element, options) {
	    this.$element = $element;
	    this.options = options;

	    BaseSelection.__super__.constructor.call(this);
	  }

	  Utils.Extend(BaseSelection, Utils.Observable);

	  BaseSelection.prototype.render = function () {
	    var $selection = $(
	      '<span class="select2-selection" role="combobox" ' +
	      ' aria-haspopup="true" aria-expanded="false">' +
	      '</span>'
	    );

	    this._tabindex = 0;

	    if (this.$element.data('old-tabindex') != null) {
	      this._tabindex = this.$element.data('old-tabindex');
	    } else if (this.$element.attr('tabindex') != null) {
	      this._tabindex = this.$element.attr('tabindex');
	    }

	    $selection.attr('title', this.$element.attr('title'));
	    $selection.attr('tabindex', this._tabindex);

	    this.$selection = $selection;

	    return $selection;
	  };

	  BaseSelection.prototype.bind = function (container, $container) {
	    var self = this;

	    var id = container.id + '-container';
	    var resultsId = container.id + '-results';

	    this.container = container;

	    this.$selection.on('focus', function (evt) {
	      self.trigger('focus', evt);
	    });

	    this.$selection.on('blur', function (evt) {
	      self._handleBlur(evt);
	    });

	    this.$selection.on('keydown', function (evt) {
	      self.trigger('keypress', evt);

	      if (evt.which === KEYS.SPACE) {
	        evt.preventDefault();
	      }
	    });

	    container.on('results:focus', function (params) {
	      self.$selection.attr('aria-activedescendant', params.data._resultId);
	    });

	    container.on('selection:update', function (params) {
	      self.update(params.data);
	    });

	    container.on('open', function () {
	      // When the dropdown is open, aria-expanded="true"
	      self.$selection.attr('aria-expanded', 'true');
	      self.$selection.attr('aria-owns', resultsId);

	      self._attachCloseHandler(container);
	    });

	    container.on('close', function () {
	      // When the dropdown is closed, aria-expanded="false"
	      self.$selection.attr('aria-expanded', 'false');
	      self.$selection.removeAttr('aria-activedescendant');
	      self.$selection.removeAttr('aria-owns');

	      self.$selection.focus();

	      self._detachCloseHandler(container);
	    });

	    container.on('enable', function () {
	      self.$selection.attr('tabindex', self._tabindex);
	    });

	    container.on('disable', function () {
	      self.$selection.attr('tabindex', '-1');
	    });
	  };

	  BaseSelection.prototype._handleBlur = function (evt) {
	    var self = this;

	    // This needs to be delayed as the active element is the body when the tab
	    // key is pressed, possibly along with others.
	    window.setTimeout(function () {
	      // Don't trigger `blur` if the focus is still in the selection
	      if (
	        (document.activeElement == self.$selection[0]) ||
	        ($.contains(self.$selection[0], document.activeElement))
	      ) {
	        return;
	      }

	      self.trigger('blur', evt);
	    }, 1);
	  };

	  BaseSelection.prototype._attachCloseHandler = function (container) {
	    var self = this;

	    $(document.body).on('mousedown.select2.' + container.id, function (e) {
	      var $target = $(e.target);

	      var $select = $target.closest('.select2');

	      var $all = $('.select2.select2-container--open');

	      $all.each(function () {
	        var $this = $(this);

	        if (this == $select[0]) {
	          return;
	        }

	        var $element = $this.data('element');

	        $element.select2('close');
	      });
	    });
	  };

	  BaseSelection.prototype._detachCloseHandler = function (container) {
	    $(document.body).off('mousedown.select2.' + container.id);
	  };

	  BaseSelection.prototype.position = function ($selection, $container) {
	    var $selectionContainer = $container.find('.selection');
	    $selectionContainer.append($selection);
	  };

	  BaseSelection.prototype.destroy = function () {
	    this._detachCloseHandler(this.container);
	  };

	  BaseSelection.prototype.update = function (data) {
	    throw new Error('The `update` method must be defined in child classes.');
	  };

	  return BaseSelection;
	});

	S2.define('select2/selection/single',[
	  'jquery',
	  './base',
	  '../utils',
	  '../keys'
	], function ($, BaseSelection, Utils, KEYS) {
	  function SingleSelection () {
	    SingleSelection.__super__.constructor.apply(this, arguments);
	  }

	  Utils.Extend(SingleSelection, BaseSelection);

	  SingleSelection.prototype.render = function () {
	    var $selection = SingleSelection.__super__.render.call(this);

	    $selection.addClass('select2-selection--single');

	    $selection.html(
	      '<span class="select2-selection__rendered"></span>' +
	      '<span class="select2-selection__arrow" role="presentation">' +
	        '<b role="presentation"></b>' +
	      '</span>'
	    );

	    return $selection;
	  };

	  SingleSelection.prototype.bind = function (container, $container) {
	    var self = this;

	    SingleSelection.__super__.bind.apply(this, arguments);

	    var id = container.id + '-container';

	    this.$selection.find('.select2-selection__rendered').attr('id', id);
	    this.$selection.attr('aria-labelledby', id);

	    this.$selection.on('mousedown', function (evt) {
	      // Only respond to left clicks
	      if (evt.which !== 1) {
	        return;
	      }

	      self.trigger('toggle', {
	        originalEvent: evt
	      });
	    });

	    this.$selection.on('focus', function (evt) {
	      // User focuses on the container
	    });

	    this.$selection.on('blur', function (evt) {
	      // User exits the container
	    });

	    container.on('focus', function (evt) {
	      if (!container.isOpen()) {
	        self.$selection.focus();
	      }
	    });

	    container.on('selection:update', function (params) {
	      self.update(params.data);
	    });
	  };

	  SingleSelection.prototype.clear = function () {
	    this.$selection.find('.select2-selection__rendered').empty();
	  };

	  SingleSelection.prototype.display = function (data, container) {
	    var template = this.options.get('templateSelection');
	    var escapeMarkup = this.options.get('escapeMarkup');

	    return escapeMarkup(template(data, container));
	  };

	  SingleSelection.prototype.selectionContainer = function () {
	    return $('<span></span>');
	  };

	  SingleSelection.prototype.update = function (data) {
	    if (data.length === 0) {
	      this.clear();
	      return;
	    }

	    var selection = data[0];

	    var $rendered = this.$selection.find('.select2-selection__rendered');
	    var formatted = this.display(selection, $rendered);

	    $rendered.empty().append(formatted);
	    $rendered.prop('title', selection.title || selection.text);
	  };

	  return SingleSelection;
	});

	S2.define('select2/selection/multiple',[
	  'jquery',
	  './base',
	  '../utils'
	], function ($, BaseSelection, Utils) {
	  function MultipleSelection ($element, options) {
	    MultipleSelection.__super__.constructor.apply(this, arguments);
	  }

	  Utils.Extend(MultipleSelection, BaseSelection);

	  MultipleSelection.prototype.render = function () {
	    var $selection = MultipleSelection.__super__.render.call(this);

	    $selection.addClass('select2-selection--multiple');

	    $selection.html(
	      '<ul class="select2-selection__rendered"></ul>'
	    );

	    return $selection;
	  };

	  MultipleSelection.prototype.bind = function (container, $container) {
	    var self = this;

	    MultipleSelection.__super__.bind.apply(this, arguments);

	    this.$selection.on('click', function (evt) {
	      self.trigger('toggle', {
	        originalEvent: evt
	      });
	    });

	    this.$selection.on(
	      'click',
	      '.select2-selection__choice__remove',
	      function (evt) {
	        // Ignore the event if it is disabled
	        if (self.options.get('disabled')) {
	          return;
	        }

	        var $remove = $(this);
	        var $selection = $remove.parent();

	        var data = $selection.data('data');

	        self.trigger('unselect', {
	          originalEvent: evt,
	          data: data
	        });
	      }
	    );
	  };

	  MultipleSelection.prototype.clear = function () {
	    this.$selection.find('.select2-selection__rendered').empty();
	  };

	  MultipleSelection.prototype.display = function (data, container) {
	    var template = this.options.get('templateSelection');
	    var escapeMarkup = this.options.get('escapeMarkup');

	    return escapeMarkup(template(data, container));
	  };

	  MultipleSelection.prototype.selectionContainer = function () {
	    var $container = $(
	      '<li class="select2-selection__choice">' +
	        '<span class="select2-selection__choice__remove" role="presentation">' +
	          '&times;' +
	        '</span>' +
	      '</li>'
	    );

	    return $container;
	  };

	  MultipleSelection.prototype.update = function (data) {
	    this.clear();

	    if (data.length === 0) {
	      return;
	    }

	    var $selections = [];

	    for (var d = 0; d < data.length; d++) {
	      var selection = data[d];

	      var $selection = this.selectionContainer();
	      var formatted = this.display(selection, $selection);

	      $selection.append(formatted);
	      $selection.prop('title', selection.title || selection.text);

	      $selection.data('data', selection);

	      $selections.push($selection);
	    }

	    var $rendered = this.$selection.find('.select2-selection__rendered');

	    Utils.appendMany($rendered, $selections);
	  };

	  return MultipleSelection;
	});

	S2.define('select2/selection/placeholder',[
	  '../utils'
	], function (Utils) {
	  function Placeholder (decorated, $element, options) {
	    this.placeholder = this.normalizePlaceholder(options.get('placeholder'));

	    decorated.call(this, $element, options);
	  }

	  Placeholder.prototype.normalizePlaceholder = function (_, placeholder) {
	    if (typeof placeholder === 'string') {
	      placeholder = {
	        id: '',
	        text: placeholder
	      };
	    }

	    return placeholder;
	  };

	  Placeholder.prototype.createPlaceholder = function (decorated, placeholder) {
	    var $placeholder = this.selectionContainer();

	    $placeholder.html(this.display(placeholder));
	    $placeholder.addClass('select2-selection__placeholder')
	                .removeClass('select2-selection__choice');

	    return $placeholder;
	  };

	  Placeholder.prototype.update = function (decorated, data) {
	    var singlePlaceholder = (
	      data.length == 1 && data[0].id != this.placeholder.id
	    );
	    var multipleSelections = data.length > 1;

	    if (multipleSelections || singlePlaceholder) {
	      return decorated.call(this, data);
	    }

	    this.clear();

	    var $placeholder = this.createPlaceholder(this.placeholder);

	    this.$selection.find('.select2-selection__rendered').append($placeholder);
	  };

	  return Placeholder;
	});

	S2.define('select2/selection/allowClear',[
	  'jquery',
	  '../keys'
	], function ($, KEYS) {
	  function AllowClear () { }

	  AllowClear.prototype.bind = function (decorated, container, $container) {
	    var self = this;

	    decorated.call(this, container, $container);

	    if (this.placeholder == null) {
	      if (this.options.get('debug') && window.console && console.error) {
	        console.error(
	          'Select2: The `allowClear` option should be used in combination ' +
	          'with the `placeholder` option.'
	        );
	      }
	    }

	    this.$selection.on('mousedown', '.select2-selection__clear',
	      function (evt) {
	        self._handleClear(evt);
	    });

	    container.on('keypress', function (evt) {
	      self._handleKeyboardClear(evt, container);
	    });
	  };

	  AllowClear.prototype._handleClear = function (_, evt) {
	    // Ignore the event if it is disabled
	    if (this.options.get('disabled')) {
	      return;
	    }

	    var $clear = this.$selection.find('.select2-selection__clear');

	    // Ignore the event if nothing has been selected
	    if ($clear.length === 0) {
	      return;
	    }

	    evt.stopPropagation();

	    var data = $clear.data('data');

	    for (var d = 0; d < data.length; d++) {
	      var unselectData = {
	        data: data[d]
	      };

	      // Trigger the `unselect` event, so people can prevent it from being
	      // cleared.
	      this.trigger('unselect', unselectData);

	      // If the event was prevented, don't clear it out.
	      if (unselectData.prevented) {
	        return;
	      }
	    }

	    this.$element.val(this.placeholder.id).trigger('change');

	    this.trigger('toggle', {});
	  };

	  AllowClear.prototype._handleKeyboardClear = function (_, evt, container) {
	    if (container.isOpen()) {
	      return;
	    }

	    if (evt.which == KEYS.DELETE || evt.which == KEYS.BACKSPACE) {
	      this._handleClear(evt);
	    }
	  };

	  AllowClear.prototype.update = function (decorated, data) {
	    decorated.call(this, data);

	    if (this.$selection.find('.select2-selection__placeholder').length > 0 ||
	        data.length === 0) {
	      return;
	    }

	    var $remove = $(
	      '<span class="select2-selection__clear">' +
	        '&times;' +
	      '</span>'
	    );
	    $remove.data('data', data);

	    this.$selection.find('.select2-selection__rendered').prepend($remove);
	  };

	  return AllowClear;
	});

	S2.define('select2/selection/search',[
	  'jquery',
	  '../utils',
	  '../keys'
	], function ($, Utils, KEYS) {
	  function Search (decorated, $element, options) {
	    decorated.call(this, $element, options);
	  }

	  Search.prototype.render = function (decorated) {
	    var $search = $(
	      '<li class="select2-search select2-search--inline">' +
	        '<input class="select2-search__field" type="search" tabindex="-1"' +
	        ' autocomplete="off" autocorrect="off" autocapitalize="off"' +
	        ' spellcheck="false" role="textbox" aria-autocomplete="list" />' +
	      '</li>'
	    );

	    this.$searchContainer = $search;
	    this.$search = $search.find('input');

	    var $rendered = decorated.call(this);

	    this._transferTabIndex();

	    return $rendered;
	  };

	  Search.prototype.bind = function (decorated, container, $container) {
	    var self = this;

	    decorated.call(this, container, $container);

	    container.on('open', function () {
	      self.$search.trigger('focus');
	    });

	    container.on('close', function () {
	      self.$search.val('');
	      self.$search.removeAttr('aria-activedescendant');
	      self.$search.trigger('focus');
	    });

	    container.on('enable', function () {
	      self.$search.prop('disabled', false);

	      self._transferTabIndex();
	    });

	    container.on('disable', function () {
	      self.$search.prop('disabled', true);
	    });

	    container.on('focus', function (evt) {
	      self.$search.trigger('focus');
	    });

	    container.on('results:focus', function (params) {
	      self.$search.attr('aria-activedescendant', params.id);
	    });

	    this.$selection.on('focusin', '.select2-search--inline', function (evt) {
	      self.trigger('focus', evt);
	    });

	    this.$selection.on('focusout', '.select2-search--inline', function (evt) {
	      self._handleBlur(evt);
	    });

	    this.$selection.on('keydown', '.select2-search--inline', function (evt) {
	      evt.stopPropagation();

	      self.trigger('keypress', evt);

	      self._keyUpPrevented = evt.isDefaultPrevented();

	      var key = evt.which;

	      if (key === KEYS.BACKSPACE && self.$search.val() === '') {
	        var $previousChoice = self.$searchContainer
	          .prev('.select2-selection__choice');

	        if ($previousChoice.length > 0) {
	          var item = $previousChoice.data('data');

	          self.searchRemoveChoice(item);

	          evt.preventDefault();
	        }
	      }
	    });

	    // Try to detect the IE version should the `documentMode` property that
	    // is stored on the document. This is only implemented in IE and is
	    // slightly cleaner than doing a user agent check.
	    // This property is not available in Edge, but Edge also doesn't have
	    // this bug.
	    var msie = document.documentMode;
	    var disableInputEvents = msie && msie <= 11;

	    // Workaround for browsers which do not support the `input` event
	    // This will prevent double-triggering of events for browsers which support
	    // both the `keyup` and `input` events.
	    this.$selection.on(
	      'input.searchcheck',
	      '.select2-search--inline',
	      function (evt) {
	        // IE will trigger the `input` event when a placeholder is used on a
	        // search box. To get around this issue, we are forced to ignore all
	        // `input` events in IE and keep using `keyup`.
	        if (disableInputEvents) {
	          self.$selection.off('input.search input.searchcheck');
	          return;
	        }

	        // Unbind the duplicated `keyup` event
	        self.$selection.off('keyup.search');
	      }
	    );

	    this.$selection.on(
	      'keyup.search input.search',
	      '.select2-search--inline',
	      function (evt) {
	        // IE will trigger the `input` event when a placeholder is used on a
	        // search box. To get around this issue, we are forced to ignore all
	        // `input` events in IE and keep using `keyup`.
	        if (disableInputEvents && evt.type === 'input') {
	          self.$selection.off('input.search input.searchcheck');
	          return;
	        }

	        var key = evt.which;

	        // We can freely ignore events from modifier keys
	        if (key == KEYS.SHIFT || key == KEYS.CTRL || key == KEYS.ALT) {
	          return;
	        }

	        // Tabbing will be handled during the `keydown` phase
	        if (key == KEYS.TAB) {
	          return;
	        }

	        self.handleSearch(evt);
	      }
	    );
	  };

	  /**
	   * This method will transfer the tabindex attribute from the rendered
	   * selection to the search box. This allows for the search box to be used as
	   * the primary focus instead of the selection container.
	   *
	   * @private
	   */
	  Search.prototype._transferTabIndex = function (decorated) {
	    this.$search.attr('tabindex', this.$selection.attr('tabindex'));
	    this.$selection.attr('tabindex', '-1');
	  };

	  Search.prototype.createPlaceholder = function (decorated, placeholder) {
	    this.$search.attr('placeholder', placeholder.text);
	  };

	  Search.prototype.update = function (decorated, data) {
	    var searchHadFocus = this.$search[0] == document.activeElement;

	    this.$search.attr('placeholder', '');

	    decorated.call(this, data);

	    this.$selection.find('.select2-selection__rendered')
	                   .append(this.$searchContainer);

	    this.resizeSearch();
	    if (searchHadFocus) {
	      this.$search.focus();
	    }
	  };

	  Search.prototype.handleSearch = function () {
	    this.resizeSearch();

	    if (!this._keyUpPrevented) {
	      var input = this.$search.val();

	      this.trigger('query', {
	        term: input
	      });
	    }

	    this._keyUpPrevented = false;
	  };

	  Search.prototype.searchRemoveChoice = function (decorated, item) {
	    this.trigger('unselect', {
	      data: item
	    });

	    this.$search.val(item.text);
	    this.handleSearch();
	  };

	  Search.prototype.resizeSearch = function () {
	    this.$search.css('width', '25px');

	    var width = '';

	    if (this.$search.attr('placeholder') !== '') {
	      width = this.$selection.find('.select2-selection__rendered').innerWidth();
	    } else {
	      var minimumWidth = this.$search.val().length + 1;

	      width = (minimumWidth * 0.75) + 'em';
	    }

	    this.$search.css('width', width);
	  };

	  return Search;
	});

	S2.define('select2/selection/eventRelay',[
	  'jquery'
	], function ($) {
	  function EventRelay () { }

	  EventRelay.prototype.bind = function (decorated, container, $container) {
	    var self = this;
	    var relayEvents = [
	      'open', 'opening',
	      'close', 'closing',
	      'select', 'selecting',
	      'unselect', 'unselecting'
	    ];

	    var preventableEvents = ['opening', 'closing', 'selecting', 'unselecting'];

	    decorated.call(this, container, $container);

	    container.on('*', function (name, params) {
	      // Ignore events that should not be relayed
	      if ($.inArray(name, relayEvents) === -1) {
	        return;
	      }

	      // The parameters should always be an object
	      params = params || {};

	      // Generate the jQuery event for the Select2 event
	      var evt = $.Event('select2:' + name, {
	        params: params
	      });

	      self.$element.trigger(evt);

	      // Only handle preventable events if it was one
	      if ($.inArray(name, preventableEvents) === -1) {
	        return;
	      }

	      params.prevented = evt.isDefaultPrevented();
	    });
	  };

	  return EventRelay;
	});

	S2.define('select2/translation',[
	  'jquery',
	  'require'
	], function ($, require) {
	  function Translation (dict) {
	    this.dict = dict || {};
	  }

	  Translation.prototype.all = function () {
	    return this.dict;
	  };

	  Translation.prototype.get = function (key) {
	    return this.dict[key];
	  };

	  Translation.prototype.extend = function (translation) {
	    this.dict = $.extend({}, translation.all(), this.dict);
	  };

	  // Static functions

	  Translation._cache = {};

	  Translation.loadPath = function (path) {
	    if (!(path in Translation._cache)) {
	      var translations = require(path);

	      Translation._cache[path] = translations;
	    }

	    return new Translation(Translation._cache[path]);
	  };

	  return Translation;
	});

	S2.define('select2/diacritics',[

	], function () {
	  var diacritics = {
	    '\u24B6': 'A',
	    '\uFF21': 'A',
	    '\u00C0': 'A',
	    '\u00C1': 'A',
	    '\u00C2': 'A',
	    '\u1EA6': 'A',
	    '\u1EA4': 'A',
	    '\u1EAA': 'A',
	    '\u1EA8': 'A',
	    '\u00C3': 'A',
	    '\u0100': 'A',
	    '\u0102': 'A',
	    '\u1EB0': 'A',
	    '\u1EAE': 'A',
	    '\u1EB4': 'A',
	    '\u1EB2': 'A',
	    '\u0226': 'A',
	    '\u01E0': 'A',
	    '\u00C4': 'A',
	    '\u01DE': 'A',
	    '\u1EA2': 'A',
	    '\u00C5': 'A',
	    '\u01FA': 'A',
	    '\u01CD': 'A',
	    '\u0200': 'A',
	    '\u0202': 'A',
	    '\u1EA0': 'A',
	    '\u1EAC': 'A',
	    '\u1EB6': 'A',
	    '\u1E00': 'A',
	    '\u0104': 'A',
	    '\u023A': 'A',
	    '\u2C6F': 'A',
	    '\uA732': 'AA',
	    '\u00C6': 'AE',
	    '\u01FC': 'AE',
	    '\u01E2': 'AE',
	    '\uA734': 'AO',
	    '\uA736': 'AU',
	    '\uA738': 'AV',
	    '\uA73A': 'AV',
	    '\uA73C': 'AY',
	    '\u24B7': 'B',
	    '\uFF22': 'B',
	    '\u1E02': 'B',
	    '\u1E04': 'B',
	    '\u1E06': 'B',
	    '\u0243': 'B',
	    '\u0182': 'B',
	    '\u0181': 'B',
	    '\u24B8': 'C',
	    '\uFF23': 'C',
	    '\u0106': 'C',
	    '\u0108': 'C',
	    '\u010A': 'C',
	    '\u010C': 'C',
	    '\u00C7': 'C',
	    '\u1E08': 'C',
	    '\u0187': 'C',
	    '\u023B': 'C',
	    '\uA73E': 'C',
	    '\u24B9': 'D',
	    '\uFF24': 'D',
	    '\u1E0A': 'D',
	    '\u010E': 'D',
	    '\u1E0C': 'D',
	    '\u1E10': 'D',
	    '\u1E12': 'D',
	    '\u1E0E': 'D',
	    '\u0110': 'D',
	    '\u018B': 'D',
	    '\u018A': 'D',
	    '\u0189': 'D',
	    '\uA779': 'D',
	    '\u01F1': 'DZ',
	    '\u01C4': 'DZ',
	    '\u01F2': 'Dz',
	    '\u01C5': 'Dz',
	    '\u24BA': 'E',
	    '\uFF25': 'E',
	    '\u00C8': 'E',
	    '\u00C9': 'E',
	    '\u00CA': 'E',
	    '\u1EC0': 'E',
	    '\u1EBE': 'E',
	    '\u1EC4': 'E',
	    '\u1EC2': 'E',
	    '\u1EBC': 'E',
	    '\u0112': 'E',
	    '\u1E14': 'E',
	    '\u1E16': 'E',
	    '\u0114': 'E',
	    '\u0116': 'E',
	    '\u00CB': 'E',
	    '\u1EBA': 'E',
	    '\u011A': 'E',
	    '\u0204': 'E',
	    '\u0206': 'E',
	    '\u1EB8': 'E',
	    '\u1EC6': 'E',
	    '\u0228': 'E',
	    '\u1E1C': 'E',
	    '\u0118': 'E',
	    '\u1E18': 'E',
	    '\u1E1A': 'E',
	    '\u0190': 'E',
	    '\u018E': 'E',
	    '\u24BB': 'F',
	    '\uFF26': 'F',
	    '\u1E1E': 'F',
	    '\u0191': 'F',
	    '\uA77B': 'F',
	    '\u24BC': 'G',
	    '\uFF27': 'G',
	    '\u01F4': 'G',
	    '\u011C': 'G',
	    '\u1E20': 'G',
	    '\u011E': 'G',
	    '\u0120': 'G',
	    '\u01E6': 'G',
	    '\u0122': 'G',
	    '\u01E4': 'G',
	    '\u0193': 'G',
	    '\uA7A0': 'G',
	    '\uA77D': 'G',
	    '\uA77E': 'G',
	    '\u24BD': 'H',
	    '\uFF28': 'H',
	    '\u0124': 'H',
	    '\u1E22': 'H',
	    '\u1E26': 'H',
	    '\u021E': 'H',
	    '\u1E24': 'H',
	    '\u1E28': 'H',
	    '\u1E2A': 'H',
	    '\u0126': 'H',
	    '\u2C67': 'H',
	    '\u2C75': 'H',
	    '\uA78D': 'H',
	    '\u24BE': 'I',
	    '\uFF29': 'I',
	    '\u00CC': 'I',
	    '\u00CD': 'I',
	    '\u00CE': 'I',
	    '\u0128': 'I',
	    '\u012A': 'I',
	    '\u012C': 'I',
	    '\u0130': 'I',
	    '\u00CF': 'I',
	    '\u1E2E': 'I',
	    '\u1EC8': 'I',
	    '\u01CF': 'I',
	    '\u0208': 'I',
	    '\u020A': 'I',
	    '\u1ECA': 'I',
	    '\u012E': 'I',
	    '\u1E2C': 'I',
	    '\u0197': 'I',
	    '\u24BF': 'J',
	    '\uFF2A': 'J',
	    '\u0134': 'J',
	    '\u0248': 'J',
	    '\u24C0': 'K',
	    '\uFF2B': 'K',
	    '\u1E30': 'K',
	    '\u01E8': 'K',
	    '\u1E32': 'K',
	    '\u0136': 'K',
	    '\u1E34': 'K',
	    '\u0198': 'K',
	    '\u2C69': 'K',
	    '\uA740': 'K',
	    '\uA742': 'K',
	    '\uA744': 'K',
	    '\uA7A2': 'K',
	    '\u24C1': 'L',
	    '\uFF2C': 'L',
	    '\u013F': 'L',
	    '\u0139': 'L',
	    '\u013D': 'L',
	    '\u1E36': 'L',
	    '\u1E38': 'L',
	    '\u013B': 'L',
	    '\u1E3C': 'L',
	    '\u1E3A': 'L',
	    '\u0141': 'L',
	    '\u023D': 'L',
	    '\u2C62': 'L',
	    '\u2C60': 'L',
	    '\uA748': 'L',
	    '\uA746': 'L',
	    '\uA780': 'L',
	    '\u01C7': 'LJ',
	    '\u01C8': 'Lj',
	    '\u24C2': 'M',
	    '\uFF2D': 'M',
	    '\u1E3E': 'M',
	    '\u1E40': 'M',
	    '\u1E42': 'M',
	    '\u2C6E': 'M',
	    '\u019C': 'M',
	    '\u24C3': 'N',
	    '\uFF2E': 'N',
	    '\u01F8': 'N',
	    '\u0143': 'N',
	    '\u00D1': 'N',
	    '\u1E44': 'N',
	    '\u0147': 'N',
	    '\u1E46': 'N',
	    '\u0145': 'N',
	    '\u1E4A': 'N',
	    '\u1E48': 'N',
	    '\u0220': 'N',
	    '\u019D': 'N',
	    '\uA790': 'N',
	    '\uA7A4': 'N',
	    '\u01CA': 'NJ',
	    '\u01CB': 'Nj',
	    '\u24C4': 'O',
	    '\uFF2F': 'O',
	    '\u00D2': 'O',
	    '\u00D3': 'O',
	    '\u00D4': 'O',
	    '\u1ED2': 'O',
	    '\u1ED0': 'O',
	    '\u1ED6': 'O',
	    '\u1ED4': 'O',
	    '\u00D5': 'O',
	    '\u1E4C': 'O',
	    '\u022C': 'O',
	    '\u1E4E': 'O',
	    '\u014C': 'O',
	    '\u1E50': 'O',
	    '\u1E52': 'O',
	    '\u014E': 'O',
	    '\u022E': 'O',
	    '\u0230': 'O',
	    '\u00D6': 'O',
	    '\u022A': 'O',
	    '\u1ECE': 'O',
	    '\u0150': 'O',
	    '\u01D1': 'O',
	    '\u020C': 'O',
	    '\u020E': 'O',
	    '\u01A0': 'O',
	    '\u1EDC': 'O',
	    '\u1EDA': 'O',
	    '\u1EE0': 'O',
	    '\u1EDE': 'O',
	    '\u1EE2': 'O',
	    '\u1ECC': 'O',
	    '\u1ED8': 'O',
	    '\u01EA': 'O',
	    '\u01EC': 'O',
	    '\u00D8': 'O',
	    '\u01FE': 'O',
	    '\u0186': 'O',
	    '\u019F': 'O',
	    '\uA74A': 'O',
	    '\uA74C': 'O',
	    '\u01A2': 'OI',
	    '\uA74E': 'OO',
	    '\u0222': 'OU',
	    '\u24C5': 'P',
	    '\uFF30': 'P',
	    '\u1E54': 'P',
	    '\u1E56': 'P',
	    '\u01A4': 'P',
	    '\u2C63': 'P',
	    '\uA750': 'P',
	    '\uA752': 'P',
	    '\uA754': 'P',
	    '\u24C6': 'Q',
	    '\uFF31': 'Q',
	    '\uA756': 'Q',
	    '\uA758': 'Q',
	    '\u024A': 'Q',
	    '\u24C7': 'R',
	    '\uFF32': 'R',
	    '\u0154': 'R',
	    '\u1E58': 'R',
	    '\u0158': 'R',
	    '\u0210': 'R',
	    '\u0212': 'R',
	    '\u1E5A': 'R',
	    '\u1E5C': 'R',
	    '\u0156': 'R',
	    '\u1E5E': 'R',
	    '\u024C': 'R',
	    '\u2C64': 'R',
	    '\uA75A': 'R',
	    '\uA7A6': 'R',
	    '\uA782': 'R',
	    '\u24C8': 'S',
	    '\uFF33': 'S',
	    '\u1E9E': 'S',
	    '\u015A': 'S',
	    '\u1E64': 'S',
	    '\u015C': 'S',
	    '\u1E60': 'S',
	    '\u0160': 'S',
	    '\u1E66': 'S',
	    '\u1E62': 'S',
	    '\u1E68': 'S',
	    '\u0218': 'S',
	    '\u015E': 'S',
	    '\u2C7E': 'S',
	    '\uA7A8': 'S',
	    '\uA784': 'S',
	    '\u24C9': 'T',
	    '\uFF34': 'T',
	    '\u1E6A': 'T',
	    '\u0164': 'T',
	    '\u1E6C': 'T',
	    '\u021A': 'T',
	    '\u0162': 'T',
	    '\u1E70': 'T',
	    '\u1E6E': 'T',
	    '\u0166': 'T',
	    '\u01AC': 'T',
	    '\u01AE': 'T',
	    '\u023E': 'T',
	    '\uA786': 'T',
	    '\uA728': 'TZ',
	    '\u24CA': 'U',
	    '\uFF35': 'U',
	    '\u00D9': 'U',
	    '\u00DA': 'U',
	    '\u00DB': 'U',
	    '\u0168': 'U',
	    '\u1E78': 'U',
	    '\u016A': 'U',
	    '\u1E7A': 'U',
	    '\u016C': 'U',
	    '\u00DC': 'U',
	    '\u01DB': 'U',
	    '\u01D7': 'U',
	    '\u01D5': 'U',
	    '\u01D9': 'U',
	    '\u1EE6': 'U',
	    '\u016E': 'U',
	    '\u0170': 'U',
	    '\u01D3': 'U',
	    '\u0214': 'U',
	    '\u0216': 'U',
	    '\u01AF': 'U',
	    '\u1EEA': 'U',
	    '\u1EE8': 'U',
	    '\u1EEE': 'U',
	    '\u1EEC': 'U',
	    '\u1EF0': 'U',
	    '\u1EE4': 'U',
	    '\u1E72': 'U',
	    '\u0172': 'U',
	    '\u1E76': 'U',
	    '\u1E74': 'U',
	    '\u0244': 'U',
	    '\u24CB': 'V',
	    '\uFF36': 'V',
	    '\u1E7C': 'V',
	    '\u1E7E': 'V',
	    '\u01B2': 'V',
	    '\uA75E': 'V',
	    '\u0245': 'V',
	    '\uA760': 'VY',
	    '\u24CC': 'W',
	    '\uFF37': 'W',
	    '\u1E80': 'W',
	    '\u1E82': 'W',
	    '\u0174': 'W',
	    '\u1E86': 'W',
	    '\u1E84': 'W',
	    '\u1E88': 'W',
	    '\u2C72': 'W',
	    '\u24CD': 'X',
	    '\uFF38': 'X',
	    '\u1E8A': 'X',
	    '\u1E8C': 'X',
	    '\u24CE': 'Y',
	    '\uFF39': 'Y',
	    '\u1EF2': 'Y',
	    '\u00DD': 'Y',
	    '\u0176': 'Y',
	    '\u1EF8': 'Y',
	    '\u0232': 'Y',
	    '\u1E8E': 'Y',
	    '\u0178': 'Y',
	    '\u1EF6': 'Y',
	    '\u1EF4': 'Y',
	    '\u01B3': 'Y',
	    '\u024E': 'Y',
	    '\u1EFE': 'Y',
	    '\u24CF': 'Z',
	    '\uFF3A': 'Z',
	    '\u0179': 'Z',
	    '\u1E90': 'Z',
	    '\u017B': 'Z',
	    '\u017D': 'Z',
	    '\u1E92': 'Z',
	    '\u1E94': 'Z',
	    '\u01B5': 'Z',
	    '\u0224': 'Z',
	    '\u2C7F': 'Z',
	    '\u2C6B': 'Z',
	    '\uA762': 'Z',
	    '\u24D0': 'a',
	    '\uFF41': 'a',
	    '\u1E9A': 'a',
	    '\u00E0': 'a',
	    '\u00E1': 'a',
	    '\u00E2': 'a',
	    '\u1EA7': 'a',
	    '\u1EA5': 'a',
	    '\u1EAB': 'a',
	    '\u1EA9': 'a',
	    '\u00E3': 'a',
	    '\u0101': 'a',
	    '\u0103': 'a',
	    '\u1EB1': 'a',
	    '\u1EAF': 'a',
	    '\u1EB5': 'a',
	    '\u1EB3': 'a',
	    '\u0227': 'a',
	    '\u01E1': 'a',
	    '\u00E4': 'a',
	    '\u01DF': 'a',
	    '\u1EA3': 'a',
	    '\u00E5': 'a',
	    '\u01FB': 'a',
	    '\u01CE': 'a',
	    '\u0201': 'a',
	    '\u0203': 'a',
	    '\u1EA1': 'a',
	    '\u1EAD': 'a',
	    '\u1EB7': 'a',
	    '\u1E01': 'a',
	    '\u0105': 'a',
	    '\u2C65': 'a',
	    '\u0250': 'a',
	    '\uA733': 'aa',
	    '\u00E6': 'ae',
	    '\u01FD': 'ae',
	    '\u01E3': 'ae',
	    '\uA735': 'ao',
	    '\uA737': 'au',
	    '\uA739': 'av',
	    '\uA73B': 'av',
	    '\uA73D': 'ay',
	    '\u24D1': 'b',
	    '\uFF42': 'b',
	    '\u1E03': 'b',
	    '\u1E05': 'b',
	    '\u1E07': 'b',
	    '\u0180': 'b',
	    '\u0183': 'b',
	    '\u0253': 'b',
	    '\u24D2': 'c',
	    '\uFF43': 'c',
	    '\u0107': 'c',
	    '\u0109': 'c',
	    '\u010B': 'c',
	    '\u010D': 'c',
	    '\u00E7': 'c',
	    '\u1E09': 'c',
	    '\u0188': 'c',
	    '\u023C': 'c',
	    '\uA73F': 'c',
	    '\u2184': 'c',
	    '\u24D3': 'd',
	    '\uFF44': 'd',
	    '\u1E0B': 'd',
	    '\u010F': 'd',
	    '\u1E0D': 'd',
	    '\u1E11': 'd',
	    '\u1E13': 'd',
	    '\u1E0F': 'd',
	    '\u0111': 'd',
	    '\u018C': 'd',
	    '\u0256': 'd',
	    '\u0257': 'd',
	    '\uA77A': 'd',
	    '\u01F3': 'dz',
	    '\u01C6': 'dz',
	    '\u24D4': 'e',
	    '\uFF45': 'e',
	    '\u00E8': 'e',
	    '\u00E9': 'e',
	    '\u00EA': 'e',
	    '\u1EC1': 'e',
	    '\u1EBF': 'e',
	    '\u1EC5': 'e',
	    '\u1EC3': 'e',
	    '\u1EBD': 'e',
	    '\u0113': 'e',
	    '\u1E15': 'e',
	    '\u1E17': 'e',
	    '\u0115': 'e',
	    '\u0117': 'e',
	    '\u00EB': 'e',
	    '\u1EBB': 'e',
	    '\u011B': 'e',
	    '\u0205': 'e',
	    '\u0207': 'e',
	    '\u1EB9': 'e',
	    '\u1EC7': 'e',
	    '\u0229': 'e',
	    '\u1E1D': 'e',
	    '\u0119': 'e',
	    '\u1E19': 'e',
	    '\u1E1B': 'e',
	    '\u0247': 'e',
	    '\u025B': 'e',
	    '\u01DD': 'e',
	    '\u24D5': 'f',
	    '\uFF46': 'f',
	    '\u1E1F': 'f',
	    '\u0192': 'f',
	    '\uA77C': 'f',
	    '\u24D6': 'g',
	    '\uFF47': 'g',
	    '\u01F5': 'g',
	    '\u011D': 'g',
	    '\u1E21': 'g',
	    '\u011F': 'g',
	    '\u0121': 'g',
	    '\u01E7': 'g',
	    '\u0123': 'g',
	    '\u01E5': 'g',
	    '\u0260': 'g',
	    '\uA7A1': 'g',
	    '\u1D79': 'g',
	    '\uA77F': 'g',
	    '\u24D7': 'h',
	    '\uFF48': 'h',
	    '\u0125': 'h',
	    '\u1E23': 'h',
	    '\u1E27': 'h',
	    '\u021F': 'h',
	    '\u1E25': 'h',
	    '\u1E29': 'h',
	    '\u1E2B': 'h',
	    '\u1E96': 'h',
	    '\u0127': 'h',
	    '\u2C68': 'h',
	    '\u2C76': 'h',
	    '\u0265': 'h',
	    '\u0195': 'hv',
	    '\u24D8': 'i',
	    '\uFF49': 'i',
	    '\u00EC': 'i',
	    '\u00ED': 'i',
	    '\u00EE': 'i',
	    '\u0129': 'i',
	    '\u012B': 'i',
	    '\u012D': 'i',
	    '\u00EF': 'i',
	    '\u1E2F': 'i',
	    '\u1EC9': 'i',
	    '\u01D0': 'i',
	    '\u0209': 'i',
	    '\u020B': 'i',
	    '\u1ECB': 'i',
	    '\u012F': 'i',
	    '\u1E2D': 'i',
	    '\u0268': 'i',
	    '\u0131': 'i',
	    '\u24D9': 'j',
	    '\uFF4A': 'j',
	    '\u0135': 'j',
	    '\u01F0': 'j',
	    '\u0249': 'j',
	    '\u24DA': 'k',
	    '\uFF4B': 'k',
	    '\u1E31': 'k',
	    '\u01E9': 'k',
	    '\u1E33': 'k',
	    '\u0137': 'k',
	    '\u1E35': 'k',
	    '\u0199': 'k',
	    '\u2C6A': 'k',
	    '\uA741': 'k',
	    '\uA743': 'k',
	    '\uA745': 'k',
	    '\uA7A3': 'k',
	    '\u24DB': 'l',
	    '\uFF4C': 'l',
	    '\u0140': 'l',
	    '\u013A': 'l',
	    '\u013E': 'l',
	    '\u1E37': 'l',
	    '\u1E39': 'l',
	    '\u013C': 'l',
	    '\u1E3D': 'l',
	    '\u1E3B': 'l',
	    '\u017F': 'l',
	    '\u0142': 'l',
	    '\u019A': 'l',
	    '\u026B': 'l',
	    '\u2C61': 'l',
	    '\uA749': 'l',
	    '\uA781': 'l',
	    '\uA747': 'l',
	    '\u01C9': 'lj',
	    '\u24DC': 'm',
	    '\uFF4D': 'm',
	    '\u1E3F': 'm',
	    '\u1E41': 'm',
	    '\u1E43': 'm',
	    '\u0271': 'm',
	    '\u026F': 'm',
	    '\u24DD': 'n',
	    '\uFF4E': 'n',
	    '\u01F9': 'n',
	    '\u0144': 'n',
	    '\u00F1': 'n',
	    '\u1E45': 'n',
	    '\u0148': 'n',
	    '\u1E47': 'n',
	    '\u0146': 'n',
	    '\u1E4B': 'n',
	    '\u1E49': 'n',
	    '\u019E': 'n',
	    '\u0272': 'n',
	    '\u0149': 'n',
	    '\uA791': 'n',
	    '\uA7A5': 'n',
	    '\u01CC': 'nj',
	    '\u24DE': 'o',
	    '\uFF4F': 'o',
	    '\u00F2': 'o',
	    '\u00F3': 'o',
	    '\u00F4': 'o',
	    '\u1ED3': 'o',
	    '\u1ED1': 'o',
	    '\u1ED7': 'o',
	    '\u1ED5': 'o',
	    '\u00F5': 'o',
	    '\u1E4D': 'o',
	    '\u022D': 'o',
	    '\u1E4F': 'o',
	    '\u014D': 'o',
	    '\u1E51': 'o',
	    '\u1E53': 'o',
	    '\u014F': 'o',
	    '\u022F': 'o',
	    '\u0231': 'o',
	    '\u00F6': 'o',
	    '\u022B': 'o',
	    '\u1ECF': 'o',
	    '\u0151': 'o',
	    '\u01D2': 'o',
	    '\u020D': 'o',
	    '\u020F': 'o',
	    '\u01A1': 'o',
	    '\u1EDD': 'o',
	    '\u1EDB': 'o',
	    '\u1EE1': 'o',
	    '\u1EDF': 'o',
	    '\u1EE3': 'o',
	    '\u1ECD': 'o',
	    '\u1ED9': 'o',
	    '\u01EB': 'o',
	    '\u01ED': 'o',
	    '\u00F8': 'o',
	    '\u01FF': 'o',
	    '\u0254': 'o',
	    '\uA74B': 'o',
	    '\uA74D': 'o',
	    '\u0275': 'o',
	    '\u01A3': 'oi',
	    '\u0223': 'ou',
	    '\uA74F': 'oo',
	    '\u24DF': 'p',
	    '\uFF50': 'p',
	    '\u1E55': 'p',
	    '\u1E57': 'p',
	    '\u01A5': 'p',
	    '\u1D7D': 'p',
	    '\uA751': 'p',
	    '\uA753': 'p',
	    '\uA755': 'p',
	    '\u24E0': 'q',
	    '\uFF51': 'q',
	    '\u024B': 'q',
	    '\uA757': 'q',
	    '\uA759': 'q',
	    '\u24E1': 'r',
	    '\uFF52': 'r',
	    '\u0155': 'r',
	    '\u1E59': 'r',
	    '\u0159': 'r',
	    '\u0211': 'r',
	    '\u0213': 'r',
	    '\u1E5B': 'r',
	    '\u1E5D': 'r',
	    '\u0157': 'r',
	    '\u1E5F': 'r',
	    '\u024D': 'r',
	    '\u027D': 'r',
	    '\uA75B': 'r',
	    '\uA7A7': 'r',
	    '\uA783': 'r',
	    '\u24E2': 's',
	    '\uFF53': 's',
	    '\u00DF': 's',
	    '\u015B': 's',
	    '\u1E65': 's',
	    '\u015D': 's',
	    '\u1E61': 's',
	    '\u0161': 's',
	    '\u1E67': 's',
	    '\u1E63': 's',
	    '\u1E69': 's',
	    '\u0219': 's',
	    '\u015F': 's',
	    '\u023F': 's',
	    '\uA7A9': 's',
	    '\uA785': 's',
	    '\u1E9B': 's',
	    '\u24E3': 't',
	    '\uFF54': 't',
	    '\u1E6B': 't',
	    '\u1E97': 't',
	    '\u0165': 't',
	    '\u1E6D': 't',
	    '\u021B': 't',
	    '\u0163': 't',
	    '\u1E71': 't',
	    '\u1E6F': 't',
	    '\u0167': 't',
	    '\u01AD': 't',
	    '\u0288': 't',
	    '\u2C66': 't',
	    '\uA787': 't',
	    '\uA729': 'tz',
	    '\u24E4': 'u',
	    '\uFF55': 'u',
	    '\u00F9': 'u',
	    '\u00FA': 'u',
	    '\u00FB': 'u',
	    '\u0169': 'u',
	    '\u1E79': 'u',
	    '\u016B': 'u',
	    '\u1E7B': 'u',
	    '\u016D': 'u',
	    '\u00FC': 'u',
	    '\u01DC': 'u',
	    '\u01D8': 'u',
	    '\u01D6': 'u',
	    '\u01DA': 'u',
	    '\u1EE7': 'u',
	    '\u016F': 'u',
	    '\u0171': 'u',
	    '\u01D4': 'u',
	    '\u0215': 'u',
	    '\u0217': 'u',
	    '\u01B0': 'u',
	    '\u1EEB': 'u',
	    '\u1EE9': 'u',
	    '\u1EEF': 'u',
	    '\u1EED': 'u',
	    '\u1EF1': 'u',
	    '\u1EE5': 'u',
	    '\u1E73': 'u',
	    '\u0173': 'u',
	    '\u1E77': 'u',
	    '\u1E75': 'u',
	    '\u0289': 'u',
	    '\u24E5': 'v',
	    '\uFF56': 'v',
	    '\u1E7D': 'v',
	    '\u1E7F': 'v',
	    '\u028B': 'v',
	    '\uA75F': 'v',
	    '\u028C': 'v',
	    '\uA761': 'vy',
	    '\u24E6': 'w',
	    '\uFF57': 'w',
	    '\u1E81': 'w',
	    '\u1E83': 'w',
	    '\u0175': 'w',
	    '\u1E87': 'w',
	    '\u1E85': 'w',
	    '\u1E98': 'w',
	    '\u1E89': 'w',
	    '\u2C73': 'w',
	    '\u24E7': 'x',
	    '\uFF58': 'x',
	    '\u1E8B': 'x',
	    '\u1E8D': 'x',
	    '\u24E8': 'y',
	    '\uFF59': 'y',
	    '\u1EF3': 'y',
	    '\u00FD': 'y',
	    '\u0177': 'y',
	    '\u1EF9': 'y',
	    '\u0233': 'y',
	    '\u1E8F': 'y',
	    '\u00FF': 'y',
	    '\u1EF7': 'y',
	    '\u1E99': 'y',
	    '\u1EF5': 'y',
	    '\u01B4': 'y',
	    '\u024F': 'y',
	    '\u1EFF': 'y',
	    '\u24E9': 'z',
	    '\uFF5A': 'z',
	    '\u017A': 'z',
	    '\u1E91': 'z',
	    '\u017C': 'z',
	    '\u017E': 'z',
	    '\u1E93': 'z',
	    '\u1E95': 'z',
	    '\u01B6': 'z',
	    '\u0225': 'z',
	    '\u0240': 'z',
	    '\u2C6C': 'z',
	    '\uA763': 'z',
	    '\u0386': '\u0391',
	    '\u0388': '\u0395',
	    '\u0389': '\u0397',
	    '\u038A': '\u0399',
	    '\u03AA': '\u0399',
	    '\u038C': '\u039F',
	    '\u038E': '\u03A5',
	    '\u03AB': '\u03A5',
	    '\u038F': '\u03A9',
	    '\u03AC': '\u03B1',
	    '\u03AD': '\u03B5',
	    '\u03AE': '\u03B7',
	    '\u03AF': '\u03B9',
	    '\u03CA': '\u03B9',
	    '\u0390': '\u03B9',
	    '\u03CC': '\u03BF',
	    '\u03CD': '\u03C5',
	    '\u03CB': '\u03C5',
	    '\u03B0': '\u03C5',
	    '\u03C9': '\u03C9',
	    '\u03C2': '\u03C3'
	  };

	  return diacritics;
	});

	S2.define('select2/data/base',[
	  '../utils'
	], function (Utils) {
	  function BaseAdapter ($element, options) {
	    BaseAdapter.__super__.constructor.call(this);
	  }

	  Utils.Extend(BaseAdapter, Utils.Observable);

	  BaseAdapter.prototype.current = function (callback) {
	    throw new Error('The `current` method must be defined in child classes.');
	  };

	  BaseAdapter.prototype.query = function (params, callback) {
	    throw new Error('The `query` method must be defined in child classes.');
	  };

	  BaseAdapter.prototype.bind = function (container, $container) {
	    // Can be implemented in subclasses
	  };

	  BaseAdapter.prototype.destroy = function () {
	    // Can be implemented in subclasses
	  };

	  BaseAdapter.prototype.generateResultId = function (container, data) {
	    var id = container.id + '-result-';

	    id += Utils.generateChars(4);

	    if (data.id != null) {
	      id += '-' + data.id.toString();
	    } else {
	      id += '-' + Utils.generateChars(4);
	    }
	    return id;
	  };

	  return BaseAdapter;
	});

	S2.define('select2/data/select',[
	  './base',
	  '../utils',
	  'jquery'
	], function (BaseAdapter, Utils, $) {
	  function SelectAdapter ($element, options) {
	    this.$element = $element;
	    this.options = options;

	    SelectAdapter.__super__.constructor.call(this);
	  }

	  Utils.Extend(SelectAdapter, BaseAdapter);

	  SelectAdapter.prototype.current = function (callback) {
	    var data = [];
	    var self = this;

	    this.$element.find(':selected').each(function () {
	      var $option = $(this);

	      var option = self.item($option);

	      data.push(option);
	    });

	    callback(data);
	  };

	  SelectAdapter.prototype.select = function (data) {
	    var self = this;

	    data.selected = true;

	    // If data.element is a DOM node, use it instead
	    if ($(data.element).is('option')) {
	      data.element.selected = true;

	      this.$element.trigger('change');

	      return;
	    }

	    if (this.$element.prop('multiple')) {
	      this.current(function (currentData) {
	        var val = [];

	        data = [data];
	        data.push.apply(data, currentData);

	        for (var d = 0; d < data.length; d++) {
	          var id = data[d].id;

	          if ($.inArray(id, val) === -1) {
	            val.push(id);
	          }
	        }

	        self.$element.val(val);
	        self.$element.trigger('change');
	      });
	    } else {
	      var val = data.id;

	      this.$element.val(val);
	      this.$element.trigger('change');
	    }
	  };

	  SelectAdapter.prototype.unselect = function (data) {
	    var self = this;

	    if (!this.$element.prop('multiple')) {
	      return;
	    }

	    data.selected = false;

	    if ($(data.element).is('option')) {
	      data.element.selected = false;

	      this.$element.trigger('change');

	      return;
	    }

	    this.current(function (currentData) {
	      var val = [];

	      for (var d = 0; d < currentData.length; d++) {
	        var id = currentData[d].id;

	        if (id !== data.id && $.inArray(id, val) === -1) {
	          val.push(id);
	        }
	      }

	      self.$element.val(val);

	      self.$element.trigger('change');
	    });
	  };

	  SelectAdapter.prototype.bind = function (container, $container) {
	    var self = this;

	    this.container = container;

	    container.on('select', function (params) {
	      self.select(params.data);
	    });

	    container.on('unselect', function (params) {
	      self.unselect(params.data);
	    });
	  };

	  SelectAdapter.prototype.destroy = function () {
	    // Remove anything added to child elements
	    this.$element.find('*').each(function () {
	      // Remove any custom data set by Select2
	      $.removeData(this, 'data');
	    });
	  };

	  SelectAdapter.prototype.query = function (params, callback) {
	    var data = [];
	    var self = this;

	    var $options = this.$element.children();

	    $options.each(function () {
	      var $option = $(this);

	      if (!$option.is('option') && !$option.is('optgroup')) {
	        return;
	      }

	      var option = self.item($option);

	      var matches = self.matches(params, option);

	      if (matches !== null) {
	        data.push(matches);
	      }
	    });

	    callback({
	      results: data
	    });
	  };

	  SelectAdapter.prototype.addOptions = function ($options) {
	    Utils.appendMany(this.$element, $options);
	  };

	  SelectAdapter.prototype.option = function (data) {
	    var option;

	    if (data.children) {
	      option = document.createElement('optgroup');
	      option.label = data.text;
	    } else {
	      option = document.createElement('option');

	      if (option.textContent !== undefined) {
	        option.textContent = data.text;
	      } else {
	        option.innerText = data.text;
	      }
	    }

	    if (data.id) {
	      option.value = data.id;
	    }

	    if (data.disabled) {
	      option.disabled = true;
	    }

	    if (data.selected) {
	      option.selected = true;
	    }

	    if (data.title) {
	      option.title = data.title;
	    }

	    var $option = $(option);

	    var normalizedData = this._normalizeItem(data);
	    normalizedData.element = option;

	    // Override the option's data with the combined data
	    $.data(option, 'data', normalizedData);

	    return $option;
	  };

	  SelectAdapter.prototype.item = function ($option) {
	    var data = {};

	    data = $.data($option[0], 'data');

	    if (data != null) {
	      return data;
	    }

	    if ($option.is('option')) {
	      data = {
	        id: $option.val(),
	        text: $option.text(),
	        disabled: $option.prop('disabled'),
	        selected: $option.prop('selected'),
	        title: $option.prop('title')
	      };
	    } else if ($option.is('optgroup')) {
	      data = {
	        text: $option.prop('label'),
	        children: [],
	        title: $option.prop('title')
	      };

	      var $children = $option.children('option');
	      var children = [];

	      for (var c = 0; c < $children.length; c++) {
	        var $child = $($children[c]);

	        var child = this.item($child);

	        children.push(child);
	      }

	      data.children = children;
	    }

	    data = this._normalizeItem(data);
	    data.element = $option[0];

	    $.data($option[0], 'data', data);

	    return data;
	  };

	  SelectAdapter.prototype._normalizeItem = function (item) {
	    if (!$.isPlainObject(item)) {
	      item = {
	        id: item,
	        text: item
	      };
	    }

	    item = $.extend({}, {
	      text: ''
	    }, item);

	    var defaults = {
	      selected: false,
	      disabled: false
	    };

	    if (item.id != null) {
	      item.id = item.id.toString();
	    }

	    if (item.text != null) {
	      item.text = item.text.toString();
	    }

	    if (item._resultId == null && item.id && this.container != null) {
	      item._resultId = this.generateResultId(this.container, item);
	    }

	    return $.extend({}, defaults, item);
	  };

	  SelectAdapter.prototype.matches = function (params, data) {
	    var matcher = this.options.get('matcher');

	    return matcher(params, data);
	  };

	  return SelectAdapter;
	});

	S2.define('select2/data/array',[
	  './select',
	  '../utils',
	  'jquery'
	], function (SelectAdapter, Utils, $) {
	  function ArrayAdapter ($element, options) {
	    var data = options.get('data') || [];

	    ArrayAdapter.__super__.constructor.call(this, $element, options);

	    this.addOptions(this.convertToOptions(data));
	  }

	  Utils.Extend(ArrayAdapter, SelectAdapter);

	  ArrayAdapter.prototype.select = function (data) {
	    var $option = this.$element.find('option').filter(function (i, elm) {
	      return elm.value == data.id.toString();
	    });

	    if ($option.length === 0) {
	      $option = this.option(data);

	      this.addOptions($option);
	    }

	    ArrayAdapter.__super__.select.call(this, data);
	  };

	  ArrayAdapter.prototype.convertToOptions = function (data) {
	    var self = this;

	    var $existing = this.$element.find('option');
	    var existingIds = $existing.map(function () {
	      return self.item($(this)).id;
	    }).get();

	    var $options = [];

	    // Filter out all items except for the one passed in the argument
	    function onlyItem (item) {
	      return function () {
	        return $(this).val() == item.id;
	      };
	    }

	    for (var d = 0; d < data.length; d++) {
	      var item = this._normalizeItem(data[d]);

	      // Skip items which were pre-loaded, only merge the data
	      if ($.inArray(item.id, existingIds) >= 0) {
	        var $existingOption = $existing.filter(onlyItem(item));

	        var existingData = this.item($existingOption);
	        var newData = $.extend(true, {}, item, existingData);

	        var $newOption = this.option(newData);

	        $existingOption.replaceWith($newOption);

	        continue;
	      }

	      var $option = this.option(item);

	      if (item.children) {
	        var $children = this.convertToOptions(item.children);

	        Utils.appendMany($option, $children);
	      }

	      $options.push($option);
	    }

	    return $options;
	  };

	  return ArrayAdapter;
	});

	S2.define('select2/data/ajax',[
	  './array',
	  '../utils',
	  'jquery'
	], function (ArrayAdapter, Utils, $) {
	  function AjaxAdapter ($element, options) {
	    this.ajaxOptions = this._applyDefaults(options.get('ajax'));

	    if (this.ajaxOptions.processResults != null) {
	      this.processResults = this.ajaxOptions.processResults;
	    }

	    AjaxAdapter.__super__.constructor.call(this, $element, options);
	  }

	  Utils.Extend(AjaxAdapter, ArrayAdapter);

	  AjaxAdapter.prototype._applyDefaults = function (options) {
	    var defaults = {
	      data: function (params) {
	        return $.extend({}, params, {
	          q: params.term
	        });
	      },
	      transport: function (params, success, failure) {
	        var $request = $.ajax(params);

	        $request.then(success);
	        $request.fail(failure);

	        return $request;
	      }
	    };

	    return $.extend({}, defaults, options, true);
	  };

	  AjaxAdapter.prototype.processResults = function (results) {
	    return results;
	  };

	  AjaxAdapter.prototype.query = function (params, callback) {
	    var matches = [];
	    var self = this;

	    if (this._request != null) {
	      // JSONP requests cannot always be aborted
	      if ($.isFunction(this._request.abort)) {
	        this._request.abort();
	      }

	      this._request = null;
	    }

	    var options = $.extend({
	      type: 'GET'
	    }, this.ajaxOptions);

	    if (typeof options.url === 'function') {
	      options.url = options.url.call(this.$element, params);
	    }

	    if (typeof options.data === 'function') {
	      options.data = options.data.call(this.$element, params);
	    }

	    function request () {
	      var $request = options.transport(options, function (data) {
	        var results = self.processResults(data, params);

	        if (self.options.get('debug') && window.console && console.error) {
	          // Check to make sure that the response included a `results` key.
	          if (!results || !results.results || !$.isArray(results.results)) {
	            console.error(
	              'Select2: The AJAX results did not return an array in the ' +
	              '`results` key of the response.'
	            );
	          }
	        }

	        callback(results);
	      }, function () {
	        // Attempt to detect if a request was aborted
	        // Only works if the transport exposes a status property
	        if ($request.status && $request.status === '0') {
	          return;
	        }

	        self.trigger('results:message', {
	          message: 'errorLoading'
	        });
	      });

	      self._request = $request;
	    }

	    if (this.ajaxOptions.delay && params.term != null) {
	      if (this._queryTimeout) {
	        window.clearTimeout(this._queryTimeout);
	      }

	      this._queryTimeout = window.setTimeout(request, this.ajaxOptions.delay);
	    } else {
	      request();
	    }
	  };

	  return AjaxAdapter;
	});

	S2.define('select2/data/tags',[
	  'jquery'
	], function ($) {
	  function Tags (decorated, $element, options) {
	    var tags = options.get('tags');

	    var createTag = options.get('createTag');

	    if (createTag !== undefined) {
	      this.createTag = createTag;
	    }

	    var insertTag = options.get('insertTag');

	    if (insertTag !== undefined) {
	        this.insertTag = insertTag;
	    }

	    decorated.call(this, $element, options);

	    if ($.isArray(tags)) {
	      for (var t = 0; t < tags.length; t++) {
	        var tag = tags[t];
	        var item = this._normalizeItem(tag);

	        var $option = this.option(item);

	        this.$element.append($option);
	      }
	    }
	  }

	  Tags.prototype.query = function (decorated, params, callback) {
	    var self = this;

	    this._removeOldTags();

	    if (params.term == null || params.page != null) {
	      decorated.call(this, params, callback);
	      return;
	    }

	    function wrapper (obj, child) {
	      var data = obj.results;

	      for (var i = 0; i < data.length; i++) {
	        var option = data[i];

	        var checkChildren = (
	          option.children != null &&
	          !wrapper({
	            results: option.children
	          }, true)
	        );

	        var checkText = option.text === params.term;

	        if (checkText || checkChildren) {
	          if (child) {
	            return false;
	          }

	          obj.data = data;
	          callback(obj);

	          return;
	        }
	      }

	      if (child) {
	        return true;
	      }

	      var tag = self.createTag(params);

	      if (tag != null) {
	        var $option = self.option(tag);
	        $option.attr('data-select2-tag', true);

	        self.addOptions([$option]);

	        self.insertTag(data, tag);
	      }

	      obj.results = data;

	      callback(obj);
	    }

	    decorated.call(this, params, wrapper);
	  };

	  Tags.prototype.createTag = function (decorated, params) {
	    var term = $.trim(params.term);

	    if (term === '') {
	      return null;
	    }

	    return {
	      id: term,
	      text: term
	    };
	  };

	  Tags.prototype.insertTag = function (_, data, tag) {
	    data.unshift(tag);
	  };

	  Tags.prototype._removeOldTags = function (_) {
	    var tag = this._lastTag;

	    var $options = this.$element.find('option[data-select2-tag]');

	    $options.each(function () {
	      if (this.selected) {
	        return;
	      }

	      $(this).remove();
	    });
	  };

	  return Tags;
	});

	S2.define('select2/data/tokenizer',[
	  'jquery'
	], function ($) {
	  function Tokenizer (decorated, $element, options) {
	    var tokenizer = options.get('tokenizer');

	    if (tokenizer !== undefined) {
	      this.tokenizer = tokenizer;
	    }

	    decorated.call(this, $element, options);
	  }

	  Tokenizer.prototype.bind = function (decorated, container, $container) {
	    decorated.call(this, container, $container);

	    this.$search =  container.dropdown.$search || container.selection.$search ||
	      $container.find('.select2-search__field');
	  };

	  Tokenizer.prototype.query = function (decorated, params, callback) {
	    var self = this;

	    function createAndSelect (data) {
	      // Normalize the data object so we can use it for checks
	      var item = self._normalizeItem(data);

	      // Check if the data object already exists as a tag
	      // Select it if it doesn't
	      var $existingOptions = self.$element.find('option').filter(function () {
	        return $(this).val() === item.id;
	      });

	      // If an existing option wasn't found for it, create the option
	      if (!$existingOptions.length) {
	        var $option = self.option(item);
	        $option.attr('data-select2-tag', true);

	        self._removeOldTags();
	        self.addOptions([$option]);
	      }

	      // Select the item, now that we know there is an option for it
	      select(item);
	    }

	    function select (data) {
	      self.trigger('select', {
	        data: data
	      });
	    }

	    params.term = params.term || '';

	    var tokenData = this.tokenizer(params, this.options, createAndSelect);

	    if (tokenData.term !== params.term) {
	      // Replace the search term if we have the search box
	      if (this.$search.length) {
	        this.$search.val(tokenData.term);
	        this.$search.focus();
	      }

	      params.term = tokenData.term;
	    }

	    decorated.call(this, params, callback);
	  };

	  Tokenizer.prototype.tokenizer = function (_, params, options, callback) {
	    var separators = options.get('tokenSeparators') || [];
	    var term = params.term;
	    var i = 0;

	    var createTag = this.createTag || function (params) {
	      return {
	        id: params.term,
	        text: params.term
	      };
	    };

	    while (i < term.length) {
	      var termChar = term[i];

	      if ($.inArray(termChar, separators) === -1) {
	        i++;

	        continue;
	      }

	      var part = term.substr(0, i);
	      var partParams = $.extend({}, params, {
	        term: part
	      });

	      var data = createTag(partParams);

	      if (data == null) {
	        i++;
	        continue;
	      }

	      callback(data);

	      // Reset the term to not include the tokenized portion
	      term = term.substr(i + 1) || '';
	      i = 0;
	    }

	    return {
	      term: term
	    };
	  };

	  return Tokenizer;
	});

	S2.define('select2/data/minimumInputLength',[

	], function () {
	  function MinimumInputLength (decorated, $e, options) {
	    this.minimumInputLength = options.get('minimumInputLength');

	    decorated.call(this, $e, options);
	  }

	  MinimumInputLength.prototype.query = function (decorated, params, callback) {
	    params.term = params.term || '';

	    if (params.term.length < this.minimumInputLength) {
	      this.trigger('results:message', {
	        message: 'inputTooShort',
	        args: {
	          minimum: this.minimumInputLength,
	          input: params.term,
	          params: params
	        }
	      });

	      return;
	    }

	    decorated.call(this, params, callback);
	  };

	  return MinimumInputLength;
	});

	S2.define('select2/data/maximumInputLength',[

	], function () {
	  function MaximumInputLength (decorated, $e, options) {
	    this.maximumInputLength = options.get('maximumInputLength');

	    decorated.call(this, $e, options);
	  }

	  MaximumInputLength.prototype.query = function (decorated, params, callback) {
	    params.term = params.term || '';

	    if (this.maximumInputLength > 0 &&
	        params.term.length > this.maximumInputLength) {
	      this.trigger('results:message', {
	        message: 'inputTooLong',
	        args: {
	          maximum: this.maximumInputLength,
	          input: params.term,
	          params: params
	        }
	      });

	      return;
	    }

	    decorated.call(this, params, callback);
	  };

	  return MaximumInputLength;
	});

	S2.define('select2/data/maximumSelectionLength',[

	], function (){
	  function MaximumSelectionLength (decorated, $e, options) {
	    this.maximumSelectionLength = options.get('maximumSelectionLength');

	    decorated.call(this, $e, options);
	  }

	  MaximumSelectionLength.prototype.query =
	    function (decorated, params, callback) {
	      var self = this;

	      this.current(function (currentData) {
	        var count = currentData != null ? currentData.length : 0;
	        if (self.maximumSelectionLength > 0 &&
	          count >= self.maximumSelectionLength) {
	          self.trigger('results:message', {
	            message: 'maximumSelected',
	            args: {
	              maximum: self.maximumSelectionLength
	            }
	          });
	          return;
	        }
	        decorated.call(self, params, callback);
	      });
	  };

	  return MaximumSelectionLength;
	});

	S2.define('select2/dropdown',[
	  'jquery',
	  './utils'
	], function ($, Utils) {
	  function Dropdown ($element, options) {
	    this.$element = $element;
	    this.options = options;

	    Dropdown.__super__.constructor.call(this);
	  }

	  Utils.Extend(Dropdown, Utils.Observable);

	  Dropdown.prototype.render = function () {
	    var $dropdown = $(
	      '<span class="select2-dropdown">' +
	        '<span class="select2-results"></span>' +
	      '</span>'
	    );

	    $dropdown.attr('dir', this.options.get('dir'));

	    this.$dropdown = $dropdown;

	    return $dropdown;
	  };

	  Dropdown.prototype.bind = function () {
	    // Should be implemented in subclasses
	  };

	  Dropdown.prototype.position = function ($dropdown, $container) {
	    // Should be implmented in subclasses
	  };

	  Dropdown.prototype.destroy = function () {
	    // Remove the dropdown from the DOM
	    this.$dropdown.remove();
	  };

	  return Dropdown;
	});

	S2.define('select2/dropdown/search',[
	  'jquery',
	  '../utils'
	], function ($, Utils) {
	  function Search () { }

	  Search.prototype.render = function (decorated) {
	    var $rendered = decorated.call(this);

	    var $search = $(
	      '<span class="select2-search select2-search--dropdown">' +
	        '<input class="select2-search__field" type="search" tabindex="-1"' +
	        ' autocomplete="off" autocorrect="off" autocapitalize="off"' +
	        ' spellcheck="false" role="textbox" />' +
	      '</span>'
	    );

	    this.$searchContainer = $search;
	    this.$search = $search.find('input');

	    $rendered.prepend($search);

	    return $rendered;
	  };

	  Search.prototype.bind = function (decorated, container, $container) {
	    var self = this;

	    decorated.call(this, container, $container);

	    this.$search.on('keydown', function (evt) {
	      self.trigger('keypress', evt);

	      self._keyUpPrevented = evt.isDefaultPrevented();
	    });

	    // Workaround for browsers which do not support the `input` event
	    // This will prevent double-triggering of events for browsers which support
	    // both the `keyup` and `input` events.
	    this.$search.on('input', function (evt) {
	      // Unbind the duplicated `keyup` event
	      $(this).off('keyup');
	    });

	    this.$search.on('keyup input', function (evt) {
	      self.handleSearch(evt);
	    });

	    container.on('open', function () {
	      self.$search.attr('tabindex', 0);

	      self.$search.focus();

	      window.setTimeout(function () {
	        self.$search.focus();
	      }, 0);
	    });

	    container.on('close', function () {
	      self.$search.attr('tabindex', -1);

	      self.$search.val('');
	    });

	    container.on('focus', function () {
	      if (container.isOpen()) {
	        self.$search.focus();
	      }
	    });

	    container.on('results:all', function (params) {
	      if (params.query.term == null || params.query.term === '') {
	        var showSearch = self.showSearch(params);

	        if (showSearch) {
	          self.$searchContainer.removeClass('select2-search--hide');
	        } else {
	          self.$searchContainer.addClass('select2-search--hide');
	        }
	      }
	    });
	  };

	  Search.prototype.handleSearch = function (evt) {
	    if (!this._keyUpPrevented) {
	      var input = this.$search.val();

	      this.trigger('query', {
	        term: input
	      });
	    }

	    this._keyUpPrevented = false;
	  };

	  Search.prototype.showSearch = function (_, params) {
	    return true;
	  };

	  return Search;
	});

	S2.define('select2/dropdown/hidePlaceholder',[

	], function () {
	  function HidePlaceholder (decorated, $element, options, dataAdapter) {
	    this.placeholder = this.normalizePlaceholder(options.get('placeholder'));

	    decorated.call(this, $element, options, dataAdapter);
	  }

	  HidePlaceholder.prototype.append = function (decorated, data) {
	    data.results = this.removePlaceholder(data.results);

	    decorated.call(this, data);
	  };

	  HidePlaceholder.prototype.normalizePlaceholder = function (_, placeholder) {
	    if (typeof placeholder === 'string') {
	      placeholder = {
	        id: '',
	        text: placeholder
	      };
	    }

	    return placeholder;
	  };

	  HidePlaceholder.prototype.removePlaceholder = function (_, data) {
	    var modifiedData = data.slice(0);

	    for (var d = data.length - 1; d >= 0; d--) {
	      var item = data[d];

	      if (this.placeholder.id === item.id) {
	        modifiedData.splice(d, 1);
	      }
	    }

	    return modifiedData;
	  };

	  return HidePlaceholder;
	});

	S2.define('select2/dropdown/infiniteScroll',[
	  'jquery'
	], function ($) {
	  function InfiniteScroll (decorated, $element, options, dataAdapter) {
	    this.lastParams = {};

	    decorated.call(this, $element, options, dataAdapter);

	    this.$loadingMore = this.createLoadingMore();
	    this.loading = false;
	  }

	  InfiniteScroll.prototype.append = function (decorated, data) {
	    this.$loadingMore.remove();
	    this.loading = false;

	    decorated.call(this, data);

	    if (this.showLoadingMore(data)) {
	      this.$results.append(this.$loadingMore);
	    }
	  };

	  InfiniteScroll.prototype.bind = function (decorated, container, $container) {
	    var self = this;

	    decorated.call(this, container, $container);

	    container.on('query', function (params) {
	      self.lastParams = params;
	      self.loading = true;
	    });

	    container.on('query:append', function (params) {
	      self.lastParams = params;
	      self.loading = true;
	    });

	    this.$results.on('scroll', function () {
	      var isLoadMoreVisible = $.contains(
	        document.documentElement,
	        self.$loadingMore[0]
	      );

	      if (self.loading || !isLoadMoreVisible) {
	        return;
	      }

	      var currentOffset = self.$results.offset().top +
	        self.$results.outerHeight(false);
	      var loadingMoreOffset = self.$loadingMore.offset().top +
	        self.$loadingMore.outerHeight(false);

	      if (currentOffset + 50 >= loadingMoreOffset) {
	        self.loadMore();
	      }
	    });
	  };

	  InfiniteScroll.prototype.loadMore = function () {
	    this.loading = true;

	    var params = $.extend({}, {page: 1}, this.lastParams);

	    params.page++;

	    this.trigger('query:append', params);
	  };

	  InfiniteScroll.prototype.showLoadingMore = function (_, data) {
	    return data.pagination && data.pagination.more;
	  };

	  InfiniteScroll.prototype.createLoadingMore = function () {
	    var $option = $(
	      '<li ' +
	      'class="select2-results__option select2-results__option--load-more"' +
	      'role="treeitem" aria-disabled="true"></li>'
	    );

	    var message = this.options.get('translations').get('loadingMore');

	    $option.html(message(this.lastParams));

	    return $option;
	  };

	  return InfiniteScroll;
	});

	S2.define('select2/dropdown/attachBody',[
	  'jquery',
	  '../utils'
	], function ($, Utils) {
	  function AttachBody (decorated, $element, options) {
	    this.$dropdownParent = options.get('dropdownParent') || $(document.body);

	    decorated.call(this, $element, options);
	  }

	  AttachBody.prototype.bind = function (decorated, container, $container) {
	    var self = this;

	    var setupResultsEvents = false;

	    decorated.call(this, container, $container);

	    container.on('open', function () {
	      self._showDropdown();
	      self._attachPositioningHandler(container);

	      if (!setupResultsEvents) {
	        setupResultsEvents = true;

	        container.on('results:all', function () {
	          self._positionDropdown();
	          self._resizeDropdown();
	        });

	        container.on('results:append', function () {
	          self._positionDropdown();
	          self._resizeDropdown();
	        });
	      }
	    });

	    container.on('close', function () {
	      self._hideDropdown();
	      self._detachPositioningHandler(container);
	    });

	    this.$dropdownContainer.on('mousedown', function (evt) {
	      evt.stopPropagation();
	    });
	  };

	  AttachBody.prototype.destroy = function (decorated) {
	    decorated.call(this);

	    this.$dropdownContainer.remove();
	  };

	  AttachBody.prototype.position = function (decorated, $dropdown, $container) {
	    // Clone all of the container classes
	    $dropdown.attr('class', $container.attr('class'));

	    $dropdown.removeClass('select2');
	    $dropdown.addClass('select2-container--open');

	    $dropdown.css({
	      position: 'absolute',
	      top: -999999
	    });

	    this.$container = $container;
	  };

	  AttachBody.prototype.render = function (decorated) {
	    var $container = $('<span></span>');

	    var $dropdown = decorated.call(this);
	    $container.append($dropdown);

	    this.$dropdownContainer = $container;

	    return $container;
	  };

	  AttachBody.prototype._hideDropdown = function (decorated) {
	    this.$dropdownContainer.detach();
	  };

	  AttachBody.prototype._attachPositioningHandler =
	      function (decorated, container) {
	    var self = this;

	    var scrollEvent = 'scroll.select2.' + container.id;
	    var resizeEvent = 'resize.select2.' + container.id;
	    var orientationEvent = 'orientationchange.select2.' + container.id;

	    var $watchers = this.$container.parents().filter(Utils.hasScroll);
	    $watchers.each(function () {
	      $(this).data('select2-scroll-position', {
	        x: $(this).scrollLeft(),
	        y: $(this).scrollTop()
	      });
	    });

	    $watchers.on(scrollEvent, function (ev) {
	      var position = $(this).data('select2-scroll-position');
	      $(this).scrollTop(position.y);
	    });

	    $(window).on(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent,
	      function (e) {
	      self._positionDropdown();
	      self._resizeDropdown();
	    });
	  };

	  AttachBody.prototype._detachPositioningHandler =
	      function (decorated, container) {
	    var scrollEvent = 'scroll.select2.' + container.id;
	    var resizeEvent = 'resize.select2.' + container.id;
	    var orientationEvent = 'orientationchange.select2.' + container.id;

	    var $watchers = this.$container.parents().filter(Utils.hasScroll);
	    $watchers.off(scrollEvent);

	    $(window).off(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent);
	  };

	  AttachBody.prototype._positionDropdown = function () {
	    var $window = $(window);

	    var isCurrentlyAbove = this.$dropdown.hasClass('select2-dropdown--above');
	    var isCurrentlyBelow = this.$dropdown.hasClass('select2-dropdown--below');

	    var newDirection = null;

	    var offset = this.$container.offset();

	    offset.bottom = offset.top + this.$container.outerHeight(false);

	    var container = {
	      height: this.$container.outerHeight(false)
	    };

	    container.top = offset.top;
	    container.bottom = offset.top + container.height;

	    var dropdown = {
	      height: this.$dropdown.outerHeight(false)
	    };

	    var viewport = {
	      top: $window.scrollTop(),
	      bottom: $window.scrollTop() + $window.height()
	    };

	    var enoughRoomAbove = viewport.top < (offset.top - dropdown.height);
	    var enoughRoomBelow = viewport.bottom > (offset.bottom + dropdown.height);

	    var css = {
	      left: offset.left,
	      top: container.bottom
	    };

	    // Determine what the parent element is to use for calciulating the offset
	    var $offsetParent = this.$dropdownParent;

	    // For statically positoned elements, we need to get the element
	    // that is determining the offset
	    if ($offsetParent.css('position') === 'static') {
	      $offsetParent = $offsetParent.offsetParent();
	    }

	    var parentOffset = $offsetParent.offset();

	    css.top -= parentOffset.top;
	    css.left -= parentOffset.left;

	    if (!isCurrentlyAbove && !isCurrentlyBelow) {
	      newDirection = 'below';
	    }

	    if (!enoughRoomBelow && enoughRoomAbove && !isCurrentlyAbove) {
	      newDirection = 'above';
	    } else if (!enoughRoomAbove && enoughRoomBelow && isCurrentlyAbove) {
	      newDirection = 'below';
	    }

	    if (newDirection == 'above' ||
	      (isCurrentlyAbove && newDirection !== 'below')) {
	      css.top = container.top - parentOffset.top - dropdown.height;
	    }

	    if (newDirection != null) {
	      this.$dropdown
	        .removeClass('select2-dropdown--below select2-dropdown--above')
	        .addClass('select2-dropdown--' + newDirection);
	      this.$container
	        .removeClass('select2-container--below select2-container--above')
	        .addClass('select2-container--' + newDirection);
	    }

	    this.$dropdownContainer.css(css);
	  };

	  AttachBody.prototype._resizeDropdown = function () {
	    var css = {
	      width: this.$container.outerWidth(false) + 'px'
	    };

	    if (this.options.get('dropdownAutoWidth')) {
	      css.minWidth = css.width;
	      css.position = 'relative';
	      css.width = 'auto';
	    }

	    this.$dropdown.css(css);
	  };

	  AttachBody.prototype._showDropdown = function (decorated) {
	    this.$dropdownContainer.appendTo(this.$dropdownParent);

	    this._positionDropdown();
	    this._resizeDropdown();
	  };

	  return AttachBody;
	});

	S2.define('select2/dropdown/minimumResultsForSearch',[

	], function () {
	  function countResults (data) {
	    var count = 0;

	    for (var d = 0; d < data.length; d++) {
	      var item = data[d];

	      if (item.children) {
	        count += countResults(item.children);
	      } else {
	        count++;
	      }
	    }

	    return count;
	  }

	  function MinimumResultsForSearch (decorated, $element, options, dataAdapter) {
	    this.minimumResultsForSearch = options.get('minimumResultsForSearch');

	    if (this.minimumResultsForSearch < 0) {
	      this.minimumResultsForSearch = Infinity;
	    }

	    decorated.call(this, $element, options, dataAdapter);
	  }

	  MinimumResultsForSearch.prototype.showSearch = function (decorated, params) {
	    if (countResults(params.data.results) < this.minimumResultsForSearch) {
	      return false;
	    }

	    return decorated.call(this, params);
	  };

	  return MinimumResultsForSearch;
	});

	S2.define('select2/dropdown/selectOnClose',[

	], function () {
	  function SelectOnClose () { }

	  SelectOnClose.prototype.bind = function (decorated, container, $container) {
	    var self = this;

	    decorated.call(this, container, $container);

	    container.on('close', function (params) {
	      self._handleSelectOnClose(params);
	    });
	  };

	  SelectOnClose.prototype._handleSelectOnClose = function (_, params) {
	    if (params && params.originalSelect2Event != null) {
	      var event = params.originalSelect2Event;

	      // Don't select an item if the close event was triggered from a select or
	      // unselect event
	      if (event._type === 'select' || event._type === 'unselect') {
	        return;
	      }
	    }

	    var $highlightedResults = this.getHighlightedResults();

	    // Only select highlighted results
	    if ($highlightedResults.length < 1) {
	      return;
	    }

	    var data = $highlightedResults.data('data');

	    // Don't re-select already selected resulte
	    if (
	      (data.element != null && data.element.selected) ||
	      (data.element == null && data.selected)
	    ) {
	      return;
	    }

	    this.trigger('select', {
	        data: data
	    });
	  };

	  return SelectOnClose;
	});

	S2.define('select2/dropdown/closeOnSelect',[

	], function () {
	  function CloseOnSelect () { }

	  CloseOnSelect.prototype.bind = function (decorated, container, $container) {
	    var self = this;

	    decorated.call(this, container, $container);

	    container.on('select', function (evt) {
	      self._selectTriggered(evt);
	    });

	    container.on('unselect', function (evt) {
	      self._selectTriggered(evt);
	    });
	  };

	  CloseOnSelect.prototype._selectTriggered = function (_, evt) {
	    var originalEvent = evt.originalEvent;

	    // Don't close if the control key is being held
	    if (originalEvent && originalEvent.ctrlKey) {
	      return;
	    }

	    this.trigger('close', {
	      originalEvent: originalEvent,
	      originalSelect2Event: evt
	    });
	  };

	  return CloseOnSelect;
	});

	S2.define('select2/i18n/en',[],function () {
	  // English
	  return {
	    errorLoading: function () {
	      return 'The results could not be loaded.';
	    },
	    inputTooLong: function (args) {
	      var overChars = args.input.length - args.maximum;

	      var message = 'Please delete ' + overChars + ' character';

	      if (overChars != 1) {
	        message += 's';
	      }

	      return message;
	    },
	    inputTooShort: function (args) {
	      var remainingChars = args.minimum - args.input.length;

	      var message = 'Please enter ' + remainingChars + ' or more characters';

	      return message;
	    },
	    loadingMore: function () {
	      return 'Loading more results…';
	    },
	    maximumSelected: function (args) {
	      var message = 'You can only select ' + args.maximum + ' item';

	      if (args.maximum != 1) {
	        message += 's';
	      }

	      return message;
	    },
	    noResults: function () {
	      return 'No results found';
	    },
	    searching: function () {
	      return 'Searching…';
	    }
	  };
	});

	S2.define('select2/defaults',[
	  'jquery',
	  'require',

	  './results',

	  './selection/single',
	  './selection/multiple',
	  './selection/placeholder',
	  './selection/allowClear',
	  './selection/search',
	  './selection/eventRelay',

	  './utils',
	  './translation',
	  './diacritics',

	  './data/select',
	  './data/array',
	  './data/ajax',
	  './data/tags',
	  './data/tokenizer',
	  './data/minimumInputLength',
	  './data/maximumInputLength',
	  './data/maximumSelectionLength',

	  './dropdown',
	  './dropdown/search',
	  './dropdown/hidePlaceholder',
	  './dropdown/infiniteScroll',
	  './dropdown/attachBody',
	  './dropdown/minimumResultsForSearch',
	  './dropdown/selectOnClose',
	  './dropdown/closeOnSelect',

	  './i18n/en'
	], function ($, require,

	             ResultsList,

	             SingleSelection, MultipleSelection, Placeholder, AllowClear,
	             SelectionSearch, EventRelay,

	             Utils, Translation, DIACRITICS,

	             SelectData, ArrayData, AjaxData, Tags, Tokenizer,
	             MinimumInputLength, MaximumInputLength, MaximumSelectionLength,

	             Dropdown, DropdownSearch, HidePlaceholder, InfiniteScroll,
	             AttachBody, MinimumResultsForSearch, SelectOnClose, CloseOnSelect,

	             EnglishTranslation) {
	  function Defaults () {
	    this.reset();
	  }

	  Defaults.prototype.apply = function (options) {
	    options = $.extend(true, {}, this.defaults, options);

	    if (options.dataAdapter == null) {
	      if (options.ajax != null) {
	        options.dataAdapter = AjaxData;
	      } else if (options.data != null) {
	        options.dataAdapter = ArrayData;
	      } else {
	        options.dataAdapter = SelectData;
	      }

	      if (options.minimumInputLength > 0) {
	        options.dataAdapter = Utils.Decorate(
	          options.dataAdapter,
	          MinimumInputLength
	        );
	      }

	      if (options.maximumInputLength > 0) {
	        options.dataAdapter = Utils.Decorate(
	          options.dataAdapter,
	          MaximumInputLength
	        );
	      }

	      if (options.maximumSelectionLength > 0) {
	        options.dataAdapter = Utils.Decorate(
	          options.dataAdapter,
	          MaximumSelectionLength
	        );
	      }

	      if (options.tags) {
	        options.dataAdapter = Utils.Decorate(options.dataAdapter, Tags);
	      }

	      if (options.tokenSeparators != null || options.tokenizer != null) {
	        options.dataAdapter = Utils.Decorate(
	          options.dataAdapter,
	          Tokenizer
	        );
	      }

	      if (options.query != null) {
	        var Query = require(options.amdBase + 'compat/query');

	        options.dataAdapter = Utils.Decorate(
	          options.dataAdapter,
	          Query
	        );
	      }

	      if (options.initSelection != null) {
	        var InitSelection = require(options.amdBase + 'compat/initSelection');

	        options.dataAdapter = Utils.Decorate(
	          options.dataAdapter,
	          InitSelection
	        );
	      }
	    }

	    if (options.resultsAdapter == null) {
	      options.resultsAdapter = ResultsList;

	      if (options.ajax != null) {
	        options.resultsAdapter = Utils.Decorate(
	          options.resultsAdapter,
	          InfiniteScroll
	        );
	      }

	      if (options.placeholder != null) {
	        options.resultsAdapter = Utils.Decorate(
	          options.resultsAdapter,
	          HidePlaceholder
	        );
	      }

	      if (options.selectOnClose) {
	        options.resultsAdapter = Utils.Decorate(
	          options.resultsAdapter,
	          SelectOnClose
	        );
	      }
	    }

	    if (options.dropdownAdapter == null) {
	      if (options.multiple) {
	        options.dropdownAdapter = Dropdown;
	      } else {
	        var SearchableDropdown = Utils.Decorate(Dropdown, DropdownSearch);

	        options.dropdownAdapter = SearchableDropdown;
	      }

	      if (options.minimumResultsForSearch !== 0) {
	        options.dropdownAdapter = Utils.Decorate(
	          options.dropdownAdapter,
	          MinimumResultsForSearch
	        );
	      }

	      if (options.closeOnSelect) {
	        options.dropdownAdapter = Utils.Decorate(
	          options.dropdownAdapter,
	          CloseOnSelect
	        );
	      }

	      if (
	        options.dropdownCssClass != null ||
	        options.dropdownCss != null ||
	        options.adaptDropdownCssClass != null
	      ) {
	        var DropdownCSS = require(options.amdBase + 'compat/dropdownCss');

	        options.dropdownAdapter = Utils.Decorate(
	          options.dropdownAdapter,
	          DropdownCSS
	        );
	      }

	      options.dropdownAdapter = Utils.Decorate(
	        options.dropdownAdapter,
	        AttachBody
	      );
	    }

	    if (options.selectionAdapter == null) {
	      if (options.multiple) {
	        options.selectionAdapter = MultipleSelection;
	      } else {
	        options.selectionAdapter = SingleSelection;
	      }

	      // Add the placeholder mixin if a placeholder was specified
	      if (options.placeholder != null) {
	        options.selectionAdapter = Utils.Decorate(
	          options.selectionAdapter,
	          Placeholder
	        );
	      }

	      if (options.allowClear) {
	        options.selectionAdapter = Utils.Decorate(
	          options.selectionAdapter,
	          AllowClear
	        );
	      }

	      if (options.multiple) {
	        options.selectionAdapter = Utils.Decorate(
	          options.selectionAdapter,
	          SelectionSearch
	        );
	      }

	      if (
	        options.containerCssClass != null ||
	        options.containerCss != null ||
	        options.adaptContainerCssClass != null
	      ) {
	        var ContainerCSS = require(options.amdBase + 'compat/containerCss');

	        options.selectionAdapter = Utils.Decorate(
	          options.selectionAdapter,
	          ContainerCSS
	        );
	      }

	      options.selectionAdapter = Utils.Decorate(
	        options.selectionAdapter,
	        EventRelay
	      );
	    }

	    if (typeof options.language === 'string') {
	      // Check if the language is specified with a region
	      if (options.language.indexOf('-') > 0) {
	        // Extract the region information if it is included
	        var languageParts = options.language.split('-');
	        var baseLanguage = languageParts[0];

	        options.language = [options.language, baseLanguage];
	      } else {
	        options.language = [options.language];
	      }
	    }

	    if ($.isArray(options.language)) {
	      var languages = new Translation();
	      options.language.push('en');

	      var languageNames = options.language;

	      for (var l = 0; l < languageNames.length; l++) {
	        var name = languageNames[l];
	        var language = {};

	        try {
	          // Try to load it with the original name
	          language = Translation.loadPath(name);
	        } catch (e) {
	          try {
	            // If we couldn't load it, check if it wasn't the full path
	            name = this.defaults.amdLanguageBase + name;
	            language = Translation.loadPath(name);
	          } catch (ex) {
	            // The translation could not be loaded at all. Sometimes this is
	            // because of a configuration problem, other times this can be
	            // because of how Select2 helps load all possible translation files.
	            if (options.debug && window.console && console.warn) {
	              console.warn(
	                'Select2: The language file for "' + name + '" could not be ' +
	                'automatically loaded. A fallback will be used instead.'
	              );
	            }

	            continue;
	          }
	        }

	        languages.extend(language);
	      }

	      options.translations = languages;
	    } else {
	      var baseTranslation = Translation.loadPath(
	        this.defaults.amdLanguageBase + 'en'
	      );
	      var customTranslation = new Translation(options.language);

	      customTranslation.extend(baseTranslation);

	      options.translations = customTranslation;
	    }

	    return options;
	  };

	  Defaults.prototype.reset = function () {
	    function stripDiacritics (text) {
	      // Used 'uni range + named function' from http://jsperf.com/diacritics/18
	      function match(a) {
	        return DIACRITICS[a] || a;
	      }

	      return text.replace(/[^\u0000-\u007E]/g, match);
	    }

	    function matcher (params, data) {
	      // Always return the object if there is nothing to compare
	      if ($.trim(params.term) === '') {
	        return data;
	      }

	      // Do a recursive check for options with children
	      if (data.children && data.children.length > 0) {
	        // Clone the data object if there are children
	        // This is required as we modify the object to remove any non-matches
	        var match = $.extend(true, {}, data);

	        // Check each child of the option
	        for (var c = data.children.length - 1; c >= 0; c--) {
	          var child = data.children[c];

	          var matches = matcher(params, child);

	          // If there wasn't a match, remove the object in the array
	          if (matches == null) {
	            match.children.splice(c, 1);
	          }
	        }

	        // If any children matched, return the new object
	        if (match.children.length > 0) {
	          return match;
	        }

	        // If there were no matching children, check just the plain object
	        return matcher(params, match);
	      }

	      var original = stripDiacritics(data.text).toUpperCase();
	      var term = stripDiacritics(params.term).toUpperCase();

	      // Check if the text contains the term
	      if (original.indexOf(term) > -1) {
	        return data;
	      }

	      // If it doesn't contain the term, don't return anything
	      return null;
	    }

	    this.defaults = {
	      amdBase: './',
	      amdLanguageBase: './i18n/',
	      closeOnSelect: true,
	      debug: false,
	      dropdownAutoWidth: false,
	      escapeMarkup: Utils.escapeMarkup,
	      language: EnglishTranslation,
	      matcher: matcher,
	      minimumInputLength: 0,
	      maximumInputLength: 0,
	      maximumSelectionLength: 0,
	      minimumResultsForSearch: 0,
	      selectOnClose: false,
	      sorter: function (data) {
	        return data;
	      },
	      templateResult: function (result) {
	        return result.text;
	      },
	      templateSelection: function (selection) {
	        return selection.text;
	      },
	      theme: 'default',
	      width: 'resolve'
	    };
	  };

	  Defaults.prototype.set = function (key, value) {
	    var camelKey = $.camelCase(key);

	    var data = {};
	    data[camelKey] = value;

	    var convertedData = Utils._convertData(data);

	    $.extend(this.defaults, convertedData);
	  };

	  var defaults = new Defaults();

	  return defaults;
	});

	S2.define('select2/options',[
	  'require',
	  'jquery',
	  './defaults',
	  './utils'
	], function (require, $, Defaults, Utils) {
	  function Options (options, $element) {
	    this.options = options;

	    if ($element != null) {
	      this.fromElement($element);
	    }

	    this.options = Defaults.apply(this.options);

	    if ($element && $element.is('input')) {
	      var InputCompat = require(this.get('amdBase') + 'compat/inputData');

	      this.options.dataAdapter = Utils.Decorate(
	        this.options.dataAdapter,
	        InputCompat
	      );
	    }
	  }

	  Options.prototype.fromElement = function ($e) {
	    var excludedData = ['select2'];

	    if (this.options.multiple == null) {
	      this.options.multiple = $e.prop('multiple');
	    }

	    if (this.options.disabled == null) {
	      this.options.disabled = $e.prop('disabled');
	    }

	    if (this.options.language == null) {
	      if ($e.prop('lang')) {
	        this.options.language = $e.prop('lang').toLowerCase();
	      } else if ($e.closest('[lang]').prop('lang')) {
	        this.options.language = $e.closest('[lang]').prop('lang');
	      }
	    }

	    if (this.options.dir == null) {
	      if ($e.prop('dir')) {
	        this.options.dir = $e.prop('dir');
	      } else if ($e.closest('[dir]').prop('dir')) {
	        this.options.dir = $e.closest('[dir]').prop('dir');
	      } else {
	        this.options.dir = 'ltr';
	      }
	    }

	    $e.prop('disabled', this.options.disabled);
	    $e.prop('multiple', this.options.multiple);

	    if ($e.data('select2Tags')) {
	      if (this.options.debug && window.console && console.warn) {
	        console.warn(
	          'Select2: The `data-select2-tags` attribute has been changed to ' +
	          'use the `data-data` and `data-tags="true"` attributes and will be ' +
	          'removed in future versions of Select2.'
	        );
	      }

	      $e.data('data', $e.data('select2Tags'));
	      $e.data('tags', true);
	    }

	    if ($e.data('ajaxUrl')) {
	      if (this.options.debug && window.console && console.warn) {
	        console.warn(
	          'Select2: The `data-ajax-url` attribute has been changed to ' +
	          '`data-ajax--url` and support for the old attribute will be removed' +
	          ' in future versions of Select2.'
	        );
	      }

	      $e.attr('ajax--url', $e.data('ajaxUrl'));
	      $e.data('ajax--url', $e.data('ajaxUrl'));
	    }

	    var dataset = {};

	    // Prefer the element's `dataset` attribute if it exists
	    // jQuery 1.x does not correctly handle data attributes with multiple dashes
	    if ($.fn.jquery && $.fn.jquery.substr(0, 2) == '1.' && $e[0].dataset) {
	      dataset = $.extend(true, {}, $e[0].dataset, $e.data());
	    } else {
	      dataset = $e.data();
	    }

	    var data = $.extend(true, {}, dataset);

	    data = Utils._convertData(data);

	    for (var key in data) {
	      if ($.inArray(key, excludedData) > -1) {
	        continue;
	      }

	      if ($.isPlainObject(this.options[key])) {
	        $.extend(this.options[key], data[key]);
	      } else {
	        this.options[key] = data[key];
	      }
	    }

	    return this;
	  };

	  Options.prototype.get = function (key) {
	    return this.options[key];
	  };

	  Options.prototype.set = function (key, val) {
	    this.options[key] = val;
	  };

	  return Options;
	});

	S2.define('select2/core',[
	  'jquery',
	  './options',
	  './utils',
	  './keys'
	], function ($, Options, Utils, KEYS) {
	  var Select2 = function ($element, options) {
	    if ($element.data('select2') != null) {
	      $element.data('select2').destroy();
	    }

	    this.$element = $element;

	    this.id = this._generateId($element);

	    options = options || {};

	    this.options = new Options(options, $element);

	    Select2.__super__.constructor.call(this);

	    // Set up the tabindex

	    var tabindex = $element.attr('tabindex') || 0;
	    $element.data('old-tabindex', tabindex);
	    $element.attr('tabindex', '-1');

	    // Set up containers and adapters

	    var DataAdapter = this.options.get('dataAdapter');
	    this.dataAdapter = new DataAdapter($element, this.options);

	    var $container = this.render();

	    this._placeContainer($container);

	    var SelectionAdapter = this.options.get('selectionAdapter');
	    this.selection = new SelectionAdapter($element, this.options);
	    this.$selection = this.selection.render();

	    this.selection.position(this.$selection, $container);

	    var DropdownAdapter = this.options.get('dropdownAdapter');
	    this.dropdown = new DropdownAdapter($element, this.options);
	    this.$dropdown = this.dropdown.render();

	    this.dropdown.position(this.$dropdown, $container);

	    var ResultsAdapter = this.options.get('resultsAdapter');
	    this.results = new ResultsAdapter($element, this.options, this.dataAdapter);
	    this.$results = this.results.render();

	    this.results.position(this.$results, this.$dropdown);

	    // Bind events

	    var self = this;

	    // Bind the container to all of the adapters
	    this._bindAdapters();

	    // Register any DOM event handlers
	    this._registerDomEvents();

	    // Register any internal event handlers
	    this._registerDataEvents();
	    this._registerSelectionEvents();
	    this._registerDropdownEvents();
	    this._registerResultsEvents();
	    this._registerEvents();

	    // Set the initial state
	    this.dataAdapter.current(function (initialData) {
	      self.trigger('selection:update', {
	        data: initialData
	      });
	    });

	    // Hide the original select
	    $element.addClass('select2-hidden-accessible');
	    $element.attr('aria-hidden', 'true');

	    // Synchronize any monitored attributes
	    this._syncAttributes();

	    $element.data('select2', this);
	  };

	  Utils.Extend(Select2, Utils.Observable);

	  Select2.prototype._generateId = function ($element) {
	    var id = '';

	    if ($element.attr('id') != null) {
	      id = $element.attr('id');
	    } else if ($element.attr('name') != null) {
	      id = $element.attr('name') + '-' + Utils.generateChars(2);
	    } else {
	      id = Utils.generateChars(4);
	    }

	    id = id.replace(/(:|\.|\[|\]|,)/g, '');
	    id = 'select2-' + id;

	    return id;
	  };

	  Select2.prototype._placeContainer = function ($container) {
	    $container.insertAfter(this.$element);

	    var width = this._resolveWidth(this.$element, this.options.get('width'));

	    if (width != null) {
	      $container.css('width', width);
	    }
	  };

	  Select2.prototype._resolveWidth = function ($element, method) {
	    var WIDTH = /^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;

	    if (method == 'resolve') {
	      var styleWidth = this._resolveWidth($element, 'style');

	      if (styleWidth != null) {
	        return styleWidth;
	      }

	      return this._resolveWidth($element, 'element');
	    }

	    if (method == 'element') {
	      var elementWidth = $element.outerWidth(false);

	      if (elementWidth <= 0) {
	        return 'auto';
	      }

	      return elementWidth + 'px';
	    }

	    if (method == 'style') {
	      var style = $element.attr('style');

	      if (typeof(style) !== 'string') {
	        return null;
	      }

	      var attrs = style.split(';');

	      for (var i = 0, l = attrs.length; i < l; i = i + 1) {
	        var attr = attrs[i].replace(/\s/g, '');
	        var matches = attr.match(WIDTH);

	        if (matches !== null && matches.length >= 1) {
	          return matches[1];
	        }
	      }

	      return null;
	    }

	    return method;
	  };

	  Select2.prototype._bindAdapters = function () {
	    this.dataAdapter.bind(this, this.$container);
	    this.selection.bind(this, this.$container);

	    this.dropdown.bind(this, this.$container);
	    this.results.bind(this, this.$container);
	  };

	  Select2.prototype._registerDomEvents = function () {
	    var self = this;

	    this.$element.on('change.select2', function () {
	      self.dataAdapter.current(function (data) {
	        self.trigger('selection:update', {
	          data: data
	        });
	      });
	    });

	    this.$element.on('focus.select2', function (evt) {
	      self.trigger('focus', evt);
	    });

	    this._syncA = Utils.bind(this._syncAttributes, this);
	    this._syncS = Utils.bind(this._syncSubtree, this);

	    if (this.$element[0].attachEvent) {
	      this.$element[0].attachEvent('onpropertychange', this._syncA);
	    }

	    var observer = window.MutationObserver ||
	      window.WebKitMutationObserver ||
	      window.MozMutationObserver
	    ;

	    if (observer != null) {
	      this._observer = new observer(function (mutations) {
	        $.each(mutations, self._syncA);
	        $.each(mutations, self._syncS);
	      });
	      this._observer.observe(this.$element[0], {
	        attributes: true,
	        childList: true,
	        subtree: false
	      });
	    } else if (this.$element[0].addEventListener) {
	      this.$element[0].addEventListener(
	        'DOMAttrModified',
	        self._syncA,
	        false
	      );
	      this.$element[0].addEventListener(
	        'DOMNodeInserted',
	        self._syncS,
	        false
	      );
	      this.$element[0].addEventListener(
	        'DOMNodeRemoved',
	        self._syncS,
	        false
	      );
	    }
	  };

	  Select2.prototype._registerDataEvents = function () {
	    var self = this;

	    this.dataAdapter.on('*', function (name, params) {
	      self.trigger(name, params);
	    });
	  };

	  Select2.prototype._registerSelectionEvents = function () {
	    var self = this;
	    var nonRelayEvents = ['toggle', 'focus'];

	    this.selection.on('toggle', function () {
	      self.toggleDropdown();
	    });

	    this.selection.on('focus', function (params) {
	      self.focus(params);
	    });

	    this.selection.on('*', function (name, params) {
	      if ($.inArray(name, nonRelayEvents) !== -1) {
	        return;
	      }

	      self.trigger(name, params);
	    });
	  };

	  Select2.prototype._registerDropdownEvents = function () {
	    var self = this;

	    this.dropdown.on('*', function (name, params) {
	      self.trigger(name, params);
	    });
	  };

	  Select2.prototype._registerResultsEvents = function () {
	    var self = this;

	    this.results.on('*', function (name, params) {
	      self.trigger(name, params);
	    });
	  };

	  Select2.prototype._registerEvents = function () {
	    var self = this;

	    this.on('open', function () {
	      self.$container.addClass('select2-container--open');
	    });

	    this.on('close', function () {
	      self.$container.removeClass('select2-container--open');
	    });

	    this.on('enable', function () {
	      self.$container.removeClass('select2-container--disabled');
	    });

	    this.on('disable', function () {
	      self.$container.addClass('select2-container--disabled');
	    });

	    this.on('blur', function () {
	      self.$container.removeClass('select2-container--focus');
	    });

	    this.on('query', function (params) {
	      if (!self.isOpen()) {
	        self.trigger('open', {});
	      }

	      this.dataAdapter.query(params, function (data) {
	        self.trigger('results:all', {
	          data: data,
	          query: params
	        });
	      });
	    });

	    this.on('query:append', function (params) {
	      this.dataAdapter.query(params, function (data) {
	        self.trigger('results:append', {
	          data: data,
	          query: params
	        });
	      });
	    });

	    this.on('keypress', function (evt) {
	      var key = evt.which;

	      if (self.isOpen()) {
	        if (key === KEYS.ESC || key === KEYS.TAB ||
	            (key === KEYS.UP && evt.altKey)) {
	          self.close();

	          evt.preventDefault();
	        } else if (key === KEYS.ENTER) {
	          self.trigger('results:select', {});

	          evt.preventDefault();
	        } else if ((key === KEYS.SPACE && evt.ctrlKey)) {
	          self.trigger('results:toggle', {});

	          evt.preventDefault();
	        } else if (key === KEYS.UP) {
	          self.trigger('results:previous', {});

	          evt.preventDefault();
	        } else if (key === KEYS.DOWN) {
	          self.trigger('results:next', {});

	          evt.preventDefault();
	        }
	      } else {
	        if (key === KEYS.ENTER || key === KEYS.SPACE ||
	            (key === KEYS.DOWN && evt.altKey)) {
	          self.open();

	          evt.preventDefault();
	        }
	      }
	    });
	  };

	  Select2.prototype._syncAttributes = function () {
	    this.options.set('disabled', this.$element.prop('disabled'));

	    if (this.options.get('disabled')) {
	      if (this.isOpen()) {
	        this.close();
	      }

	      this.trigger('disable', {});
	    } else {
	      this.trigger('enable', {});
	    }
	  };

	  Select2.prototype._syncSubtree = function (evt, mutations) {
	    var changed = false;
	    var self = this;

	    // Ignore any mutation events raised for elements that aren't options or
	    // optgroups. This handles the case when the select element is destroyed
	    if (
	      evt && evt.target && (
	        evt.target.nodeName !== 'OPTION' && evt.target.nodeName !== 'OPTGROUP'
	      )
	    ) {
	      return;
	    }

	    if (!mutations) {
	      // If mutation events aren't supported, then we can only assume that the
	      // change affected the selections
	      changed = true;
	    } else if (mutations.addedNodes && mutations.addedNodes.length > 0) {
	      for (var n = 0; n < mutations.addedNodes.length; n++) {
	        var node = mutations.addedNodes[n];

	        if (node.selected) {
	          changed = true;
	        }
	      }
	    } else if (mutations.removedNodes && mutations.removedNodes.length > 0) {
	      changed = true;
	    }

	    // Only re-pull the data if we think there is a change
	    if (changed) {
	      this.dataAdapter.current(function (currentData) {
	        self.trigger('selection:update', {
	          data: currentData
	        });
	      });
	    }
	  };

	  /**
	   * Override the trigger method to automatically trigger pre-events when
	   * there are events that can be prevented.
	   */
	  Select2.prototype.trigger = function (name, args) {
	    var actualTrigger = Select2.__super__.trigger;
	    var preTriggerMap = {
	      'open': 'opening',
	      'close': 'closing',
	      'select': 'selecting',
	      'unselect': 'unselecting'
	    };

	    if (args === undefined) {
	      args = {};
	    }

	    if (name in preTriggerMap) {
	      var preTriggerName = preTriggerMap[name];
	      var preTriggerArgs = {
	        prevented: false,
	        name: name,
	        args: args
	      };

	      actualTrigger.call(this, preTriggerName, preTriggerArgs);

	      if (preTriggerArgs.prevented) {
	        args.prevented = true;

	        return;
	      }
	    }

	    actualTrigger.call(this, name, args);
	  };

	  Select2.prototype.toggleDropdown = function () {
	    if (this.options.get('disabled')) {
	      return;
	    }

	    if (this.isOpen()) {
	      this.close();
	    } else {
	      this.open();
	    }
	  };

	  Select2.prototype.open = function () {
	    if (this.isOpen()) {
	      return;
	    }

	    this.trigger('query', {});
	  };

	  Select2.prototype.close = function () {
	    if (!this.isOpen()) {
	      return;
	    }

	    this.trigger('close', {});
	  };

	  Select2.prototype.isOpen = function () {
	    return this.$container.hasClass('select2-container--open');
	  };

	  Select2.prototype.hasFocus = function () {
	    return this.$container.hasClass('select2-container--focus');
	  };

	  Select2.prototype.focus = function (data) {
	    // No need to re-trigger focus events if we are already focused
	    if (this.hasFocus()) {
	      return;
	    }

	    this.$container.addClass('select2-container--focus');
	    this.trigger('focus', {});
	  };

	  Select2.prototype.enable = function (args) {
	    if (this.options.get('debug') && window.console && console.warn) {
	      console.warn(
	        'Select2: The `select2("enable")` method has been deprecated and will' +
	        ' be removed in later Select2 versions. Use $element.prop("disabled")' +
	        ' instead.'
	      );
	    }

	    if (args == null || args.length === 0) {
	      args = [true];
	    }

	    var disabled = !args[0];

	    this.$element.prop('disabled', disabled);
	  };

	  Select2.prototype.data = function () {
	    if (this.options.get('debug') &&
	        arguments.length > 0 && window.console && console.warn) {
	      console.warn(
	        'Select2: Data can no longer be set using `select2("data")`. You ' +
	        'should consider setting the value instead using `$element.val()`.'
	      );
	    }

	    var data = [];

	    this.dataAdapter.current(function (currentData) {
	      data = currentData;
	    });

	    return data;
	  };

	  Select2.prototype.val = function (args) {
	    if (this.options.get('debug') && window.console && console.warn) {
	      console.warn(
	        'Select2: The `select2("val")` method has been deprecated and will be' +
	        ' removed in later Select2 versions. Use $element.val() instead.'
	      );
	    }

	    if (args == null || args.length === 0) {
	      return this.$element.val();
	    }

	    var newVal = args[0];

	    if ($.isArray(newVal)) {
	      newVal = $.map(newVal, function (obj) {
	        return obj.toString();
	      });
	    }

	    this.$element.val(newVal).trigger('change');
	  };

	  Select2.prototype.destroy = function () {
	    this.$container.remove();

	    if (this.$element[0].detachEvent) {
	      this.$element[0].detachEvent('onpropertychange', this._syncA);
	    }

	    if (this._observer != null) {
	      this._observer.disconnect();
	      this._observer = null;
	    } else if (this.$element[0].removeEventListener) {
	      this.$element[0]
	        .removeEventListener('DOMAttrModified', this._syncA, false);
	      this.$element[0]
	        .removeEventListener('DOMNodeInserted', this._syncS, false);
	      this.$element[0]
	        .removeEventListener('DOMNodeRemoved', this._syncS, false);
	    }

	    this._syncA = null;
	    this._syncS = null;

	    this.$element.off('.select2');
	    this.$element.attr('tabindex', this.$element.data('old-tabindex'));

	    this.$element.removeClass('select2-hidden-accessible');
	    this.$element.attr('aria-hidden', 'false');
	    this.$element.removeData('select2');

	    this.dataAdapter.destroy();
	    this.selection.destroy();
	    this.dropdown.destroy();
	    this.results.destroy();

	    this.dataAdapter = null;
	    this.selection = null;
	    this.dropdown = null;
	    this.results = null;
	  };

	  Select2.prototype.render = function () {
	    var $container = $(
	      '<span class="select2 select2-container">' +
	        '<span class="selection"></span>' +
	        '<span class="dropdown-wrapper" aria-hidden="true"></span>' +
	      '</span>'
	    );

	    $container.attr('dir', this.options.get('dir'));

	    this.$container = $container;

	    this.$container.addClass('select2-container--' + this.options.get('theme'));

	    $container.data('element', this.$element);

	    return $container;
	  };

	  return Select2;
	});

	S2.define('jquery-mousewheel',[
	  'jquery'
	], function ($) {
	  // Used to shim jQuery.mousewheel for non-full builds.
	  return $;
	});

	S2.define('jquery.select2',[
	  'jquery',
	  'jquery-mousewheel',

	  './select2/core',
	  './select2/defaults'
	], function ($, _, Select2, Defaults) {
	  if ($.fn.select2 == null) {
	    // All methods that should return the element
	    var thisMethods = ['open', 'close', 'destroy'];

	    $.fn.select2 = function (options) {
	      options = options || {};

	      if (typeof options === 'object') {
	        this.each(function () {
	          var instanceOptions = $.extend(true, {}, options);

	          var instance = new Select2($(this), instanceOptions);
	        });

	        return this;
	      } else if (typeof options === 'string') {
	        var ret;
	        var args = Array.prototype.slice.call(arguments, 1);

	        this.each(function () {
	          var instance = $(this).data('select2');

	          if (instance == null && window.console && console.error) {
	            console.error(
	              'The select2(\'' + options + '\') method was called on an ' +
	              'element that is not using Select2.'
	            );
	          }

	          ret = instance[options].apply(instance, args);
	        });

	        // Check if we should be returning `this`
	        if ($.inArray(options, thisMethods) > -1) {
	          return this;
	        }

	        return ret;
	      } else {
	        throw new Error('Invalid arguments for Select2: ' + options);
	      }
	    };
	  }

	  if ($.fn.select2.defaults == null) {
	    $.fn.select2.defaults = Defaults;
	  }

	  return Select2;
	});

	  // Return the AMD loader configuration so it can be used outside of this file
	  return {
	    define: S2.define,
	    require: S2.require
	  };
	}());

	  // Autoload the jQuery bindings
	  // We know that all of the modules exist above this, so we're safe
	  var select2 = S2.require('jquery.select2');

	  // Hold the AMD module references on the jQuery function that was just loaded
	  // This allows Select2 to use the internal loader outside of this file, such
	  // as in the language files.
	  jQuery.fn.select2.amd = S2;

	  // Return the Select2 instance for anyone who is importing it.
	  return select2;
	}));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 19 */
/***/ (function(module, exports) {

	"use strict";

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/**!
	 * Sortable
	 * @author	RubaXa   <trash@rubaxa.org>
	 * @license MIT
	 */

	(function sortableModule(factory) {
		"use strict";

		window["Sortable"] = factory();
	})(function sortableFactory() {
		"use strict";

		if (typeof window == "undefined" || !window.document) {
			return function sortableError() {
				throw new Error("Sortable.js requires a window with a document");
			};
		}

		var dragEl,
		    parentEl,
		    ghostEl,
		    cloneEl,
		    rootEl,
		    nextEl,
		    lastDownEl,
		    scrollEl,
		    scrollParentEl,
		    scrollCustomFn,
		    lastEl,
		    lastCSS,
		    lastParentCSS,
		    oldIndex,
		    newIndex,
		    activeGroup,
		    putSortable,
		    autoScroll = {},
		    tapEvt,
		    touchEvt,
		    moved,


		/** @const */
		R_SPACE = /\s+/g,
		    R_FLOAT = /left|right|inline/,
		    expando = 'Sortable' + new Date().getTime(),
		    win = window,
		    document = win.document,
		    parseInt = win.parseInt,
		    $ = win.jQuery || win.Zepto,
		    Polymer = win.Polymer,
		    captureMode = false,
		    supportDraggable = !!('draggable' in document.createElement('div')),
		    supportCssPointerEvents = function (el) {
			// false when IE11
			if (!!navigator.userAgent.match(/Trident.*rv[ :]?11\./)) {
				return false;
			}
			el = document.createElement('x');
			el.style.cssText = 'pointer-events:auto';
			return el.style.pointerEvents === 'auto';
		}(),
		    _silent = false,
		    abs = Math.abs,
		    min = Math.min,
		    savedInputChecked = [],
		    touchDragOverListeners = [],
		    _autoScroll = _throttle(function ( /**Event*/evt, /**Object*/options, /**HTMLElement*/rootEl) {
			// Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521
			if (rootEl && options.scroll) {
				var _this = rootEl[expando],
				    el,
				    rect,
				    sens = options.scrollSensitivity,
				    speed = options.scrollSpeed,
				    x = evt.clientX,
				    y = evt.clientY,
				    winWidth = window.innerWidth,
				    winHeight = window.innerHeight,
				    vx,
				    vy,
				    scrollOffsetX,
				    scrollOffsetY;

				// Delect scrollEl
				if (scrollParentEl !== rootEl) {
					scrollEl = options.scroll;
					scrollParentEl = rootEl;
					scrollCustomFn = options.scrollFn;

					if (scrollEl === true) {
						scrollEl = rootEl;

						do {
							if (scrollEl.offsetWidth < scrollEl.scrollWidth || scrollEl.offsetHeight < scrollEl.scrollHeight) {
								break;
							}
							/* jshint boss:true */
						} while (scrollEl = scrollEl.parentNode);
					}
				}

				if (scrollEl) {
					el = scrollEl;
					rect = scrollEl.getBoundingClientRect();
					vx = (abs(rect.right - x) <= sens) - (abs(rect.left - x) <= sens);
					vy = (abs(rect.bottom - y) <= sens) - (abs(rect.top - y) <= sens);
				}

				if (!(vx || vy)) {
					vx = (winWidth - x <= sens) - (x <= sens);
					vy = (winHeight - y <= sens) - (y <= sens);

					/* jshint expr:true */
					(vx || vy) && (el = win);
				}

				if (autoScroll.vx !== vx || autoScroll.vy !== vy || autoScroll.el !== el) {
					autoScroll.el = el;
					autoScroll.vx = vx;
					autoScroll.vy = vy;

					clearInterval(autoScroll.pid);

					if (el) {
						autoScroll.pid = setInterval(function () {
							scrollOffsetY = vy ? vy * speed : 0;
							scrollOffsetX = vx ? vx * speed : 0;

							if ('function' === typeof scrollCustomFn) {
								return scrollCustomFn.call(_this, scrollOffsetX, scrollOffsetY, evt);
							}

							if (el === win) {
								win.scrollTo(win.pageXOffset + scrollOffsetX, win.pageYOffset + scrollOffsetY);
							} else {
								el.scrollTop += scrollOffsetY;
								el.scrollLeft += scrollOffsetX;
							}
						}, 24);
					}
				}
			}
		}, 30),
		    _prepareGroup = function _prepareGroup(options) {
			function toFn(value, pull) {
				if (value === void 0 || value === true) {
					value = group.name;
				}

				if (typeof value === 'function') {
					return value;
				} else {
					return function (to, from) {
						var fromGroup = from.options.group.name;

						return pull ? value : value && (value.join ? value.indexOf(fromGroup) > -1 : fromGroup == value);
					};
				}
			}

			var group = {};
			var originalGroup = options.group;

			if (!originalGroup || (typeof originalGroup === "undefined" ? "undefined" : _typeof(originalGroup)) != 'object') {
				originalGroup = { name: originalGroup };
			}

			group.name = originalGroup.name;
			group.checkPull = toFn(originalGroup.pull, true);
			group.checkPut = toFn(originalGroup.put);
			group.revertClone = originalGroup.revertClone;

			options.group = group;
		};

		/**
	  * @class  Sortable
	  * @param  {HTMLElement}  el
	  * @param  {Object}       [options]
	  */
		function Sortable(el, options) {
			if (!(el && el.nodeType && el.nodeType === 1)) {
				throw 'Sortable: `el` must be HTMLElement, and not ' + {}.toString.call(el);
			}

			this.el = el; // root element
			this.options = options = _extend({}, options);

			// Export instance
			el[expando] = this;

			// Default options
			var defaults = {
				group: Math.random(),
				sort: true,
				disabled: false,
				store: null,
				handle: null,
				scroll: true,
				scrollSensitivity: 30,
				scrollSpeed: 10,
				draggable: /[uo]l/i.test(el.nodeName) ? 'li' : '>*',
				ghostClass: 'sortable-ghost',
				chosenClass: 'sortable-chosen',
				dragClass: 'sortable-drag',
				ignore: 'a, img',
				filter: null,
				preventOnFilter: true,
				animation: 0,
				setData: function setData(dataTransfer, dragEl) {
					dataTransfer.setData('Text', dragEl.textContent);
				},
				dropBubble: false,
				dragoverBubble: false,
				dataIdAttr: 'data-id',
				delay: 0,
				forceFallback: false,
				fallbackClass: 'sortable-fallback',
				fallbackOnBody: false,
				fallbackTolerance: 0,
				fallbackOffset: { x: 0, y: 0 }
			};

			// Set default options
			for (var name in defaults) {
				!(name in options) && (options[name] = defaults[name]);
			}

			_prepareGroup(options);

			// Bind all private methods
			for (var fn in this) {
				if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
					this[fn] = this[fn].bind(this);
				}
			}

			// Setup drag mode
			this.nativeDraggable = options.forceFallback ? false : supportDraggable;

			// Bind events
			_on(el, 'mousedown', this._onTapStart);
			_on(el, 'touchstart', this._onTapStart);
			_on(el, 'pointerdown', this._onTapStart);

			if (this.nativeDraggable) {
				_on(el, 'dragover', this);
				_on(el, 'dragenter', this);
			}

			touchDragOverListeners.push(this._onDragOver);

			// Restore sorting
			options.store && this.sort(options.store.get(this));
		}

		Sortable.prototype = /** @lends Sortable.prototype */{
			constructor: Sortable,

			_onTapStart: function _onTapStart( /** Event|TouchEvent */evt) {
				var _this = this,
				    el = this.el,
				    options = this.options,
				    preventOnFilter = options.preventOnFilter,
				    type = evt.type,
				    touch = evt.touches && evt.touches[0],
				    target = (touch || evt).target,
				    originalTarget = evt.target.shadowRoot && evt.path[0] || target,
				    filter = options.filter,
				    startIndex;

				_saveInputCheckedState(el);

				// Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.
				if (dragEl) {
					return;
				}

				if (/mousedown|pointerdown/.test(type) && evt.button !== 0 || options.disabled) {
					return; // only left button or enabled
				}

				target = _closest(target, options.draggable, el);

				if (!target) {
					return;
				}

				if (lastDownEl === target) {
					// Ignoring duplicate `down`
					return;
				}

				// Get the index of the dragged element within its parent
				startIndex = _index(target, options.draggable);

				// Check filter
				if (typeof filter === 'function') {
					if (filter.call(this, evt, target, this)) {
						_dispatchEvent(_this, originalTarget, 'filter', target, el, startIndex);
						preventOnFilter && evt.preventDefault();
						return; // cancel dnd
					}
				} else if (filter) {
					filter = filter.split(',').some(function (criteria) {
						criteria = _closest(originalTarget, criteria.trim(), el);

						if (criteria) {
							_dispatchEvent(_this, criteria, 'filter', target, el, startIndex);
							return true;
						}
					});

					if (filter) {
						preventOnFilter && evt.preventDefault();
						return; // cancel dnd
					}
				}

				if (options.handle && !_closest(originalTarget, options.handle, el)) {
					return;
				}

				// Prepare `dragstart`
				this._prepareDragStart(evt, touch, target, startIndex);
			},

			_prepareDragStart: function _prepareDragStart( /** Event */evt, /** Touch */touch, /** HTMLElement */target, /** Number */startIndex) {
				var _this = this,
				    el = _this.el,
				    options = _this.options,
				    ownerDocument = el.ownerDocument,
				    dragStartFn;

				if (target && !dragEl && target.parentNode === el) {
					tapEvt = evt;

					rootEl = el;
					dragEl = target;
					parentEl = dragEl.parentNode;
					nextEl = dragEl.nextSibling;
					lastDownEl = target;
					activeGroup = options.group;
					oldIndex = startIndex;

					this._lastX = (touch || evt).clientX;
					this._lastY = (touch || evt).clientY;

					dragEl.style['will-change'] = 'transform';

					dragStartFn = function dragStartFn() {
						// Delayed drag has been triggered
						// we can re-enable the events: touchmove/mousemove
						_this._disableDelayedDrag();

						// Make the element draggable
						dragEl.draggable = _this.nativeDraggable;

						// Chosen item
						_toggleClass(dragEl, options.chosenClass, true);

						// Bind the events: dragstart/dragend
						_this._triggerDragStart(evt, touch);

						// Drag start event
						_dispatchEvent(_this, rootEl, 'choose', dragEl, rootEl, oldIndex);
					};

					// Disable "draggable"
					options.ignore.split(',').forEach(function (criteria) {
						_find(dragEl, criteria.trim(), _disableDraggable);
					});

					_on(ownerDocument, 'mouseup', _this._onDrop);
					_on(ownerDocument, 'touchend', _this._onDrop);
					_on(ownerDocument, 'touchcancel', _this._onDrop);
					_on(ownerDocument, 'pointercancel', _this._onDrop);
					_on(ownerDocument, 'selectstart', _this);

					if (options.delay) {
						// If the user moves the pointer or let go the click or touch
						// before the delay has been reached:
						// disable the delayed drag
						_on(ownerDocument, 'mouseup', _this._disableDelayedDrag);
						_on(ownerDocument, 'touchend', _this._disableDelayedDrag);
						_on(ownerDocument, 'touchcancel', _this._disableDelayedDrag);
						_on(ownerDocument, 'mousemove', _this._disableDelayedDrag);
						_on(ownerDocument, 'touchmove', _this._disableDelayedDrag);
						_on(ownerDocument, 'pointermove', _this._disableDelayedDrag);

						_this._dragStartTimer = setTimeout(dragStartFn, options.delay);
					} else {
						dragStartFn();
					}
				}
			},

			_disableDelayedDrag: function _disableDelayedDrag() {
				var ownerDocument = this.el.ownerDocument;

				clearTimeout(this._dragStartTimer);
				_off(ownerDocument, 'mouseup', this._disableDelayedDrag);
				_off(ownerDocument, 'touchend', this._disableDelayedDrag);
				_off(ownerDocument, 'touchcancel', this._disableDelayedDrag);
				_off(ownerDocument, 'mousemove', this._disableDelayedDrag);
				_off(ownerDocument, 'touchmove', this._disableDelayedDrag);
				_off(ownerDocument, 'pointermove', this._disableDelayedDrag);
			},

			_triggerDragStart: function _triggerDragStart( /** Event */evt, /** Touch */touch) {
				touch = touch || (evt.pointerType == 'touch' ? evt : null);

				if (touch) {
					// Touch device support
					tapEvt = {
						target: dragEl,
						clientX: touch.clientX,
						clientY: touch.clientY
					};

					this._onDragStart(tapEvt, 'touch');
				} else if (!this.nativeDraggable) {
					this._onDragStart(tapEvt, true);
				} else {
					_on(dragEl, 'dragend', this);
					_on(rootEl, 'dragstart', this._onDragStart);
				}

				try {
					if (document.selection) {
						// Timeout neccessary for IE9
						setTimeout(function () {
							document.selection.empty();
						});
					} else {
						window.getSelection().removeAllRanges();
					}
				} catch (err) {}
			},

			_dragStarted: function _dragStarted() {
				if (rootEl && dragEl) {
					var options = this.options;

					// Apply effect
					_toggleClass(dragEl, options.ghostClass, true);
					_toggleClass(dragEl, options.dragClass, false);

					Sortable.active = this;

					// Drag start event
					_dispatchEvent(this, rootEl, 'start', dragEl, rootEl, oldIndex);
				} else {
					this._nulling();
				}
			},

			_emulateDragOver: function _emulateDragOver() {
				if (touchEvt) {
					if (this._lastX === touchEvt.clientX && this._lastY === touchEvt.clientY) {
						return;
					}

					this._lastX = touchEvt.clientX;
					this._lastY = touchEvt.clientY;

					if (!supportCssPointerEvents) {
						_css(ghostEl, 'display', 'none');
					}

					var target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY),
					    parent = target,
					    i = touchDragOverListeners.length;

					if (parent) {
						do {
							if (parent[expando]) {
								while (i--) {
									touchDragOverListeners[i]({
										clientX: touchEvt.clientX,
										clientY: touchEvt.clientY,
										target: target,
										rootEl: parent
									});
								}

								break;
							}

							target = parent; // store last element
						}
						/* jshint boss:true */
						while (parent = parent.parentNode);
					}

					if (!supportCssPointerEvents) {
						_css(ghostEl, 'display', '');
					}
				}
			},

			_onTouchMove: function _onTouchMove( /**TouchEvent*/evt) {
				if (tapEvt) {
					var options = this.options,
					    fallbackTolerance = options.fallbackTolerance,
					    fallbackOffset = options.fallbackOffset,
					    touch = evt.touches ? evt.touches[0] : evt,
					    dx = touch.clientX - tapEvt.clientX + fallbackOffset.x,
					    dy = touch.clientY - tapEvt.clientY + fallbackOffset.y,
					    translate3d = evt.touches ? 'translate3d(' + dx + 'px,' + dy + 'px,0)' : 'translate(' + dx + 'px,' + dy + 'px)';

					// only set the status to dragging, when we are actually dragging
					if (!Sortable.active) {
						if (fallbackTolerance && min(abs(touch.clientX - this._lastX), abs(touch.clientY - this._lastY)) < fallbackTolerance) {
							return;
						}

						this._dragStarted();
					}

					// as well as creating the ghost element on the document body
					this._appendGhost();

					moved = true;
					touchEvt = touch;

					_css(ghostEl, 'webkitTransform', translate3d);
					_css(ghostEl, 'mozTransform', translate3d);
					_css(ghostEl, 'msTransform', translate3d);
					_css(ghostEl, 'transform', translate3d);

					evt.preventDefault();
				}
			},

			_appendGhost: function _appendGhost() {
				if (!ghostEl) {
					var rect = dragEl.getBoundingClientRect(),
					    css = _css(dragEl),
					    options = this.options,
					    ghostRect;

					ghostEl = dragEl.cloneNode(true);

					_toggleClass(ghostEl, options.ghostClass, false);
					_toggleClass(ghostEl, options.fallbackClass, true);
					_toggleClass(ghostEl, options.dragClass, true);

					_css(ghostEl, 'top', rect.top - parseInt(css.marginTop, 10));
					_css(ghostEl, 'left', rect.left - parseInt(css.marginLeft, 10));
					_css(ghostEl, 'width', rect.width);
					_css(ghostEl, 'height', rect.height);
					_css(ghostEl, 'opacity', '0.8');
					_css(ghostEl, 'position', 'fixed');
					_css(ghostEl, 'zIndex', '100000');
					_css(ghostEl, 'pointerEvents', 'none');

					options.fallbackOnBody && document.body.appendChild(ghostEl) || rootEl.appendChild(ghostEl);

					// Fixing dimensions.
					ghostRect = ghostEl.getBoundingClientRect();
					_css(ghostEl, 'width', rect.width * 2 - ghostRect.width);
					_css(ghostEl, 'height', rect.height * 2 - ghostRect.height);
				}
			},

			_onDragStart: function _onDragStart( /**Event*/evt, /**boolean*/useFallback) {
				var dataTransfer = evt.dataTransfer,
				    options = this.options;

				this._offUpEvents();

				if (activeGroup.checkPull(this, this, dragEl, evt)) {
					cloneEl = _clone(dragEl);

					cloneEl.draggable = false;
					cloneEl.style['will-change'] = '';

					_css(cloneEl, 'display', 'none');
					_toggleClass(cloneEl, this.options.chosenClass, false);

					rootEl.insertBefore(cloneEl, dragEl);
					_dispatchEvent(this, rootEl, 'clone', dragEl);
				}

				_toggleClass(dragEl, options.dragClass, true);

				if (useFallback) {
					if (useFallback === 'touch') {
						// Bind touch events
						_on(document, 'touchmove', this._onTouchMove);
						_on(document, 'touchend', this._onDrop);
						_on(document, 'touchcancel', this._onDrop);
						_on(document, 'pointermove', this._onTouchMove);
						_on(document, 'pointerup', this._onDrop);
					} else {
						// Old brwoser
						_on(document, 'mousemove', this._onTouchMove);
						_on(document, 'mouseup', this._onDrop);
					}

					this._loopId = setInterval(this._emulateDragOver, 50);
				} else {
					if (dataTransfer) {
						dataTransfer.effectAllowed = 'move';
						options.setData && options.setData.call(this, dataTransfer, dragEl);
					}

					_on(document, 'drop', this);
					setTimeout(this._dragStarted, 0);
				}
			},

			_onDragOver: function _onDragOver( /**Event*/evt) {
				var el = this.el,
				    target,
				    dragRect,
				    targetRect,
				    revert,
				    options = this.options,
				    group = options.group,
				    activeSortable = Sortable.active,
				    isOwner = activeGroup === group,
				    isMovingBetweenSortable = false,
				    canSort = options.sort;

				if (evt.preventDefault !== void 0) {
					evt.preventDefault();
					!options.dragoverBubble && evt.stopPropagation();
				}

				if (dragEl.animated) {
					return;
				}

				moved = true;

				if (activeSortable && !options.disabled && (isOwner ? canSort || (revert = !rootEl.contains(dragEl)) // Reverting item into the original list
				: putSortable === this || (activeSortable.lastPullMode = activeGroup.checkPull(this, activeSortable, dragEl, evt)) && group.checkPut(this, activeSortable, dragEl, evt)) && (evt.rootEl === void 0 || evt.rootEl === this.el) // touch fallback
				) {
						// Smart auto-scrolling
						_autoScroll(evt, options, this.el);

						if (_silent) {
							return;
						}

						target = _closest(evt.target, options.draggable, el);
						dragRect = dragEl.getBoundingClientRect();

						if (putSortable !== this) {
							putSortable = this;
							isMovingBetweenSortable = true;
						}

						if (revert) {
							_cloneHide(activeSortable, true);
							parentEl = rootEl; // actualization

							if (cloneEl || nextEl) {
								rootEl.insertBefore(dragEl, cloneEl || nextEl);
							} else if (!canSort) {
								rootEl.appendChild(dragEl);
							}

							return;
						}

						if (el.children.length === 0 || el.children[0] === ghostEl || el === evt.target && _ghostIsLast(el, evt)) {
							//assign target only if condition is true
							if (el.children.length !== 0 && el.children[0] !== ghostEl && el === evt.target) {
								target = el.lastElementChild;
							}

							if (target) {
								if (target.animated) {
									return;
								}

								targetRect = target.getBoundingClientRect();
							}

							_cloneHide(activeSortable, isOwner);

							if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt) !== false) {
								if (!dragEl.contains(el)) {
									el.appendChild(dragEl);
									parentEl = el; // actualization
								}

								this._animate(dragRect, dragEl);
								target && this._animate(targetRect, target);
							}
						} else if (target && !target.animated && target !== dragEl && target.parentNode[expando] !== void 0) {
							if (lastEl !== target) {
								lastEl = target;
								lastCSS = _css(target);
								lastParentCSS = _css(target.parentNode);
							}

							targetRect = target.getBoundingClientRect();

							var width = targetRect.right - targetRect.left,
							    height = targetRect.bottom - targetRect.top,
							    floating = R_FLOAT.test(lastCSS.cssFloat + lastCSS.display) || lastParentCSS.display == 'flex' && lastParentCSS['flex-direction'].indexOf('row') === 0,
							    isWide = target.offsetWidth > dragEl.offsetWidth,
							    isLong = target.offsetHeight > dragEl.offsetHeight,
							    halfway = (floating ? (evt.clientX - targetRect.left) / width : (evt.clientY - targetRect.top) / height) > 0.5,
							    nextSibling = target.nextElementSibling,
							    after = false;

							if (floating) {
								var elTop = dragEl.offsetTop,
								    tgTop = target.offsetTop;

								if (elTop === tgTop) {
									after = target.previousElementSibling === dragEl && !isWide || halfway && isWide;
								} else if (target.previousElementSibling === dragEl || dragEl.previousElementSibling === target) {
									after = (evt.clientY - targetRect.top) / height > 0.5;
								} else {
									after = tgTop > elTop;
								}
							} else if (!isMovingBetweenSortable) {
								after = nextSibling !== dragEl && !isLong || halfway && isLong;
							}

							var moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);

							if (moveVector !== false) {
								if (moveVector === 1 || moveVector === -1) {
									after = moveVector === 1;
								}

								_silent = true;
								setTimeout(_unsilent, 30);

								_cloneHide(activeSortable, isOwner);

								if (!dragEl.contains(el)) {
									if (after && !nextSibling) {
										el.appendChild(dragEl);
									} else {
										target.parentNode.insertBefore(dragEl, after ? nextSibling : target);
									}
								}

								parentEl = dragEl.parentNode; // actualization

								this._animate(dragRect, dragEl);
								this._animate(targetRect, target);
							}
						}
					}
			},

			_animate: function _animate(prevRect, target) {
				var ms = this.options.animation;

				if (ms) {
					var currentRect = target.getBoundingClientRect();

					if (prevRect.nodeType === 1) {
						prevRect = prevRect.getBoundingClientRect();
					}

					_css(target, 'transition', 'none');
					_css(target, 'transform', 'translate3d(' + (prevRect.left - currentRect.left) + 'px,' + (prevRect.top - currentRect.top) + 'px,0)');

					target.offsetWidth; // repaint

					_css(target, 'transition', 'all ' + ms + 'ms');
					_css(target, 'transform', 'translate3d(0,0,0)');

					clearTimeout(target.animated);
					target.animated = setTimeout(function () {
						_css(target, 'transition', '');
						_css(target, 'transform', '');
						target.animated = false;
					}, ms);
				}
			},

			_offUpEvents: function _offUpEvents() {
				var ownerDocument = this.el.ownerDocument;

				_off(document, 'touchmove', this._onTouchMove);
				_off(document, 'pointermove', this._onTouchMove);
				_off(ownerDocument, 'mouseup', this._onDrop);
				_off(ownerDocument, 'touchend', this._onDrop);
				_off(ownerDocument, 'pointerup', this._onDrop);
				_off(ownerDocument, 'touchcancel', this._onDrop);
				_off(ownerDocument, 'pointercancel', this._onDrop);
				_off(ownerDocument, 'selectstart', this);
			},

			_onDrop: function _onDrop( /**Event*/evt) {
				var el = this.el,
				    options = this.options;

				clearInterval(this._loopId);
				clearInterval(autoScroll.pid);
				clearTimeout(this._dragStartTimer);

				// Unbind events
				_off(document, 'mousemove', this._onTouchMove);

				if (this.nativeDraggable) {
					_off(document, 'drop', this);
					_off(el, 'dragstart', this._onDragStart);
				}

				this._offUpEvents();

				if (evt) {
					if (moved) {
						evt.preventDefault();
						!options.dropBubble && evt.stopPropagation();
					}

					ghostEl && ghostEl.parentNode && ghostEl.parentNode.removeChild(ghostEl);

					if (rootEl === parentEl || Sortable.active.lastPullMode !== 'clone') {
						// Remove clone
						cloneEl && cloneEl.parentNode && cloneEl.parentNode.removeChild(cloneEl);
					}

					if (dragEl) {
						if (this.nativeDraggable) {
							_off(dragEl, 'dragend', this);
						}

						_disableDraggable(dragEl);
						dragEl.style['will-change'] = '';

						// Remove class's
						_toggleClass(dragEl, this.options.ghostClass, false);
						_toggleClass(dragEl, this.options.chosenClass, false);

						// Drag stop event
						_dispatchEvent(this, rootEl, 'unchoose', dragEl, rootEl, oldIndex);

						if (rootEl !== parentEl) {
							newIndex = _index(dragEl, options.draggable);

							if (newIndex >= 0) {
								// Add event
								_dispatchEvent(null, parentEl, 'add', dragEl, rootEl, oldIndex, newIndex);

								// Remove event
								_dispatchEvent(this, rootEl, 'remove', dragEl, rootEl, oldIndex, newIndex);

								// drag from one list and drop into another
								_dispatchEvent(null, parentEl, 'sort', dragEl, rootEl, oldIndex, newIndex);
								_dispatchEvent(this, rootEl, 'sort', dragEl, rootEl, oldIndex, newIndex);
							}
						} else {
							if (dragEl.nextSibling !== nextEl) {
								// Get the index of the dragged element within its parent
								newIndex = _index(dragEl, options.draggable);

								if (newIndex >= 0) {
									// drag & drop within the same list
									_dispatchEvent(this, rootEl, 'update', dragEl, rootEl, oldIndex, newIndex);
									_dispatchEvent(this, rootEl, 'sort', dragEl, rootEl, oldIndex, newIndex);
								}
							}
						}

						if (Sortable.active) {
							/* jshint eqnull:true */
							if (newIndex == null || newIndex === -1) {
								newIndex = oldIndex;
							}

							_dispatchEvent(this, rootEl, 'end', dragEl, rootEl, oldIndex, newIndex);

							// Save sorting
							this.save();
						}
					}
				}

				this._nulling();
			},

			_nulling: function _nulling() {
				rootEl = dragEl = parentEl = ghostEl = nextEl = cloneEl = lastDownEl = scrollEl = scrollParentEl = tapEvt = touchEvt = moved = newIndex = lastEl = lastCSS = putSortable = activeGroup = Sortable.active = null;

				savedInputChecked.forEach(function (el) {
					el.checked = true;
				});
				savedInputChecked.length = 0;
			},

			handleEvent: function handleEvent( /**Event*/evt) {
				switch (evt.type) {
					case 'drop':
					case 'dragend':
						this._onDrop(evt);
						break;

					case 'dragover':
					case 'dragenter':
						if (dragEl) {
							this._onDragOver(evt);
							_globalDragOver(evt);
						}
						break;

					case 'selectstart':
						evt.preventDefault();
						break;
				}
			},

			/**
	   * Serializes the item into an array of string.
	   * @returns {String[]}
	   */
			toArray: function toArray() {
				var order = [],
				    el,
				    children = this.el.children,
				    i = 0,
				    n = children.length,
				    options = this.options;

				for (; i < n; i++) {
					el = children[i];
					if (_closest(el, options.draggable, this.el)) {
						order.push(el.getAttribute(options.dataIdAttr) || _generateId(el));
					}
				}

				return order;
			},

			/**
	   * Sorts the elements according to the array.
	   * @param  {String[]}  order  order of the items
	   */
			sort: function sort(order) {
				var items = {},
				    rootEl = this.el;

				this.toArray().forEach(function (id, i) {
					var el = rootEl.children[i];

					if (_closest(el, this.options.draggable, rootEl)) {
						items[id] = el;
					}
				}, this);

				order.forEach(function (id) {
					if (items[id]) {
						rootEl.removeChild(items[id]);
						rootEl.appendChild(items[id]);
					}
				});
			},

			/**
	   * Save the current sorting
	   */
			save: function save() {
				var store = this.options.store;
				store && store.set(this);
			},

			/**
	   * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
	   * @param   {HTMLElement}  el
	   * @param   {String}       [selector]  default: `options.draggable`
	   * @returns {HTMLElement|null}
	   */
			closest: function closest(el, selector) {
				return _closest(el, selector || this.options.draggable, this.el);
			},

			/**
	   * Set/get option
	   * @param   {string} name
	   * @param   {*}      [value]
	   * @returns {*}
	   */
			option: function option(name, value) {
				var options = this.options;

				if (value === void 0) {
					return options[name];
				} else {
					options[name] = value;

					if (name === 'group') {
						_prepareGroup(options);
					}
				}
			},

			/**
	   * Destroy
	   */
			destroy: function destroy() {
				var el = this.el;

				el[expando] = null;

				_off(el, 'mousedown', this._onTapStart);
				_off(el, 'touchstart', this._onTapStart);
				_off(el, 'pointerdown', this._onTapStart);

				if (this.nativeDraggable) {
					_off(el, 'dragover', this);
					_off(el, 'dragenter', this);
				}

				// Remove draggable attributes
				Array.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {
					el.removeAttribute('draggable');
				});

				touchDragOverListeners.splice(touchDragOverListeners.indexOf(this._onDragOver), 1);

				this._onDrop();

				this.el = el = null;
			}
		};

		function _cloneHide(sortable, state) {
			if (sortable.lastPullMode !== 'clone') {
				state = true;
			}

			if (cloneEl && cloneEl.state !== state) {
				_css(cloneEl, 'display', state ? 'none' : '');

				if (!state) {
					if (cloneEl.state) {
						if (sortable.options.group.revertClone) {
							rootEl.insertBefore(cloneEl, nextEl);
							sortable._animate(dragEl, cloneEl);
						} else {
							rootEl.insertBefore(cloneEl, dragEl);
						}
					}
				}

				cloneEl.state = state;
			}
		}

		function _closest( /**HTMLElement*/el, /**String*/selector, /**HTMLElement*/ctx) {
			if (el) {
				ctx = ctx || document;

				do {
					if (selector === '>*' && el.parentNode === ctx || _matches(el, selector)) {
						return el;
					}
					/* jshint boss:true */
				} while (el = _getParentOrHost(el));
			}

			return null;
		}

		function _getParentOrHost(el) {
			var parent = el.host;

			return parent && parent.nodeType ? parent : el.parentNode;
		}

		function _globalDragOver( /**Event*/evt) {
			if (evt.dataTransfer) {
				evt.dataTransfer.dropEffect = 'move';
			}
			evt.preventDefault();
		}

		function _on(el, event, fn) {
			el.addEventListener(event, fn, captureMode);
		}

		function _off(el, event, fn) {
			el.removeEventListener(event, fn, captureMode);
		}

		function _toggleClass(el, name, state) {
			if (el) {
				if (el.classList) {
					el.classList[state ? 'add' : 'remove'](name);
				} else {
					var className = (' ' + el.className + ' ').replace(R_SPACE, ' ').replace(' ' + name + ' ', ' ');
					el.className = (className + (state ? ' ' + name : '')).replace(R_SPACE, ' ');
				}
			}
		}

		function _css(el, prop, val) {
			var style = el && el.style;

			if (style) {
				if (val === void 0) {
					if (document.defaultView && document.defaultView.getComputedStyle) {
						val = document.defaultView.getComputedStyle(el, '');
					} else if (el.currentStyle) {
						val = el.currentStyle;
					}

					return prop === void 0 ? val : val[prop];
				} else {
					if (!(prop in style)) {
						prop = '-webkit-' + prop;
					}

					style[prop] = val + (typeof val === 'string' ? '' : 'px');
				}
			}
		}

		function _find(ctx, tagName, iterator) {
			if (ctx) {
				var list = ctx.getElementsByTagName(tagName),
				    i = 0,
				    n = list.length;

				if (iterator) {
					for (; i < n; i++) {
						iterator(list[i], i);
					}
				}

				return list;
			}

			return [];
		}

		function _dispatchEvent(sortable, rootEl, name, targetEl, fromEl, startIndex, newIndex) {
			sortable = sortable || rootEl[expando];

			var evt = document.createEvent('Event'),
			    options = sortable.options,
			    onName = 'on' + name.charAt(0).toUpperCase() + name.substr(1);

			evt.initEvent(name, true, true);

			evt.to = rootEl;
			evt.from = fromEl || rootEl;
			evt.item = targetEl || rootEl;
			evt.clone = cloneEl;

			evt.oldIndex = startIndex;
			evt.newIndex = newIndex;

			rootEl.dispatchEvent(evt);

			if (options[onName]) {
				options[onName].call(sortable, evt);
			}
		}

		function _onMove(fromEl, toEl, dragEl, dragRect, targetEl, targetRect, originalEvt, willInsertAfter) {
			var evt,
			    sortable = fromEl[expando],
			    onMoveFn = sortable.options.onMove,
			    retVal;

			evt = document.createEvent('Event');
			evt.initEvent('move', true, true);

			evt.to = toEl;
			evt.from = fromEl;
			evt.dragged = dragEl;
			evt.draggedRect = dragRect;
			evt.related = targetEl || toEl;
			evt.relatedRect = targetRect || toEl.getBoundingClientRect();
			evt.willInsertAfter = willInsertAfter;

			fromEl.dispatchEvent(evt);

			if (onMoveFn) {
				retVal = onMoveFn.call(sortable, evt, originalEvt);
			}

			return retVal;
		}

		function _disableDraggable(el) {
			el.draggable = false;
		}

		function _unsilent() {
			_silent = false;
		}

		/** @returns {HTMLElement|false} */
		function _ghostIsLast(el, evt) {
			var lastEl = el.lastElementChild,
			    rect = lastEl.getBoundingClientRect();

			// 5 — min delta
			// abs — нельзя добавлять, а то глюки при наведении сверху
			return evt.clientY - (rect.top + rect.height) > 5 || evt.clientX - (rect.left + rect.width) > 5;
		}

		/**
	  * Generate id
	  * @param   {HTMLElement} el
	  * @returns {String}
	  * @private
	  */
		function _generateId(el) {
			var str = el.tagName + el.className + el.src + el.href + el.textContent,
			    i = str.length,
			    sum = 0;

			while (i--) {
				sum += str.charCodeAt(i);
			}

			return sum.toString(36);
		}

		/**
	  * Returns the index of an element within its parent for a selected set of
	  * elements
	  * @param  {HTMLElement} el
	  * @param  {selector} selector
	  * @return {number}
	  */
		function _index(el, selector) {
			var index = 0;

			if (!el || !el.parentNode) {
				return -1;
			}

			while (el && (el = el.previousElementSibling)) {
				if (el.nodeName.toUpperCase() !== 'TEMPLATE' && (selector === '>*' || _matches(el, selector))) {
					index++;
				}
			}

			return index;
		}

		function _matches( /**HTMLElement*/el, /**String*/selector) {
			if (el) {
				selector = selector.split('.');

				var tag = selector.shift().toUpperCase(),
				    re = new RegExp('\\s(' + selector.join('|') + ')(?=\\s)', 'g');

				return (tag === '' || el.nodeName.toUpperCase() == tag) && (!selector.length || ((' ' + el.className + ' ').match(re) || []).length == selector.length);
			}

			return false;
		}

		function _throttle(callback, ms) {
			var args, _this;

			return function () {
				if (args === void 0) {
					args = arguments;
					_this = this;

					setTimeout(function () {
						if (args.length === 1) {
							callback.call(_this, args[0]);
						} else {
							callback.apply(_this, args);
						}

						args = void 0;
					}, ms);
				}
			};
		}

		function _extend(dst, src) {
			if (dst && src) {
				for (var key in src) {
					if (src.hasOwnProperty(key)) {
						dst[key] = src[key];
					}
				}
			}

			return dst;
		}

		function _clone(el) {
			return $ ? $(el).clone(true)[0] : Polymer && Polymer.dom ? Polymer.dom(el).cloneNode(true) : el.cloneNode(true);
		}

		function _saveInputCheckedState(root) {
			var inputs = root.getElementsByTagName('input');
			var idx = inputs.length;

			while (idx--) {
				var el = inputs[idx];
				el.checked && savedInputChecked.push(el);
			}
		}

		// Fixed #973: 
		_on(document, 'touchmove', function (evt) {
			if (Sortable.active) {
				evt.preventDefault();
			}
		});

		try {
			window.addEventListener('test', null, Object.defineProperty({}, 'passive', {
				get: function get() {
					captureMode = {
						capture: false,
						passive: false
					};
				}
			}));
		} catch (err) {}

		// Export utils
		Sortable.utils = {
			on: _on,
			off: _off,
			css: _css,
			find: _find,
			is: function is(el, selector) {
				return !!_closest(el, selector, el);
			},
			extend: _extend,
			throttle: _throttle,
			closest: _closest,
			toggleClass: _toggleClass,
			clone: _clone,
			index: _index
		};

		/**
	  * Create sortable instance
	  * @param {HTMLElement}  el
	  * @param {Object}      [options]
	  */
		Sortable.create = function (el, options) {
			return new Sortable(el, options);
		};

		// Export
		Sortable.version = '1.6.0';
		return Sortable;
	});

/***/ }),
/* 20 */
/***/ (function(module, exports) {

	'use strict';

	window.whr.jQuery()(function ($) {
	    function init() {
	        $('.editable-input').each(function () {
	            var input_wrap = $(this);
	            var input = input_wrap.find('input');
	            var output = $('.editable-input-body[data-output="' + input_wrap.data('input') + '"]');
	            input.val(output.text());

	            output.off('input');
	            output.on('input', function () {
	                input.val(output.text());

	                setTimeout(function () {
	                    input.trigger('change');
	                }, 100);
	            });
	        });
	    }

	    window.whr.context().on('whr-pjax:end', init);
	    $(document).ready(init);
	});

/***/ }),
/* 21 */
/***/ (function(module, exports) {

	"use strict";

	/*
	 * Date Format 1.2.3
	 * (c) 2007-2009 Steven Levithan <stevenlevithan.com>
	 * MIT license
	 *
	 * Includes enhancements by Scott Trenda <scott.trenda.net>
	 * and Kris Kowal <cixar.com/~kris.kowal/>
	 *
	 * Accepts a date, a mask, or a date and a mask.
	 * Returns a formatted version of the given date.
	 * The date defaults to the current date/time.
	 * The mask defaults to dateFormat.masks.default.
	 */

	var dateFormat = function () {
		var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g,
		    timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
		    timezoneClip = /[^-+\dA-Z]/g,
		    pad = function pad(val, len) {
			val = String(val);
			len = len || 2;
			while (val.length < len) {
				val = "0" + val;
			}return val;
		};

		// Regexes and supporting functions are cached through closure
		return function (date, mask, utc) {
			var dF = dateFormat;

			// You can't provide utc if you skip other args (use the "UTC:" mask prefix)
			if (arguments.length == 1 && Object.prototype.toString.call(date) == "[object String]" && !/\d/.test(date)) {
				mask = date;
				date = undefined;
			}

			// Passing date through Date applies Date.parse, if necessary
			date = date ? new Date(date) : new Date();
			if (isNaN(date)) throw SyntaxError("invalid date");

			mask = String(dF.masks[mask] || mask || dF.masks["default"]);

			// Allow setting the utc argument via the mask
			if (mask.slice(0, 4) == "UTC:") {
				mask = mask.slice(4);
				utc = true;
			}

			var _ = utc ? "getUTC" : "get",
			    d = date[_ + "Date"](),
			    D = date[_ + "Day"](),
			    m = date[_ + "Month"](),
			    y = date[_ + "FullYear"](),
			    H = date[_ + "Hours"](),
			    M = date[_ + "Minutes"](),
			    s = date[_ + "Seconds"](),
			    L = date[_ + "Milliseconds"](),
			    o = utc ? 0 : date.getTimezoneOffset(),
			    flags = {
				d: d,
				dd: pad(d),
				ddd: dF.i18n.dayNames[D],
				dddd: dF.i18n.dayNames[D + 7],
				m: m + 1,
				mm: pad(m + 1),
				mmm: dF.i18n.monthNames[m],
				mmmm: dF.i18n.monthNames[m + 12],
				yy: String(y).slice(2),
				yyyy: y,
				h: H % 12 || 12,
				hh: pad(H % 12 || 12),
				H: H,
				HH: pad(H),
				M: M,
				MM: pad(M),
				s: s,
				ss: pad(s),
				l: pad(L, 3),
				L: pad(L > 99 ? Math.round(L / 10) : L),
				t: H < 12 ? "a" : "p",
				tt: H < 12 ? "am" : "pm",
				T: H < 12 ? "A" : "P",
				TT: H < 12 ? "AM" : "PM",
				Z: utc ? "UTC" : (String(date).match(timezone) || [""]).pop().replace(timezoneClip, ""),
				o: (o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
				S: ["th", "st", "nd", "rd"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]
			};

			return mask.replace(token, function ($0) {
				return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
			});
		};
	}();

	// Some common format strings
	dateFormat.masks = {
		"default": "ddd mmm dd yyyy HH:MM:ss",
		shortDate: "m/d/yy",
		mediumDate: "mmm d, yyyy",
		longDate: "mmmm d, yyyy",
		fullDate: "dddd, mmmm d, yyyy",
		shortTime: "h:MM TT",
		mediumTime: "h:MM:ss TT",
		longTime: "h:MM:ss TT Z",
		isoDate: "yyyy-mm-dd",
		isoTime: "HH:MM:ss",
		isoDateTime: "yyyy-mm-dd'T'HH:MM:ss",
		isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"
	};

	// Internationalization strings
	dateFormat.i18n = {
		dayNames: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
		monthNames: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
	};

	// For convenience...
	Date.prototype.format = function (mask, utc) {
		return dateFormat(this, mask, utc);
	};

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {'use strict';

	jQuery(function ($) {

	    function initCalendar() {

	        var jsonData = getData(); // get json-object
	        var DATA = void 0;
	        if (jsonData) {
	            DATA = $.parseJSON(getData());
	        } else {
	            return false;
	        }

	        function getData() {
	            return $('.calendar').attr('data-labels');
	        }
	        // end DATA obj
	        var daysOfWeekFullName = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
	        var dayArray = [],
	            daysRegExp = [/Sun/gi, /Mon/gi, /Tue/gi, /Wed/gi, /Thu/gi, /Fri/gi, /Sat/gi];
	        var date = new Date();
	        var today = [date.getFullYear(), date.getMonth(), date.getDate()];
	        var currentMonth = date.getMonth();
	        var currentYear = getYear();
	        var allMonths = $('.month');
	        var monthCont = $('#months');

	        render();
	        responsiveCalendar();

	        $(window).resize(responsiveCalendar);

	        function responsiveCalendar() {
	            if ($(window).width() < 768) {
	                $('#daysofweek th').each(function (i, item) {
	                    var text = $(item).text();
	                    var croppedText = text.substring(0, 3);
	                    $(item).text(croppedText);
	                });
	            } else {
	                $('#daysofweek th').each(function (i, item) {
	                    $(item).text(daysOfWeekFullName[i]);
	                });
	            }
	        }

	        function setData(year, month, date) {
	            var calendarDate = new Date(year, month, date);
	            var labelsHtml = '';
	            DATA.forEach(function (el) {
	                var elementDate = new Date(el.date);

	                if (elementDate.getDate() === calendarDate.getDate() && elementDate.getMonth() === calendarDate.getMonth() && elementDate.getFullYear() === calendarDate.getFullYear()) {
	                    el.labels.forEach(function (label, i) {
	                        switch (label) {
	                            case 1:
	                                // Strength
	                                labelsHtml += '<i class="label-strength"></i>';
	                                break;
	                            case 2:
	                                // Nutrition
	                                labelsHtml += '<i class="label-nutrition"></i>';
	                                break;
	                            case 3:
	                                // Cardio
	                                labelsHtml += '<i class="label-cardio"></i>';
	                                break;
	                        }
	                    });
	                }
	            }, this);
	            return labelsHtml;
	        }

	        function render() {
	            for (var i = 0; i < allMonths.length; i++) {
	                allMonths[i].innerHTML += ' ';
	            }
	            $('#months-cont .month:eq(' + currentMonth + ')').addClass('active');
	            addElements(currentMonth, 'days');
	        }

	        function setYear() {
	            setTimeout(function () {
	                $('.year').text(currentYear);
	            }, 100);
	        }

	        function getAllDays(month, year) {
	            var date = new Date(year, month, 1);
	            var days = [];
	            while (date.getMonth() === month) {
	                var dayToPush = new Date(date);
	                days.push(dayToPush);
	                date.setDate(date.getDate() + 1);
	            }
	            return days;
	        }

	        function getYear() {
	            var d = new Date();
	            var curYear = d.getFullYear();
	            return curYear;
	        }

	        function isToday(year, month, day) {
	            if (today[0] === year && today[1] === month && today[2] === day) {
	                return true;
	            } else {
	                return false;
	            }
	        }

	        function addElements(query, id) {
	            $('#' + id).html('');
	            $('.calendar').addClass('ready');
	            setYear();
	            var allDays = getAllDays(query, currentYear);
	            var counter = 0;
	            var daysHtml = '';
	            var cellsCount;

	            for (var i = 0; i < allDays.length; i++) {
	                allDays[i] = allDays[i].toString();
	            }
	            for (var i = 0; i < daysRegExp.length; i++) {

	                if (allDays[0].match(daysRegExp[i])) {
	                    break;
	                } else {
	                    counter += 1;
	                }
	            }
	            for (var i = 0; i < counter; i++) {
	                allDays.unshift(" ");
	            }

	            if (allDays.length <= 28) {
	                cellsCount = 28;
	            } else if (allDays.length <= 35) {
	                cellsCount = 35;
	            } else {
	                cellsCount = 42;
	            }
	            for (var i = 0; i < cellsCount; i++) {
	                var getLabels = '';
	                var calcDay = i - counter + 1;

	                if (i >= counter) {
	                    getLabels = setData(currentYear, currentMonth, calcDay);
	                }
	                if (allDays[i] !== ' ' && allDays[i]) {
	                    var dayOTW = allDays[i].split(' ')[2];
	                    if (dayOTW.charAt(0) === "0") {
	                        allDays[i] = dayOTW.replace(/0/gi, '');
	                    } else {
	                        allDays[i] = dayOTW;
	                    }
	                }
	                if (!allDays[i]) {
	                    allDays.push(' ');
	                }
	                if (i === 0 || i === 7 || i === 14 || i === 21 || i === 28 || i === 35) {
	                    daysHtml += '<tr><td class="day"><span class="' + (isToday(currentYear, currentMonth, calcDay) ? ' today' : '') + '">' + allDays[i] + '</span>\n                    ' + (allDays[i] !== ' ' ? getLabels : '') + '\n                    </td>';
	                } else if (i === 6 || i === 13 || i === 20 || i === 27 || i === 34 || i === 42) {
	                    daysHtml += '<td class="day"><span class="' + (isToday(currentYear, currentMonth, calcDay) ? ' today' : '') + '">' + allDays[i] + '</span>\n                    ' + (allDays[i] !== ' ' ? getLabels : '') + '\n                    </td></tr>';
	                } else {
	                    daysHtml += '<td class="day"><span class="' + (isToday(currentYear, currentMonth, calcDay) ? ' today' : '') + '">' + allDays[i] + '</span>\n                    ' + (allDays[i] !== ' ' ? getLabels : '') + '\n                    </td>';
	                }
	            };

	            $('#' + id).html(daysHtml);

	            var days = $('#' + id).find('.day');
	            days.on('click', function (e) {
	                days.removeClass('active');
	                $(this).addClass('active');
	            });
	        }
	        function whichChild(elem) {
	            var i = 0;
	            while ((elem = elem.previousSibling) != null) {
	                ++i;
	            }return i;
	        }

	        $('#prevMt').click(function () {
	            monthToggle('prevMt');
	        });
	        $('#nextMt').click(function () {
	            monthToggle('nextMt');
	        });

	        function monthToggle(ID) {
	            var currentActive = document.querySelector('#months .month.active');
	            var activeIndex = 0;
	            for (var i = 0; i < allMonths.length; i++) {
	                if (allMonths[i].innerHTML === currentActive.innerHTML) {
	                    activeIndex = i;
	                }
	            }

	            if (ID === 'nextMt') {
	                if (activeIndex < 11) {
	                    currentActive.className = 'month';
	                    allMonths[activeIndex + 1].className += ' active';
	                    currentMonth++;
	                    addElements(activeIndex + 1, 'days');
	                } else {
	                    currentActive.className = 'month';
	                    allMonths[0].className += ' active';
	                    currentYear++;
	                    currentMonth = 0;
	                    addElements(0, 'days');
	                }
	            } else if (ID === 'prevMt') {
	                if (activeIndex > 0) {
	                    currentActive.className = 'month';
	                    allMonths[activeIndex - 1].className += ' active';
	                    currentMonth--;
	                    addElements(activeIndex - 1, 'days');
	                } else {
	                    currentActive.className = 'month';
	                    allMonths[11].className += ' active';
	                    currentYear--;
	                    currentMonth = 11;
	                    addElements(11, 'days');
	                }
	            }
	        }
	    }

	    initCalendar();

	    window.whr.context().on('whr-pjax:end', function () {
	        initCalendar();
	    });
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {"use strict";

	// start all functions
	$(document).ready(function () {
	  sortTable("table.js-sortable th:not(.hide-sortable)");
	});

	// Sort table
	function sortTable(elem) {
	  $(elem).click(function () {
	    var desc = changeClass(this);
	    sort(this, desc);
	  });

	  function changeClass(elem) {
	    /*changeClass up/down*/
	    var desc;
	    var flag = 0;
	    if ($(elem).attr("class") == "" || $(elem).attr("class") == undefined) {
	      flag = 0;
	    }
	    if ($(elem).hasClass("up")) {
	      flag = 1;
	    }
	    if ($(elem).hasClass("down")) {
	      flag = 2;
	    }
	    switch (flag) {
	      case 0:
	        $(elem).closest("tr").find("th").removeClass("up").removeClass("down");
	        $(elem).addClass("down");
	        desc = true;
	        break;
	      case 1:
	        $(elem).removeClass("up").addClass("down");
	        desc = true;
	        break;
	      case 2:
	        $(elem).removeClass("down").addClass("up");
	        desc = false;
	        break;
	    }
	    return desc;
	  }

	  function sort(elem, desc) {
	    var tbody = $(elem).closest("table").find('tbody')[0];
	    var colNumber = $(elem).index();
	    var rows = [];

	    for (var i = tbody.children.length - 1; i >= 0; i--) {
	      var child = tbody.removeChild(tbody.children[i]);
	      rows.push(child);
	    }

	    rows.sort(function (a, b) {
	      var result = 0;
	      var aHtml = $(a).find('td')[colNumber].innerHTML;
	      var bHtml = $(b).find('td')[colNumber].innerHTML;
	      if (new Date(aHtml) != "Invalid Date") {
	        /*if date */
	        aHtml = new Date(aHtml);
	        bHtml = new Date(bHtml);
	      }
	      if (aHtml > bHtml) {
	        result = -1;
	      }
	      if (aHtml < bHtml) {
	        result = 1;
	      }

	      return desc ? result : -result;
	    });

	    for (var i = 0; i < rows.length; i++) {
	      tbody.appendChild(rows[i]);
	    }
	  }
	}

	window.sortTable = sortTable;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {'use strict';

	(function ($) {

	  var Chart = function Chart(_data) {
	    var countOfLines = _data.series.length;
	    var max = 0;
	    var liWidth = $('.ct_area li').outerWidth();
	    var liHeight = $('.ct_area li').outerHeight();
	    for (var i = 0; i < countOfLines; i++) {

	      var tempMax = getMaxOfArray(_data.series[i].data);
	      max = tempMax > max ? tempMax : max;
	    }
	    max = Math.ceil(max / 10) * 10; // e.g. 74 -> 80, 76 -> 80, 81 -> 90
	    $('.yAxis-labels .top').text(max);
	    $('.yAxis-labels .center').text(max / 2);

	    $('.ct_area li').each(function () {
	      $(this).html('');
	    });
	    $('.ct_chart_wrapper .xAxis-labels').each(function () {
	      $(this).html('');
	    });

	    var _loop = function _loop(_i) {
	      _data.series[_i].data.forEach(function (item, index) {
	        var lineStyle = 'calc(' + getPositionY(item, max, liHeight) + 'px + ' + 0 + 'px)';
	        var dot = void 0;
	        var tooltipTitle = item + ' ' + $('.ct_chart_wrapper').attr('data-metrics');
	        if (_data.series[_i].data[index + 1]) {
	          dot = '<span data-item="' + item + '" class="chart-dot ' + _data.series[_i].className + '" style="bottom: ' + getPositionY(item, max, liHeight) + 'px" title="' + tooltipTitle + '"></span>' + '<span data-item="' + item + '" class="chart-line ' + _data.series[_i].className + '" style="bottom: ' + lineStyle + '; transform: rotate(' + rotate(_data.series[_i].data, index, max) + 'deg); width: ' + getWidthOfLine(_data.series[_i].data, index, max) + 'px;"></span>';
	        } else {
	          dot = '<span data-item="' + item + '" class="chart-dot ' + _data.series[_i].className + '" style="bottom: ' + getPositionY(item, max, liHeight) + 'px"  title="' + tooltipTitle + '"></span>';
	        }
	        $('.ct_area li:eq(' + index + ')').append(dot);
	      });
	    };

	    for (var _i = 0; _i < countOfLines; _i++) {
	      _loop(_i);
	    }
	    for (var _i2 = 0; _i2 < _data.labels.length; _i2++) {
	      $('.ct_chart_wrapper .xAxis-labels').append('<span>' + _data.labels[_i2] + '</span>');
	    }
	    $('.chart-dot').tooltipster();
	  };

	  function getMaxOfArray(numArray) {
	    return Math.max.apply(null, numArray);
	  }
	  function getPositionY(value, max, liHeight) {
	    var onePercent = liHeight / max;
	    return onePercent * value;
	  }
	  function getPercentsOfHeight(value, max, liHeight) {
	    var onePercent = liHeight / max;
	    return onePercent * value;
	  }
	  // _data.series[i].data, index,
	  function rotate(data, index, max) {
	    var liWidth = $('.ct_area li').outerWidth();
	    var liHeight = $('.ct_area li').outerHeight();
	    var x1 = 0;
	    var y1 = getPercentsOfHeight(data[index], max, liHeight);
	    var x2 = liWidth;
	    var y2 = getPercentsOfHeight(data[index + 1], max, liHeight);
	    var rad = Math.atan2(y2 - y1, x2 - x1);
	    var deg = rad / Math.PI * 180;
	    deg = y2 < y1 ? deg * -1 : deg * -1;
	    return deg;
	  }

	  function getWidthOfLine(data, index, max) {
	    var liWidth = $('.ct_area li').outerWidth();
	    var liHeight = $('.ct_area li').outerHeight();
	    var diff = Math.abs(data[index] - data[index + 1]);
	    diff = getPercentsOfHeight(diff, max, liHeight);
	    var c = Math.sqrt(Math.pow(liWidth, 2) + Math.pow(diff, 2));
	    return c;
	  }

	  function initChart() {
	    var $lineChart = $('.ct_chart_wrapper');
	    var CHARTS = $lineChart.data('charts');
	    var LABELS = $lineChart.data('labels');

	    if (!$lineChart.length) return;

	    var getSeries = function getSeries() {
	      var metric = $('.metrics').val();
	      var series = [];

	      series.push(CHARTS[metric]);

	      $lineChart.attr('data-metrics', CHARTS[metric].xLabel);

	      return series;
	    };

	    if (CHARTS && LABELS) {
	      var labels = LABELS.map(function (item) {
	        var date = new Date();
	        date.setTime(parseInt(item) * 1000);
	        return date.format('dd mmm yyyy');
	      });

	      var data = {
	        labels: labels,
	        series: getSeries()
	      };

	      new Chart(data);

	      $(window).resize(function () {
	        var data = {
	          labels: labels,
	          series: getSeries()
	        };

	        new Chart(data);
	      });

	      $('.metrics').change(function (e) {
	        var data = {
	          labels: labels,
	          series: getSeries()
	        };

	        new Chart(data);
	      });
	    }
	  }

	  // mobile chart

	  $(document).ready(function () {
	    $('.ct_area').attr('data-slide', 0);
	    mobileChart();
	    initChart();
	  });

	  window.whr.context().on('whr-pjax:end', function () {
	    if (!$('.ct_area').attr('data-slide')) {
	      $('.ct_area').attr('data-slide', 0);
	    }

	    mobileChart();
	    initChart();
	  });

	  $(window).resize(function () {
	    if (!$('.ct_area').attr('data-slide')) {
	      $('.ct_area').attr('data-slide', 0);
	    }
	    mobileChart();
	  });

	  function mobileChart() {
	    if ($(window).width() <= 768) {
	      var _index = parseInt($('.ct_area').attr('data-slide')) || 0; // get current slide
	      var marginLeft = void 0;
	      $('.ct_mobile_nav .arrow-left').click(function () {
	        if (_index > 0) {
	          _index -= 1;
	          marginLeft = 80 * _index;
	          $('.ct_area').css({
	            'margin-left': '-' + marginLeft + '%'
	          });
	          $('.xAxis-labels').css({
	            'margin-left': '-' + marginLeft + '%'
	          });
	          setTimeout(function () {
	            $('.ct_area').attr('data-slide', _index);
	          }, 295);
	        } else {
	          return false;
	        }
	      });
	      $('.ct_mobile_nav .arrow-right').click(function () {
	        if (_index < 2) {
	          _index += 1;
	          marginLeft = 80 * _index;
	          $('.ct_area').attr('data-slide', _index);
	          $('.ct_area').css({
	            'margin-left': '-' + marginLeft + '%'
	          });
	          $('.xAxis-labels').css({
	            'margin-left': '-' + marginLeft + '%'
	          });
	        } else {
	          return false;
	        }
	      });
	    } else {
	      $('.ct_area').removeAttr('data-slide');
	      $('.ct_area').removeAttr('style');
	      $('.xAxis-labels').removeAttr('style');
	    }
	  }
	})(jQuery);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {'use strict';

	jQuery(function ($) {
	    $('.intensity_select').on('change', function () {
	        titleDependsOnSelect(this);
	    });

	    $(document).on('click', '.week-plus', function (e) {
	        e.preventDefault();

	        var new_week_template = $('#week-template').html();
	        var week_index = parseInt($('.week-tabs').data('counter'));
	        var week_count = $('.week-tabs li').length + 1;

	        week_index = week_index + 1;

	        $('<li/>').append('<a/>').find('a').text(week_count).attr('href', '#').attr('data-index', week_index).closest('li').appendTo($('.week-tabs ul'));

	        var new_week = $(new_week_template.replace(new RegExp("{{week}}", "gm"), week_index));
	        $('.weeks-wrap').append(new_week);

	        $('.week-tabs').data('counter', week_index);

	        if (new_week.hasClass('accordion-week') || new_week.find('.accordion').length) {
	            new Foundation.Accordion(new_week, {
	                allowAllClosed: true,
	                multiExpand: true
	            });

	            new_week.find('.add-new-day').trigger('click');
	        } else {
	            new_week.find('.add-new-day-block').trigger('click');
	        }
	    });

	    $('.day-exercise tbody').on('exercise.sort', function () {
	        $(this).find('tr').each(function (index) {
	            $(this).find('input[data-name="order"]').val(index + 1);
	        });
	    });

	    $(document).on('click', '.week-tabs li a', function (e) {
	        e.preventDefault();
	        var week = $('.weeks-wrap .week-wrap[data-week="' + $(this).data('index') + '"]');
	        $(this).addClass('current');
	        $('.week-tabs li a').not(this).removeClass('current');

	        $('.weeks-wrap .week-wrap').not(week).removeClass('active');
	        week.addClass('active');
	    });

	    $(document).on('click', '.remove-week', function (e) {
	        e.preventDefault();
	        var week = $(this).closest('.week-wrap');
	        var week_index = week.data('week');
	        var week_tab_link = $('.week-tabs li a[data-index="' + week_index + '"]');

	        if (week.data('id')) {

	            week.find('.accordion-item').each(function () {
	                if ($(this).data('id')) {
	                    $('input[name="RemoveCardioDay[' + $(this).data('id') + ']"]').attr('checked', true);
	                }
	            });

	            $('input[name="RemoveCardioWeek[' + week.data('id') + ']"]').attr('checked', true);
	        }

	        var new_week_tab_link = week_tab_link.removeClass('current').closest('li').prev().find('a').addClass('current');

	        week_tab_link.closest('li').remove();

	        new_week_tab_link.trigger('click');

	        week.remove();

	        $('.week-tabs li a').each(function (index, el) {
	            $(this).text(index + 1);
	        });
	    });

	    $(document).on('click', '.remove-strength-week', function (e) {
	        e.preventDefault();
	        var week = $(this).closest('.week-wrap');
	        var week_index = week.data('week');
	        var week_tab_link = $('.week-tabs li a[data-index="' + week_index + '"]');

	        if (week.data('id')) {

	            week.find('.day-block').each(function () {
	                if ($(this).data('id')) {
	                    $('input[name="RemoveStrengthDay[' + $(this).data('id') + ']"]').attr('checked', true);
	                }
	            });

	            $('input[name="RemoveStrengthWeek[' + week.data('id') + ']"]').attr('checked', true);
	        }

	        var new_week_tab_link = week_tab_link.removeClass('current').closest('li').prev().find('a').addClass('current');

	        week_tab_link.closest('li').remove();

	        new_week_tab_link.trigger('click');

	        week.remove();

	        $('.week-tabs li a').each(function (index, el) {
	            $(this).text(index + 1);
	        });
	    });

	    $(document).on('click', '.add-new-day', function (e) {
	        e.preventDefault();
	        var week = $(this).closest('.week-wrap');
	        var itemsLength = parseInt(week.data('counter'));
	        var nextItemIndex = itemsLength + 1;
	        var daysLength = week.find('.accordion-item').length;
	        var new_day_template = $('#day-template').html();
	        var day = new_day_template.replace(new RegExp("{{day}}", "gm"), nextItemIndex).replace(new RegExp("{{week}}", "gm"), week.data('week')).replace(new RegExp("{{day_number}}", "gm"), daysLength + 1);
	        var accordionItem = $(day);

	        week.data('counter', nextItemIndex);

	        week.find('.accordion').append(accordionItem);
	        bindListeners();
	        setActive();
	    });

	    $('.remove_accordion-item').on('click', function (e) {
	        e.preventDefault();
	        removeAccordionItem(this);
	        bindListeners();
	        setActive();
	    });

	    function removeAccordionItem(el) {
	        var day = $(el).closest('.accordion-item');

	        if (day.data('id')) {
	            $('input[name="RemoveCardioDay[' + day.data('id') + ']"]').attr('checked', true);
	        }

	        day.remove();

	        $('.accordion').each(function () {
	            var accordion = $(this);
	            accordion.find('.accordion-item').each(function (index, item) {
	                $(item).children('.accordion-title').children('.day-number').text(index + 1);
	            });
	        });
	    }

	    function titleDependsOnSelect(item) {
	        var dayTitle = $(item).val();
	        $(item).parents('.accordion-content').siblings('.accordion-title').children('.day-title').text(dayTitle);
	    }

	    function setActive() {
	        $('.accordion').each(function () {
	            var accordion = $(this);
	            accordion.find('.accordion-item').each(function (i, item) {
	                if (i + 1 === accordion.find('.accordion-item').length) {
	                    $(item).addClass('is-active');
	                    $(item).children('.accordion-title').attr('aria-expanded', 'true');
	                    $(item).children('.accordion-title').attr('aria-selected', 'true');
	                    $(item).children('.accordion-content').css({ 'display': 'block' });
	                } else {
	                    $(item).removeClass('is-active');
	                    $(item).children('.accordion-title').attr('aria-expanded', 'false');
	                    $(item).children('.accordion-title').attr('aria-selected', 'false');
	                    $(item).children('.accordion-content').css({ 'display': 'none' });
	                }
	            });
	        });
	    }

	    function bindListeners() {

	        $('.accordion').each(function () {
	            new Foundation.Accordion($(this), {
	                allowAllClosed: true,
	                multiExpand: true
	            });
	        });
	        // re-bind listeners
	        $('.intensity_select').unbind(); // unbind listener on "change"
	        $('.intensity_select').on('change', function () {
	            // bind listener on "change" again
	            titleDependsOnSelect(this);
	        });

	        $('.remove_accordion-item').unbind();
	        $('.remove_accordion-item').on('click', function (e) {
	            removeAccordionItem(this);
	            bindListeners();
	            setActive();
	            e.preventDefault();
	        });
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {'use strict';

	jQuery(function ($) {
	    var dayNumber = void 0;
	    var weekNumber = void 0;
	    var modal_wrap = $('#addExercise');
	    var addExerciseModal = void 0;
	    // Adding exercises to tables via modal

	    if (modal_wrap.length) {
	        addExerciseModal = new Foundation.Reveal(modal_wrap);
	    }

	    function initHandlers() {
	        $('select#exercise_name').change(function (e) {
	            renderInfoBoxes(e.target.value, $('#add_exercise').data('line_id'));
	        });

	        $('#add_exercise').on('click', function (e) {
	            e.preventDefault();
	            pasteToTable();
	            var tableIndex = dayNumber - 1;

	            var willOpenIndex = $('.mobile-accordion:eq(' + tableIndex + ') tbody tr').length - 1;
	            $(window).trigger('updateTableAccordion', ['.mobile-accordion', 0, 767, willOpenIndex, tableIndex]);
	        });
	    }

	    initHandlers();

	    window.whr.context().on('whr-pjax:end', function () {
	        modal_wrap = $('#addExercise');

	        if (modal_wrap.length) {
	            addExerciseModal = new Foundation.Reveal(modal_wrap);
	        }

	        initHandlers();
	    });

	    $(document).on('click', '.add-new-day-block', function (e) {
	        e.preventDefault();

	        var week = $(this).closest('.week-wrap');
	        var itemsLength = parseInt(week.data('counter'));
	        var nextItemIndex = itemsLength + 1;
	        var currentAmountOfDays = week.find('.day-block').length; // current length of days
	        var indexNextDay = currentAmountOfDays + 1; // next index of day
	        var new_day_template = $('#day-template').html();

	        week.data('counter', nextItemIndex);

	        var day = new_day_template.replace(new RegExp("{{day}}", "gm"), nextItemIndex).replace(new RegExp("{{week}}", "gm"), week.data('week')).replace(new RegExp("{{day_number}}", "gm"), indexNextDay);

	        week.find('.days').append(day);
	    });

	    $(document).on('click', '.add-new-exercise', function (e) {
	        e.preventDefault();

	        modalOpen(this);
	    });

	    $(document).on('click', '.exercise-line td:not(:first-child)', function (e) {
	        e.preventDefault();
	        var line = $(this).closest('.exercise-line');

	        modalOpen(this, line.attr('id'));
	    });

	    $(document).on('click', '.delete-exercises', function (e) {
	        e.preventDefault();

	        var day = $(this).closest('.day-block');
	        var checked_exercises = day.find('.exercise-actions-checkbox:checked').closest('tr');

	        $(this).closest('.day-block').find('.exercise-actions').removeClass('visible');

	        checked_exercises.each(function () {
	            var exercise_id = $(this).find('input[data-name="id"]').val();

	            if (exercise_id) {
	                $('input[name="RemoveStrengthExercise[' + exercise_id + ']"]').attr('checked', true);
	            }
	        });

	        checked_exercises.remove();
	    });

	    $(document).on('click', '.remove_day_block', function (e) {
	        e.preventDefault();
	        removeDay(this);
	    });

	    $(document).on('change', '.day-exercise .exercise-actions-checkbox', function () {
	        var has_checked_exercises = $(this).closest('tbody').find('.exercise-actions-checkbox:checked').length > 0;

	        if (has_checked_exercises) {
	            $(this).closest('.day-block').find('.exercise-actions').addClass('visible');
	        } else {
	            $(this).closest('.day-block').find('.exercise-actions').removeClass('visible');
	        }
	    });

	    // Remove day on click btn with text 'Remove'
	    function removeDay(element) {
	        var day = $(element).closest('.day-block');
	        var day_id = day.data('id');

	        if (day_id) {
	            $('input[name="RemoveStrengthDay[' + day_id + ']"]').attr('checked', true);
	        }

	        day.slideUp('fast', function () {
	            $(this).remove();

	            $('.week').each(function () {
	                $(this).find('.day-block').each(function (index, item) {
	                    var day_index = $(this).find('.day-index').val();
	                    var new_day_index = index + 1;

	                    $(this).find('.day-index').val(new_day_index);
	                    $(item).children('.white-block').children('.block-head').children('.day-number').text(new_day_index);

	                    $(item).find('input, select, textarea').each(function (i, input) {
	                        var inputName = $(input).attr('name');
	                        var newInputName = inputName.replace("[days][" + day_index + "]", "[days][" + new_day_index + "]");
	                        $(input).attr('name', newInputName);
	                    });
	                });
	            });
	        });
	    }

	    // Get JSON-object and open modal window
	    function modalOpen(self, line_id) {
	        var line = line_id ? $('#' + line_id) : false;
	        var exercisesSelect = $('#exercise_name');
	        var DATA = exercisesSelect.data('exercises');

	        if (!DATA) {
	            console.error('No Data');
	            return false;
	        }

	        var options = DATA.map(function (payloadItem) {
	            var pId = payloadItem.id;
	            var pName = payloadItem.exercise_name;
	            return '<option value="' + pId + '">' + pName + '</option>';
	        });

	        dayNumber = $(self).data('day');
	        weekNumber = $(self).data('week');

	        exercisesSelect.html(options.join(''));

	        if (line) {
	            var exercise_id = line.find('input[data-name="id"]').val();
	            exercisesSelect.val(exercise_id);
	            renderInfoBoxes(exercisesSelect.val(), line_id);
	        } else {
	            renderInfoBoxes();
	        }

	        addExerciseModal.open();
	    }

	    // Render function
	    function renderInfoBoxes(val, line_id) {
	        var exercisesSelect = $('#exercise_name');
	        var line = line_id ? $('#' + line_id) : false;
	        var _exercisesData = exercisesSelect.data('exercises');
	        var _selectedValue = val || exercisesSelect.val();
	        var inputIDs = ['muscle_group', 'type', 'sets', 'reps', 'weight'];
	        var currentItem = void 0;

	        currentItem = getSingleExercise(_selectedValue, _exercisesData);

	        if (line) {
	            currentItem = {
	                muscle_group: currentItem.muscle_group,
	                type: currentItem.type,
	                sets: line.find('input[data-name="sets"]').val(),
	                reps: line.find('input[data-name="reps"]').val(),
	                weight: line.find('input[data-name="weight"]').val()
	            };
	            $('#add_exercise').data('line_id', line_id).text('Save Exercise');
	        } else {
	            $('#add_exercise').data('line_id', false).text('Add Exercise');
	        }

	        inputIDs.forEach(function (input) {
	            for (var key in currentItem) {
	                if (input === key) {
	                    $('input#' + input).val(currentItem[key]);
	                }
	            }
	        });
	    }

	    // Paste exercise to table on click btn 'Add Exercise'
	    function pasteToTable() {
	        var _selectedValue = $('select#exercise_name').val();
	        var _exercisesData = $.parseJSON($('select#exercise_name').attr('data-exercises'));
	        var _single = getSingleExercise(_selectedValue, _exercisesData);

	        var exercise_template = $('#exercise-template').html();
	        var exercise_wrap = $('.week-wrap[data-week="' + weekNumber + '"] .day-block[data-day="' + dayNumber + '"] table');
	        var exercise_index = parseInt(exercise_wrap.data('counter')) + 1;
	        var exercise = exercise_template.replace(new RegExp("{{day}}", "gm"), dayNumber).replace(new RegExp("{{week}}", "gm"), weekNumber).replace(new RegExp("{{exercise}}", "gm"), exercise_index);
	        var line_id = $('#add_exercise').data('line_id');
	        var line = line_id ? $('#' + line_id) : false;

	        if (line) {
	            exercise = line;
	        } else {
	            exercise = $(exercise);
	        }

	        for (var key in _single) {
	            var value = _single[key];

	            if ($('input#' + key).length) {
	                value = $('input#' + key).val();
	            }

	            exercise.find('input[data-name="' + key + '"]').val(value);
	            exercise.find('span[data-name="' + key + '"]').text(value);
	        }

	        if (!line) {
	            exercise_wrap.data('counter', exercise_index).append(exercise);
	        }

	        addExerciseModal.close();
	    }

	    // Return single item of exercise object. If {id} of selected value is equal to any element {id} of object, it will return this element
	    function getSingleExercise(id, payload) {
	        var result = void 0;
	        payload.forEach(function (payloadItem) {
	            if (parseInt(id) === parseInt(payloadItem.id)) {
	                result = payloadItem;
	            }
	        });
	        return result;
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {'use strict';

	jQuery(function ($) {
	  var modal = new Foundation.Reveal($('#galleryModal'));
	  $('.gallery li a').click(function (e) {
	    var imgSrc = $(this).attr('href');
	    var date = $(this).children('p').text();
	    $('#galleryModal .block-head span').text(date);
	    $('#galleryModal .gallery_image').append('<img src="' + imgSrc + '">');
	    console.log(imgSrc);
	    modal.open();
	    e.preventDefault();
	    return false;
	  });
	  $('#galleryModal').on("closed.zf.reveal", function (e, $panel) {
	    $('#galleryModal .block-head span').text('');
	    $('#galleryModal .gallery_image').html('');
	  });
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {'use strict';

	jQuery(function ($) {

	    $(document).on('click', '.add-another-alternate', function (e) {
	        e.preventDefault();
	        var template = $('#alternate-template').html();
	        var alternate = $(template);
	        alternate.appendTo('.alternate-wrapper');
	    });

	    $(document).on('click', '.remove-alternate', function (e) {
	        $(this).closest('.alternate-line').remove();
	    });
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {'use strict';

	jQuery(function ($) {
	  $('.add-set').on('click', function (e) {
	    var amountOfSets = $(this).parent().siblings('.exercises_completed_area').children('.exercises_completed').length;

	    console.log($(this).parent().siblings('.exercises_completed_area'));
	    var dayNumber = $(this).parent().siblings('.exercises_completed_area').attr('data-day');
	    /* reps */
	    var maxReps = 30;
	    var repsStep = 1;
	    var repsSelectName = 'repsD' + dayNumber + 'E' + (amountOfSets + 1); // generate name
	    var repsOptions = '';

	    for (var i = 1; i <= maxReps; i += repsStep) {
	      repsOptions += '<option value="' + i + '">' + i + '</option>';
	    }

	    /* weight */
	    var maxWeight = 150;
	    var weightStep = 10;
	    var weightSelectName = 'weightD' + dayNumber + 'E' + (amountOfSets + 1); // generate name
	    var weightOptions = '';

	    for (var _i = weightStep; _i <= maxWeight; _i += weightStep) {
	      weightOptions += '<option value="' + _i + '">' + _i + ' Kg</option>';
	    }

	    var setHtml = '<ul class="exercises_completed">' + '<li><span class="number">#' + (amountOfSets + 1) + '</span></li>' + '<li><div class="select_wrapper">' + '<select id="" name="' + repsSelectName + '">' + '<option value="" hidden selected>Select...</option>' + repsOptions + '</select>' + '</div></li>' + '<li><div class="select_wrapper">' + '<select id="" name="' + weightSelectName + '">' + '<option value="" hidden selected>Select...</option>' + weightOptions + '</select></div></li></ul>';

	    $('.exercises_completed_area').append(setHtml);
	    e.preventDefault();
	    return false;
	  });
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {'use strict';

	jQuery(function ($) {

	  var isScroll = false;

	  function isNeedScrollbar() {
	    var logoHeight = $('.logo').outerHeight();
	    var windowHeight = $(window).outerHeight();
	    var menuContainerHeight = $('.main-navigation').outerHeight();
	    var menu = $('.menu.vertical');
	    var menuHeight = $(menu[0]).outerHeight() + $(menu[1]).outerHeight();
	    var realmenuContainerHeight = getmenuContainerHeight();

	    if (windowHeight < logoHeight + menuHeight) {
	      $('.main-navigation').css({ height: realmenuContainerHeight });
	      if (!isScroll) {
	        setTimeout(function () {
	          $(".main-navigation").mCustomScrollbar({
	            theme: "dark-3",
	            axis: "y",
	            scrollInertia: 200,
	            mouseWheel: {
	              preventDefault: true
	            },
	            advanced: {
	              updateOnContentResize: true
	            }
	          });
	          isScroll = true;
	        }, 0);
	      }
	    } else {
	      $(".main-navigation").mCustomScrollbar("destroy");
	      $('.main-navigation').css({ height: windowHeight - logoHeight });
	      isScroll = false;
	    }
	  }
	  isNeedScrollbar();
	  $(window).resize(isNeedScrollbar);

	  function getmenuContainerHeight() {
	    var logoHeight = $('.logo').outerHeight();
	    var windowHeight = $(window).outerHeight();
	    return windowHeight - logoHeight;
	  }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {'use strict';

	jQuery(function ($) {
	  // left-side menu
	  $('.sandwich_btn').click(function () {
	    $('.main-menu').toggleClass('show-menu');
	    $(this).toggleClass('close-menu');
	    $('body').toggleClass('no-scroll');
	  });

	  // header menu
	  $('.header:not(.mobile-only) .mobile-menu-current-page span, .header:not(.mobile-only) .mobile-menu-current-page i').click(function () {
	    $('.header .menu').toggleClass('show-menu');
	    $('.mobile-menu-current-page').toggleClass('show-menu');
	  });
	  $(window).on('click', function (e) {
	    var _parent = e.target.parentNode;
	    if (_parent.parentNode) {
	      if (_parent.className.match(/mobile-menu-current-page/i) || _parent.parentNode.className.match(/menu/i)) {
	        return;
	      } else {
	        $('.header .menu').removeClass('show-menu');
	        $('.mobile-menu-current-page').removeClass('show-menu');
	      }
	    }
	  });
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {'use strict';

	jQuery(function ($) {

	  var responsiveTable = function responsiveTable(_className, _columns, _windowWidth, _willOpenIndex, _tableIndex, _fromThead) {
	    if ($(_className).length === 0) {
	      return false;
	    }
	    var columnHeight = void 0;
	    _willOpenIndex = _willOpenIndex || 0;

	    if ($(window).width() < _windowWidth) {
	      if (!$(_className).hasClass('ready')) {
	        init();
	      } else {
	        hideContent();
	        return false;
	      }
	    } else {
	      if ($(_className).hasClass('ready')) {
	        destroy();
	      } else {
	        return false;
	      }
	    }

	    function init() {
	      oneColumn();
	      hideContent();
	      bindListeners();
	      $(_className).addClass('ready'); // Ready
	    }
	    function destroy() {
	      $(_className + ' tbody tr').each(function (rowIndex, row) {
	        $(row).removeClass('active');
	        $(row).removeAttr('style');
	        $(row).children('td').each(function (columnIndex, column) {
	          $(column).removeClass('table-accordion-head');
	          $(column).children('.custom-header-title').remove();
	          $(column).children('span.table-header').remove();
	        });
	      });
	      $(_className).removeClass('ready');
	    }

	    // 
	    function oneColumn() {
	      $(_className + ' tbody tr').each(function (trIndex, row) {
	        $(row).children('td').each(function (tdIndex, column) {
	          var head = $(_className + ' thead tr th:eq(' + tdIndex + ')').text();
	          if (tdIndex !== _columns) {
	            var spanElement = createElementSpan(head, 'table-header');
	            renderHead({ trIndex: trIndex, tdIndex: tdIndex }, spanElement);
	          } else {
	            if (_fromThead !== undefined) {
	              var currHead = $(_className + ' tbody tr:eq(' + trIndex + ') td:eq(' + tdIndex + ')').text();
	              var th = $(_className + ' thead tr th:eq(' + _fromThead + ')').text();
	              var span = createElementSpan(th + ' ', 'custom-header-title');

	              $(_className + ' tbody tr:eq(' + trIndex + ') td:eq(' + tdIndex + ')').prepend(span);
	            }
	            $(_className + ' tbody tr:eq(' + trIndex + ') td:eq(' + tdIndex + ')').addClass('table-accordion-head');
	          }
	        });
	      });
	    }
	    function createElementSpan(text, className) {
	      var span = $('<span></span>');
	      span.addClass(className);
	      span.text(text);
	      return span;
	    }
	    function renderHead(position, element) {
	      $(_className + ' tbody tr:eq(' + position.trIndex + ') td:eq(' + position.tdIndex + ')').prepend(element);
	    }

	    function hideContent() {
	      var columnsHeight = 0;
	      var firstColumnHeight = 0;
	      $(_className + ' tbody tr:eq(0) td').each(function (i, item) {
	        if (i === 0) {
	          firstColumnHeight = parseInt($(item).outerHeight());
	        }
	        columnsHeight += parseInt($(item).outerHeight());
	      });

	      $(_className).attr('data-first-column-height', firstColumnHeight);
	      $(_className).attr('data-columns-height', columnsHeight); // set data attr with height of one column 
	      $(_className + ' tbody tr').css({ height: firstColumnHeight }); // hide all
	      console.log($(_className).attr('data-columns-height'));
	      // Expand the first row for each table
	      $(_className).each(function (i, item) {
	        var items = $(item).children('tbody').children('tr:eq(0)').children('td').length;
	        var itemHeight = parseInt($(_className).attr('data-columns-height'));

	        if (_tableIndex !== undefined) {
	          if (_tableIndex === i) {
	            $(item).children('tbody').children('tr:eq(' + _willOpenIndex + ')').addClass('active');
	            $(item).children('tbody').children('tr:eq(' + _willOpenIndex + ')').css({ height: itemHeight });
	          } else {
	            $(item).children('tbody').children('tr:eq(0)').addClass('active');
	            $(item).children('tbody').children('tr:eq(0)').css({ height: itemHeight });
	          }
	        } else {
	          $(item).children('tbody').children('tr:eq(0)').addClass('active');
	          $(item).children('tbody').children('tr:eq(0)').css({ height: itemHeight });
	        }
	      });
	    }
	    function bindListeners() {
	      $('.table-accordion-head').unbind();
	      $(window).unbind('updateTableAccordion');

	      $('.table-accordion-head').click(function (e) {

	        var hiddenItemsHeight = parseInt($(_className).attr('data-first-column-height'));
	        var items = $(this).siblings().length + 1;
	        var itemHeight = parseInt($(_className).attr('data-columns-height'));
	        var parent = $(this).parents(_className)[0];
	        var row = $(this).parent();

	        $(parent).children('tbody').children('tr').each(function (i, item) {
	          $(item).removeClass('active');
	          $(item).css({ height: hiddenItemsHeight });
	        });
	        $(row).addClass('active');
	        $(row).css({
	          height: itemHeight
	        });
	      });
	      // Generate Window event
	      // (event, _className, indexOfTr, breakpoint, willOpenIndex (not required), tableIndex (not required), f - index of thead element)
	      $(window).on('updateTableAccordion', function (e, c, i, w, o, t, f) {
	        destroy();
	        responsiveTable(c, i, w, o, t, f);
	      });
	    }
	  };

	  // end function
	  responsiveTable('.mobile-accordion', 0, 767, 0);
	  responsiveTable('.mobile-accordion-custom-header', 0, 767, 0, 0, 0);
	  $(window).resize(function () {
	    responsiveTable('.mobile-accordion', 0, 767, 0);
	    responsiveTable('.mobile-accordion-custom-header', 0, 767, 0, 0, 0);
	  });
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {'use strict';

	jQuery(function ($) {
	  var tableBlock = function tableBlock(_className) {
	    if ($(window).width() < 768) {
	      if (!$(_className).hasClass('ready')) {
	        $(_className + '  tbody tr').each(function (trIndex, trItem) {
	          $(trItem).children('td').each(function (tdIndex, tdItem) {
	            if (tdIndex !== 0 && tdIndex !== 1 && tdIndex !== 5) {
	              var text = $(tdItem).text();
	              var title = $(_className + '  thead tr th:eq(' + tdIndex + ')').text();
	              var spanText = createSpan(text, 'table-block-text');
	              var spanTitle = createSpan(title, 'table-block-title');
	              $(tdItem).html('');
	              $(tdItem).append(spanTitle);
	              $(tdItem).append(spanText);
	            } else if (tdIndex === 0) {
	              var _text = $(tdItem).text();
	              console.log(_text);
	              var spanNumber = createSpan(_text, 'table-block-number');
	              $(_className + '  tbody tr:eq(' + trIndex + ') td:eq(1)').prepend(spanNumber);
	            } else if (tdIndex === 5) {
	              var logBtn = $(tdItem).html();
	              $(_className + '  tbody tr:eq(' + trIndex + ') td:eq(1)').append('<span class="log-btn-inside-td">' + logBtn + '</span>');
	              console.log(logBtn);
	            }
	          });
	        });
	        $('.open-modal').click(function (e) {
	          e.preventDefault();
	        });
	        $(_className).addClass('ready');
	      }
	    } else {
	      destroy();
	    }

	    function createSpan(t, className) {
	      var span = $('<span></span>');
	      span.addClass(className);
	      span.html(t);
	      return span;
	    }
	    function destroy() {
	      $('.table-block-number').remove();
	      $('.table-block-title').remove();
	      $('.log-btn-inside-td').remove();
	      $('.table-block-text').each(function (i, item) {
	        var text = $(item).text();
	        $(item).html(text);
	      });
	      $(_className).removeClass('ready');
	    }
	  };
	  tableBlock('.mobile-table-block');

	  $(window).resize(function () {
	    tableBlock('.mobile-table-block');
	  });
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery, $) {'use strict';

	jQuery(function () {
	  var clientTable = function clientTable(_className, _windowWidth) {
	    if ($(_className).length === 0) {
	      return false;
	    }

	    if ($(window).width() < _windowWidth) {
	      if (!$(_className).hasClass('ready')) {
	        init();
	      } else {
	        destroy();
	        init();
	        hideContent();
	        return false;
	      }
	    } else {
	      if ($(_className).hasClass('ready')) {
	        destroy();
	      } else {
	        return false;
	      }
	    }

	    function init() {
	      renderAccordion();
	      hideContent();
	      bindListeners();
	      $(_className).addClass('ready');
	    }
	    function destroy() {
	      $('.clients-accordion').remove();
	      $('.table-header').remove();
	      $(_className + ' tbody tr').each(function (i, tr) {
	        $(tr).removeClass('active');
	        $(tr).removeAttr('style');
	      });
	      $(_className).removeClass('ready');
	    }
	    function renderAccordion() {
	      $(_className + ' tbody tr').each(function (trIndex, trItem) {
	        $(trItem).children('td').each(function (tdIndex, tdItem) {
	          if (tdIndex === 1) {
	            var text = $(tdItem).text();
	            var span = createSpanElement(text, 'clients-accordion');
	            $(_className + ' tbody tr:eq(' + trIndex + ') td:eq(0)').append(span);
	            $(_className + ' tbody tr:eq(' + trIndex + ') td:eq(0)').addClass('table-accordion-head');
	          } else if (tdIndex > 1) {
	            var head = $(_className + ' thead tr th:eq(' + tdIndex + ')').text();
	            var spanElement = createSpanElement(head, 'table-header');
	            renderHead({ trIndex: trIndex, tdIndex: tdIndex }, spanElement);
	          }
	        });
	      });
	    }
	    function createSpanElement(text, className) {
	      var span = $('<span></span>');
	      span.addClass(className);
	      span.text(text);
	      return span;
	    }
	    function renderHead(position, element) {
	      $(_className + ' tbody tr:eq(' + position.trIndex + ') td:eq(' + position.tdIndex + ')').prepend(element);
	    }
	    function hideContent() {
	      var columnsHeight = 0;
	      var firstColumnHeight = 0;
	      $(_className + ' tbody tr:eq(0) td').css({ height: '' });
	      $(_className + ' tbody tr:eq(0) td').each(function (i, item) {
	        if (i === 0) {
	          firstColumnHeight = parseInt($(item).outerHeight());
	        }
	        columnsHeight += parseInt($(item).outerHeight());
	      });

	      $(_className).attr('data-first-column-height', firstColumnHeight);
	      $(_className).attr('data-columns-height', columnsHeight); // set data attr with height of one column 
	      $(_className + ' tbody tr').css({ height: firstColumnHeight }); // hide all
	      // Expand the first row for each table
	      $(_className).each(function (i, item) {
	        var itemHeight = parseInt($(_className).attr('data-columns-height'));
	        $(item).children('tbody').children('tr:eq(0)').addClass('active');
	        $(item).children('tbody').children('tr:eq(0)').css({ height: itemHeight });
	      });
	    }
	    function bindListeners() {
	      $('.table-accordion-head').off('click');

	      $('.table-accordion-head').on('click', function (e) {

	        if ($(window).width() >= _windowWidth || $(e.target).is('input[type="checkbox"]')) {
	          return true;
	        }

	        var hiddenItemsHeight = parseInt($(_className).attr('data-first-column-height'));
	        var itemHeight = parseInt($(_className).attr('data-columns-height'));
	        var parent = $(this).parents(_className)[0];
	        var row = $(this).parent();

	        $(parent).children('tbody').children('tr').each(function (i, item) {
	          $(item).removeClass('active');
	          $(item).css({ height: hiddenItemsHeight });
	        });
	        $(row).addClass('active');
	        $(row).css({
	          height: itemHeight
	        });
	      });
	    }
	  };

	  clientTable('.mobile-custom-accordion', 768);
	  $(window).resize(function () {
	    clientTable('.mobile-custom-accordion', 768);
	  });
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(3)))

/***/ })
/******/ ]);